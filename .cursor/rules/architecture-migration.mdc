---
description:
globs:
alwaysApply: false
---
# Architecture Migration Guidelines

## Current State Analysis

### Strengths to Preserve
- âœ… Configuration-driven design (JSON files)
- âœ… Separation of data from logic
- âœ… Clean skill system architecture
- âœ… Good state management patterns

### Areas for Improvement
- ðŸ”„ Monolithic `game.js` file (1152 lines)
- ðŸ”„ Mixed concerns in single files
- ðŸ”„ No clear asset management system
- ðŸ”„ Limited internationalization support

## Migration Principles

### 1. Backward Compatibility
- Maintain current functionality during migration
- Gradual feature migration
- No breaking changes to user experience
- Preserve existing localStorage data

### 2. Incremental Testing
- Test each extracted system independently
- Maintain existing test coverage
- Add new tests for extracted components
- Verify functionality preservation

### 3. Performance Monitoring
- Monitor asset loading performance
- Track memory usage
- Ensure no regression in game performance
- Optimize for larger skill trees

## Engine Extraction Patterns

### Core Engine Structure
```
engine/
â”œâ”€â”€ core/
â”‚   â”œâ”€â”€ GameEngine.js      # Main engine class
â”‚   â”œâ”€â”€ StateManager.js    # Game state management
â”‚   â””â”€â”€ EventSystem.js     # Event handling
â””â”€â”€ systems/
    â”œâ”€â”€ SkillSystem.js     # Extract from game.js
    â”œâ”€â”€ InventorySystem.js # Extract from game.js
    â”œâ”€â”€ SpeciesSystem.js   # Extract from species-manager.js
    â””â”€â”€ ActionSystem.js    # Extract from game.js
```

### Migration Strategy
- Extract core game logic from `game.js`
- Create clean interfaces between engine and data
- Maintain backward compatibility
- Move system logic to dedicated classes
- Create clear APIs for each system
- Update references gradually

## Asset Management Guidelines

### Asset Loader Features
- Just-in-time loading for icons/images
- Caching system for performance
- Fallback handling for missing assets
- Support for multiple asset types

### Asset Organization
```
data/assets/
â”œâ”€â”€ icons/
â”‚   â”œâ”€â”€ skills/           # Skill icons
â”‚   â”œâ”€â”€ items/            # Item icons
â”‚   â””â”€â”€ species/          # Species icons
â””â”€â”€ images/
    â””â”€â”€ backgrounds/      # Game backgrounds
```

## Internationalization Patterns

### Localization System Features
- Dynamic language switching
- Fallback to default language
- Support for pluralization
- Just-in-time loading of language files

### Content Separation
```
data/localization/
â”œâ”€â”€ en/
â”‚   â”œâ”€â”€ skills.json       # Skill descriptions
â”‚   â”œâ”€â”€ items.json        # Item descriptions
â”‚   â””â”€â”€ ui.json          # UI text
â””â”€â”€ es/
    â””â”€â”€ [same structure]
```

## Mod System Foundation

### Mod Loader Features
- Dynamic mod loading
- Dependency resolution
- Conflict resolution
- Base game as mod structure

### Base Game as Mod
```
mods/base-game/
â”œâ”€â”€ manifest.json         # Mod metadata
â”œâ”€â”€ data/                # Current game data
â””â”€â”€ assets/              # Current game assets
```

## File Structure After Migration

```
taverns/
â”œâ”€â”€ website/              # Presentation layer
â”‚   â”œâ”€â”€ index.html
â”‚   â”œâ”€â”€ assets/
â”‚   â””â”€â”€ components/
â”œâ”€â”€ engine/               # Game engine
â”‚   â”œâ”€â”€ core/
â”‚   â”œâ”€â”€ systems/
â”‚   â””â”€â”€ utils/
â”œâ”€â”€ data/                 # Game data
â”‚   â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ content/
â”‚   â”œâ”€â”€ assets/
â”‚   â””â”€â”€ localization/
â”œâ”€â”€ mods/                 # Mod system
â”‚   â””â”€â”€ base-game/
â””â”€â”€ tests/                # Test suite
```

## Benefits of This Architecture

### 1. Scalability
- Easy to add new game systems
- Modular asset loading
- Support for multiple languages
- Plugin architecture

### 2. Maintainability
- Clear separation of concerns
- Easier to debug and test
- Reduced coupling between components
- Modular design

### 3. Extensibility
- Mod system foundation
- Plugin architecture
- Easy to add new content types
- User-generated content support

### 4. Performance
- Just-in-time asset loading
- Efficient caching
- Reduced initial load time
- Optimized for mobile

## Migration Implementation Rules

1. **Start with Phase 1**: Extract core engine first
2. **Create migration tests**: Ensure functionality preservation
3. **Document APIs**: Clear interfaces between systems
4. **Plan asset migration**: Organize existing assets
5. **Maintain existing functionality**: Don't break working features
6. **Test incrementally**: Verify each step before proceeding
7. **Update documentation**: Keep migration plan current
8. **Preserve user data**: Maintain localStorage compatibility
9. **Follow incremental development**: Small, testable changes
10. **Monitor performance**: Ensure no regression in game speed
