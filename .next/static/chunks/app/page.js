/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CGitHub%5C%5CSelf%5C%5Ctaverns%5C%5Csrc%5C%5Ccomponents%5C%5Cgame%5C%5CGameInterface.tsx%22%2C%22ids%22%3A%5B%22GameInterface%22%5D%7D&server=false!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CGitHub%5C%5CSelf%5C%5Ctaverns%5C%5Csrc%5C%5Ccomponents%5C%5Cgame%5C%5CGameInterface.tsx%22%2C%22ids%22%3A%5B%22GameInterface%22%5D%7D&server=false! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/game/GameInterface.tsx */ \"(app-pages-browser)/./src/components/game/GameInterface.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q0dpdEh1YiU1QyU1Q1NlbGYlNUMlNUN0YXZlcm5zJTVDJTVDc3JjJTVDJTVDY29tcG9uZW50cyU1QyU1Q2dhbWUlNUMlNUNHYW1lSW50ZXJmYWNlLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMkdhbWVJbnRlcmZhY2UlMjIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSx3TUFBMkkiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcIkdhbWVJbnRlcmZhY2VcIl0gKi8gXCJDOlxcXFxHaXRIdWJcXFxcU2VsZlxcXFx0YXZlcm5zXFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXGdhbWVcXFxcR2FtZUludGVyZmFjZS50c3hcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CGitHub%5C%5CSelf%5C%5Ctaverns%5C%5Csrc%5C%5Ccomponents%5C%5Cgame%5C%5CGameInterface.tsx%22%2C%22ids%22%3A%5B%22GameInterface%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      \"react-stack-bottom-frame\": function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIkM6XFxHaXRIdWJcXFNlbGZcXHRhdmVybnNcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZGlzdFxcY29tcGlsZWRcXHJlYWN0XFxqc3gtZGV2LXJ1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/game/GameInterface.tsx":
/*!***********************************************!*\
  !*** ./src/components/game/GameInterface.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameInterface: () => (/* binding */ GameInterface)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_game_engine_GameEngineWrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/game-engine/GameEngineWrapper */ \"(app-pages-browser)/./src/lib/game-engine/GameEngineWrapper.ts\");\n/* __next_internal_client_entry_do_not_use__ GameInterface auto */ \nvar _s = $RefreshSig$();\n\n\n// Lazy load components for better performance\nconst NarrationPanel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.lazy)(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_game_NarrationPanel_tsx\").then(__webpack_require__.bind(__webpack_require__, /*! ./NarrationPanel */ \"(app-pages-browser)/./src/components/game/NarrationPanel.tsx\")).then((module)=>({\n            default: module.NarrationPanel\n        })));\n_c = NarrationPanel;\nconst ActionsPanel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.lazy)(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_game_ActionsPanel_tsx\").then(__webpack_require__.bind(__webpack_require__, /*! ./ActionsPanel */ \"(app-pages-browser)/./src/components/game/ActionsPanel.tsx\")).then((module)=>({\n            default: module.ActionsPanel\n        })));\n_c1 = ActionsPanel;\nconst SidebarPanel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.lazy)(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_game_SidebarPanel_tsx\").then(__webpack_require__.bind(__webpack_require__, /*! ./SidebarPanel */ \"(app-pages-browser)/./src/components/game/SidebarPanel.tsx\")).then((module)=>({\n            default: module.SidebarPanel\n        })));\n_c2 = SidebarPanel;\n// Loading component for lazy-loaded panels\nfunction PanelLoading() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"p-4\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"animate-pulse\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"h-4 bg-gray-300 rounded w-1/2 mb-2\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                    lineNumber: 32,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"h-3 bg-gray-300 rounded w-3/4\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                    lineNumber: 33,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n            lineNumber: 31,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n        lineNumber: 30,\n        columnNumber: 5\n    }, this);\n}\n_c3 = PanelLoading;\nfunction GameInterface() {\n    _s();\n    const [engine, setEngine] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Initialize game engine\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"GameInterface.useEffect\": ()=>{\n            const initializeEngine = {\n                \"GameInterface.useEffect.initializeEngine\": async ()=>{\n                    try {\n                        const gameEngine = new _lib_game_engine_GameEngineWrapper__WEBPACK_IMPORTED_MODULE_2__.GameEngineWrapper();\n                        await gameEngine.init();\n                        // Set up event listeners for game state changes\n                        gameEngine.on('state:changed', {\n                            \"GameInterface.useEffect.initializeEngine\": (data)=>{\n                                updateGameState(gameEngine);\n                            }\n                        }[\"GameInterface.useEffect.initializeEngine\"]);\n                        gameEngine.on('message:add', {\n                            \"GameInterface.useEffect.initializeEngine\": (message)=>{\n                                setMessages({\n                                    \"GameInterface.useEffect.initializeEngine\": (prev)=>[\n                                            ...prev,\n                                            {\n                                                id: Date.now(),\n                                                text: message.text,\n                                                type: message.type || 'system',\n                                                timestamp: new Date()\n                                            }\n                                        ]\n                                }[\"GameInterface.useEffect.initializeEngine\"]);\n                            }\n                        }[\"GameInterface.useEffect.initializeEngine\"]);\n                        // Load initial game state\n                        updateGameState(gameEngine);\n                        // Add welcome messages\n                        setMessages([\n                            {\n                                id: 1,\n                                text: \"Welcome to Taverns and Treasures! Your adventure begins in a small village tavern.\",\n                                type: 'story',\n                                timestamp: new Date()\n                            },\n                            {\n                                id: 2,\n                                text: \"The innkeeper looks at you with curiosity. What will you do?\",\n                                type: 'story',\n                                timestamp: new Date()\n                            }\n                        ]);\n                        setEngine(gameEngine);\n                        setIsLoading(false);\n                    } catch (err) {\n                        setError(err instanceof Error ? err.message : 'Failed to initialize game engine');\n                        setIsLoading(false);\n                    }\n                }\n            }[\"GameInterface.useEffect.initializeEngine\"];\n            initializeEngine();\n        }\n    }[\"GameInterface.useEffect\"], []);\n    const updateGameState = (gameEngine)=>{\n        try {\n            const newState = {\n                skills: gameEngine.getSkills(),\n                inventory: gameEngine.getInventory(),\n                achievements: gameEngine.getAchievements(),\n                location: 'village_tavern',\n                messages: messages\n            };\n            setGameState(newState);\n        } catch (error) {\n            console.error('Failed to update game state:', error);\n        }\n    };\n    if (isLoading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full min-h-screen flex items-center justify-center bg-background text-foreground font-mono dark\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: \"Loading game...\"\n            }, void 0, false, {\n                fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                lineNumber: 115,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n            lineNumber: 114,\n            columnNumber: 7\n        }, this);\n    }\n    if (error) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full min-h-screen flex items-center justify-center bg-background text-foreground font-mono dark\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-red-500\",\n                children: [\n                    \"Error: \",\n                    error\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                lineNumber: 123,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n            lineNumber: 122,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full min-h-screen flex flex-row bg-background text-foreground font-mono dark\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 p-2 max-w-xs\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n                    fallback: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PanelLoading, {}, void 0, false, {\n                        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                        lineNumber: 131,\n                        columnNumber: 29\n                    }, void 0),\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NarrationPanel, {\n                        gameState: gameState\n                    }, void 0, false, {\n                        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                        lineNumber: 132,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                    lineNumber: 131,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                lineNumber: 130,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-[2] p-2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n                    fallback: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PanelLoading, {}, void 0, false, {\n                        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                        lineNumber: 136,\n                        columnNumber: 29\n                    }, void 0),\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ActionsPanel, {\n                        engine: engine,\n                        gameState: gameState,\n                        setGameState: setGameState\n                    }, void 0, false, {\n                        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                        lineNumber: 137,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                    lineNumber: 136,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                lineNumber: 135,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 p-2 max-w-xs\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n                    fallback: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PanelLoading, {}, void 0, false, {\n                        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                        lineNumber: 141,\n                        columnNumber: 29\n                    }, void 0),\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SidebarPanel, {\n                        gameState: gameState\n                    }, void 0, false, {\n                        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                        lineNumber: 142,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                    lineNumber: 141,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n                lineNumber: 140,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\GitHub\\\\Self\\\\taverns\\\\src\\\\components\\\\game\\\\GameInterface.tsx\",\n        lineNumber: 129,\n        columnNumber: 5\n    }, this);\n}\n_s(GameInterface, \"qD1kWSTGLPHiD4XaVGYCn/k6TFQ=\");\n_c4 = GameInterface;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"NarrationPanel\");\n$RefreshReg$(_c1, \"ActionsPanel\");\n$RefreshReg$(_c2, \"SidebarPanel\");\n$RefreshReg$(_c3, \"PanelLoading\");\n$RefreshReg$(_c4, \"GameInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/game/GameInterface.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/GameEngineWrapper.ts":
/*!**************************************************!*\
  !*** ./src/lib/game-engine/GameEngineWrapper.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameEngineWrapper: () => (/* binding */ GameEngineWrapper)\n/* harmony export */ });\n/* harmony import */ var _core_GameEngine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/GameEngine.js */ \"(app-pages-browser)/./src/lib/game-engine/core/GameEngine.js\");\n\nclass GameEngineWrapper {\n    async init() {\n        try {\n            await this.engine.initialize('base-game');\n            this.isInitialized = true;\n            console.log('Game engine initialized successfully');\n        } catch (error) {\n            console.error('Failed to initialize game engine:', error);\n            throw error;\n        }\n    }\n    start() {\n        if (!this.isInitialized) {\n            throw new Error('Engine must be initialized before starting');\n        }\n        this.engine.start();\n    }\n    stop() {\n        this.engine.stop();\n    }\n    // Game state access methods\n    getGameData() {\n        return this.engine.getGameData();\n    }\n    getSystem(systemName) {\n        return this.engine.getSystem(systemName);\n    }\n    // Skills system methods\n    getSkills() {\n        const skillManager = this.engine.getSystem('skills');\n        return skillManager ? skillManager.getAllSkills() : {};\n    }\n    getSkillLevel(skillName) {\n        const skillManager = this.engine.getSystem('skills');\n        return skillManager ? skillManager.getSkillLevel(skillName) : 1;\n    }\n    // Inventory system methods\n    getInventory() {\n        const inventoryManager = this.engine.getSystem('inventory');\n        return inventoryManager ? inventoryManager.getAllItems() : {};\n    }\n    // Action system methods\n    getAvailableActions() {\n        const actionManager = this.engine.getSystem('actions');\n        return actionManager ? actionManager.getAvailableActions() : [];\n    }\n    async performAction(actionId) {\n        const actionManager = this.engine.getSystem('actions');\n        if (actionManager && actionManager.performAction) {\n            return await actionManager.performAction(actionId);\n        }\n        throw new Error('Action system not available');\n    }\n    // Achievement system methods\n    getAchievements() {\n        const achievementSystem = this.engine.getSystem('achievements');\n        return achievementSystem ? achievementSystem.getAllAchievements() : [];\n    }\n    // State persistence\n    saveGame() {\n        const stateManager = this.engine.getSystem('state');\n        if (stateManager && stateManager.save) {\n            stateManager.save();\n        }\n    }\n    loadGame() {\n        const stateManager = this.engine.getSystem('state');\n        if (stateManager && stateManager.load) {\n            return stateManager.load();\n        }\n    }\n    // Event system access\n    on(event, callback) {\n        const eventSystem = this.engine.getSystem('events');\n        if (eventSystem && eventSystem.on) {\n            eventSystem.on(event, callback);\n        }\n    }\n    off(event, callback) {\n        const eventSystem = this.engine.getSystem('events');\n        if (eventSystem && eventSystem.off) {\n            eventSystem.off(event, callback);\n        }\n    }\n    emit(event, data) {\n        const eventSystem = this.engine.getSystem('events');\n        if (eventSystem && eventSystem.emit) {\n            eventSystem.emit(event, data);\n        }\n    }\n    // Check if engine is ready\n    isReady() {\n        return this.isInitialized;\n    }\n    constructor(){\n        this.isInitialized = false;\n        this.engine = new _core_GameEngine_js__WEBPACK_IMPORTED_MODULE_0__.GameEngine();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/GameEngineWrapper.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/core/AssetLoader.js":
/*!*************************************************!*\
  !*** ./src/lib/game-engine/core/AssetLoader.js ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssetLoader: () => (/* binding */ AssetLoader)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Asset Loader\r\n * \r\n * Handles just-in-time loading of game assets (icons, images, audio)\r\n * with intelligent caching and fallback handling.\r\n */ class AssetLoader {\n    /**\r\n     * Set the current mod for asset path resolution\r\n     * @param {Object} mod - Current mod data\r\n     */ setMod(mod) {\n        this.currentMod = mod;\n    }\n    /**\r\n     * Load an asset by type and path\r\n     * @param {string} type - Asset type (image, icon, audio, json)\r\n     * @param {string} path - Asset path relative to mod\r\n     * @param {Object} options - Loading options\r\n     * @returns {Promise} Promise that resolves to the loaded asset\r\n     */ async load(type, path) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const cacheKey = \"\".concat(type, \":\").concat(path);\n        // Check cache first\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        // Check if already loading\n        if (this.loadingPromises.has(cacheKey)) {\n            return this.loadingPromises.get(cacheKey);\n        }\n        // Start loading\n        const loadPromise = this._loadAsset(type, path, options);\n        this.loadingPromises.set(cacheKey, loadPromise);\n        try {\n            const asset = await loadPromise;\n            // Cache the result\n            this._addToCache(cacheKey, asset);\n            // Remove from loading promises\n            this.loadingPromises.delete(cacheKey);\n            return asset;\n        } catch (error) {\n            // Remove from loading promises on error\n            this.loadingPromises.delete(cacheKey);\n            throw error;\n        }\n    }\n    /**\r\n     * Preload a list of assets\r\n     * @param {Array} assets - Array of {type, path, options} objects\r\n     * @returns {Promise} Promise that resolves when all assets are loaded\r\n     */ async preload(assets) {\n        const loadPromises = assets.map((asset)=>this.load(asset.type, asset.path, asset.options || {}));\n        return Promise.allSettled(loadPromises);\n    }\n    /**\r\n     * Load an icon for a specific item/skill/species\r\n     * @param {string} category - Icon category (items, skills, species)\r\n     * @param {string} name - Asset name\r\n     * @param {Object} options - Loading options\r\n     * @returns {Promise} Promise that resolves to the icon\r\n     */ async loadIcon(category, name) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const path = this._resolveIconPath(category, name);\n        return this.load('icon', path, options);\n    }\n    /**\r\n     * Load localized text for an asset\r\n     * @param {string} category - Text category (items, skills, species)\r\n     * @param {string} name - Asset name\r\n     * @param {string} language - Language code\r\n     * @returns {Promise} Promise that resolves to localized text\r\n     */ async loadLocalizedText(category, name) {\n        let language = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'en';\n        const path = this._resolveLocalizationPath(category, language);\n        try {\n            var _localizationData_category;\n            const localizationData = await this.load('json', path);\n            return ((_localizationData_category = localizationData[category]) === null || _localizationData_category === void 0 ? void 0 : _localizationData_category[name]) || {};\n        } catch (error) {\n            console.warn(\"Failed to load localized text for \".concat(category, \"/\").concat(name, \" in \").concat(language, \":\"), error);\n            return {};\n        }\n    }\n    /**\r\n     * Load a JavaScript module dynamically\r\n     * @param {string} path - Path to the JavaScript file\r\n     * @param {Object} options - Loading options\r\n     * @returns {Promise} Promise that resolves when the module is loaded\r\n     */ async loadJavaScriptModule(path) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const cacheKey = \"js:\".concat(path);\n        // Check cache first\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        // Check if already loading\n        if (this.loadingPromises.has(cacheKey)) {\n            return this.loadingPromises.get(cacheKey);\n        }\n        // Start loading\n        const loadPromise = this._loadJavaScriptModule(path, options);\n        this.loadingPromises.set(cacheKey, loadPromise);\n        try {\n            const result = await loadPromise;\n            // Cache the result\n            this._addToCache(cacheKey, result);\n            // Remove from loading promises\n            this.loadingPromises.delete(cacheKey);\n            return result;\n        } catch (error) {\n            // Remove from loading promises on error\n            this.loadingPromises.delete(cacheKey);\n            throw error;\n        }\n    }\n    /**\r\n     * Load multiple JavaScript modules\r\n     * @param {Array} modules - Array of module paths\r\n     * @param {Object} options - Loading options\r\n     * @returns {Promise} Promise that resolves when all modules are loaded\r\n     */ async loadJavaScriptModules(modules) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const loadPromises = modules.map((modulePath)=>this.loadJavaScriptModule(modulePath, options));\n        return Promise.allSettled(loadPromises);\n    }\n    /**\r\n     * Clear the asset cache\r\n     */ clearCache() {\n        this.cache.clear();\n    }\n    /**\r\n     * Get cache statistics\r\n     * @returns {Object} Cache statistics\r\n     */ getCacheStats() {\n        return {\n            size: this.cache.size,\n            maxSize: this.cacheSize,\n            loading: this.loadingPromises.size\n        };\n    }\n    // Private methods\n    async _loadAsset(type, path, options) {\n        const handler = this.handlers[type];\n        if (!handler) {\n            throw new Error(\"Unknown asset type: \".concat(type));\n        }\n        const fullPath = this._resolveAssetPath(path);\n        return handler(fullPath, options);\n    }\n    _resolveAssetPath(path) {\n        if (!this.currentMod) {\n            throw new Error('No mod set for asset loading');\n        }\n        // If path is already absolute, return as is\n        if (path.startsWith('http://') || path.startsWith('https://')) {\n            return path;\n        }\n        // Resolve relative to mod path\n        return \"mods/\".concat(this.currentMod.id, \"/\").concat(path);\n    }\n    _resolveIconPath(category, name) {\n        var _this_currentMod_manifest_assets_icons, _this_currentMod_manifest_assets, _this_currentMod_manifest, _this_currentMod;\n        if (!((_this_currentMod = this.currentMod) === null || _this_currentMod === void 0 ? void 0 : (_this_currentMod_manifest = _this_currentMod.manifest) === null || _this_currentMod_manifest === void 0 ? void 0 : (_this_currentMod_manifest_assets = _this_currentMod_manifest.assets) === null || _this_currentMod_manifest_assets === void 0 ? void 0 : (_this_currentMod_manifest_assets_icons = _this_currentMod_manifest_assets.icons) === null || _this_currentMod_manifest_assets_icons === void 0 ? void 0 : _this_currentMod_manifest_assets_icons[category])) {\n            throw new Error(\"Icon category '\".concat(category, \"' not found in mod manifest\"));\n        }\n        const basePath = this.currentMod.manifest.assets.icons[category];\n        return \"\".concat(basePath).concat(name, \".png\");\n    }\n    _resolveLocalizationPath(category, language) {\n        var _this_currentMod_manifest_localization, _this_currentMod_manifest, _this_currentMod;\n        if (!((_this_currentMod = this.currentMod) === null || _this_currentMod === void 0 ? void 0 : (_this_currentMod_manifest = _this_currentMod.manifest) === null || _this_currentMod_manifest === void 0 ? void 0 : (_this_currentMod_manifest_localization = _this_currentMod_manifest.localization) === null || _this_currentMod_manifest_localization === void 0 ? void 0 : _this_currentMod_manifest_localization.path)) {\n            throw new Error('Localization path not found in mod manifest');\n        }\n        const basePath = this.currentMod.manifest.localization.path;\n        return \"\".concat(basePath).concat(language, \"/\").concat(category, \".json\");\n    }\n    async _loadImage(path, options) {\n        return new Promise((resolve, reject)=>{\n            const img = new Image();\n            img.onload = ()=>resolve(img);\n            img.onerror = ()=>reject(new Error(\"Failed to load image: \".concat(path)));\n            if (options.crossOrigin) {\n                img.crossOrigin = options.crossOrigin;\n            }\n            img.src = path;\n        });\n    }\n    async _loadIcon(path, options) {\n        // Icons are just images with specific handling\n        return this._loadImage(path, options);\n    }\n    async _loadAudio(path, options) {\n        return new Promise((resolve, reject)=>{\n            const audio = new Audio();\n            audio.oncanplaythrough = ()=>resolve(audio);\n            audio.onerror = ()=>reject(new Error(\"Failed to load audio: \".concat(path)));\n            if (options.preload) {\n                audio.preload = options.preload;\n            }\n            audio.src = path;\n        });\n    }\n    async _loadJSON(path, options) {\n        try {\n            const response = await fetch(path);\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            return await response.json();\n        } catch (error) {\n            throw new Error(\"Failed to load JSON: \".concat(path, \" - \").concat(error.message));\n        }\n    }\n    async _loadJavaScriptModule(path, options) {\n        return new Promise((resolve, reject)=>{\n            // Create a script element\n            const script = document.createElement('script');\n            script.type = 'text/javascript';\n            script.async = true;\n            script.onload = ()=>{\n                // Script loaded successfully\n                resolve({\n                    loaded: true,\n                    path\n                });\n            };\n            script.onerror = ()=>{\n                reject(new Error(\"Failed to load JavaScript module: \".concat(path)));\n            };\n            // Set the source and append to document\n            script.src = path;\n            document.head.appendChild(script);\n        });\n    }\n    _addToCache(key, asset) {\n        // Implement LRU cache eviction\n        if (this.cache.size >= this.cacheSize) {\n            const firstKey = this.cache.keys().next().value;\n            this.cache.delete(firstKey);\n        }\n        this.cache.set(key, asset);\n    }\n    constructor(cacheSize = 100){\n        this.cacheSize = cacheSize;\n        this.cache = new Map();\n        this.loadingPromises = new Map();\n        this.currentMod = null;\n        // Asset type handlers\n        this.handlers = {\n            'image': this._loadImage.bind(this),\n            'icon': this._loadIcon.bind(this),\n            'audio': this._loadAudio.bind(this),\n            'json': this._loadJSON.bind(this),\n            'js': this._loadJavaScriptModule.bind(this)\n        };\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = AssetLoader;\n}\nif (true) window.AssetLoader = AssetLoader;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/core/AssetLoader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/core/ConfigManager.js":
/*!***************************************************!*\
  !*** ./src/lib/game-engine/core/ConfigManager.js ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigManager: () => (/* binding */ ConfigManager)\n/* harmony export */ });\n/**\r\n * Manages all game configuration files and provides centralized access to game settings.\r\n * Handles loading, validation, and merging of configuration data with fallback defaults.\r\n * \r\n * @class ConfigManager\r\n */ class ConfigManager {\n    /**\r\n     * Returns the default configuration object used as fallback when loading fails.\r\n     * \r\n     * @returns {Object} The default configuration object\r\n     */ getDefaultConfig() {\n        return {\n            ui: {\n                cssClasses: {\n                    skillItem: 'skill-item',\n                    skillHeader: 'skill-header',\n                    skillName: 'skill-name',\n                    skillLevel: 'skill-level',\n                    skillProgressContainer: 'skill-progress-container',\n                    skillProgressBar: 'skill-progress-bar',\n                    skillProgressFill: 'skill-progress-fill',\n                    skillXp: 'skill-xp',\n                    actionButton: 'action-button',\n                    newUnlock: 'new-unlock',\n                    narrationMessage: 'narration-message',\n                    tabButton: 'tab-button',\n                    tabPanel: 'tab-panel',\n                    active: 'active',\n                    toast: 'toast',\n                    toastContainer: 'toast-container'\n                },\n                elementIds: {\n                    narrationContent: 'narration-content',\n                    skillsContent: 'skills-content',\n                    actionsContent: 'actions-content',\n                    toastContainer: 'toast-container'\n                },\n                tabs: [\n                    {\n                        id: 'skills',\n                        displayName: 'Skills',\n                        icon: '⚔️'\n                    },\n                    {\n                        id: 'inventory',\n                        displayName: 'Inventory',\n                        icon: '🎒'\n                    },\n                    {\n                        id: 'character',\n                        displayName: 'Character',\n                        icon: '👤'\n                    },\n                    {\n                        id: 'quests',\n                        displayName: 'Quests',\n                        icon: '🗺️'\n                    }\n                ]\n            },\n            constants: {\n                xpMultiplier: 100,\n                defaultLevel: 1,\n                defaultXp: 0,\n                progressMax: 100\n            },\n            skills: {},\n            messages: {\n                welcome: 'Welcome to Taverns and Treasures! Your adventure begins...',\n                levelUp: '🎉 {skillName} level up! You are now level {level}.',\n                actionUnlocked: '🔓 New action unlocked: {actionName} (Level {level})',\n                actionCompleted: 'You {actionName} and gained {xpReward} XP. ({itemReward}: {itemCount})',\n                configError: 'Error: Could not load game configuration. Please refresh the page.',\n                configLoaded: 'Game configuration loaded successfully',\n                skillsConfigLoaded: 'Skills configuration loaded successfully',\n                skillsConfigError: 'Error: Could not load skills configuration.',\n                gameSaved: '🔄 Game progress saved',\n                gameLoaded: '📥 Welcome back! Your progress has been loaded',\n                noSaveFound: '🆕 No saved game found. Starting a new game',\n                saveError: '⚠️ Failed to save game progress',\n                loadError: '⚠️ Failed to load saved game',\n                actionInsufficientItems: 'Insufficient items to perform the action: {itemName}',\n                actionItemsConsumed: 'You consumed {itemCount}x {itemName}',\n                actionItemsGained: 'You gained {itemCount}x {itemName}',\n                actionTimeRequired: 'This action requires {time} {timeUnit} to complete'\n            },\n            gameSettings: {\n                initialWood: 0\n            }\n        };\n    }\n    /**\r\n     * Loads the game configuration file from data/config/game-config.json.\r\n     * \r\n     * @async\r\n     * @returns {Promise<Object>} The loaded and merged game configuration\r\n     * @throws {Error} If the configuration file cannot be loaded or parsed\r\n     */ async loadGameConfig() {\n        try {\n            const response = await fetch('data/config/game-config.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const config = await response.json();\n            this.gameConfig = this.deepMerge(this.defaultConfig, config);\n            console.log('Game configuration loaded successfully');\n            return this.gameConfig;\n        } catch (error) {\n            console.error('Failed to load game configuration:', error);\n            this.gameConfig = this.defaultConfig;\n            return this.gameConfig;\n        }\n    }\n    /**\r\n     * Loads the skills configuration file from data/skills.json.\r\n     * \r\n     * @async\r\n     * @returns {Promise<Object>} The loaded skills configuration\r\n     * @throws {Error} If the skills configuration file cannot be loaded or parsed\r\n     */ async loadSkillsConfig() {\n        try {\n            const response = await fetch('data/skills.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            this.skillsConfig = await response.json();\n            console.log('Skills configuration loaded successfully');\n            return this.skillsConfig;\n        } catch (error) {\n            console.error('Failed to load skills configuration:', error);\n            this.skillsConfig = {};\n            return this.skillsConfig;\n        }\n    }\n    /**\r\n     * Loads the traits configuration file from data/traits.json.\r\n     * \r\n     * @async\r\n     * @returns {Promise<Object>} The loaded traits configuration\r\n     * @throws {Error} If the traits configuration file cannot be loaded or parsed\r\n     */ async loadTraitsConfig() {\n        try {\n            const response = await fetch('data/traits.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            this.traitsConfig = await response.json();\n            console.log('Traits configuration loaded successfully');\n            return this.traitsConfig;\n        } catch (error) {\n            console.error('Failed to load traits configuration:', error);\n            this.traitsConfig = {\n                traits: {}\n            };\n            return this.traitsConfig;\n        }\n    }\n    /**\r\n     * Loads the actions configuration file from data/config/actions.json.\r\n     * \r\n     * @async\r\n     * @returns {Promise<Object>} The loaded actions configuration\r\n     * @throws {Error} If the actions configuration file cannot be loaded or parsed\r\n     */ async loadActionsConfig() {\n        try {\n            const response = await fetch('data/config/actions.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            this.actionsConfig = await response.json();\n            console.log('Actions configuration loaded successfully');\n            return this.actionsConfig;\n        } catch (error) {\n            console.error('Failed to load actions configuration:', error);\n            this.actionsConfig = {};\n            return this.actionsConfig;\n        }\n    }\n    /**\r\n     * Loads all configuration files concurrently.\r\n     * \r\n     * @async\r\n     * @returns {Promise<Object>} Object containing all loaded configurations\r\n     */ async loadAllConfigs() {\n        const [gameConfig, skillsConfig, traitsConfig, actionsConfig] = await Promise.all([\n            this.loadGameConfig(),\n            this.loadSkillsConfig(),\n            this.loadTraitsConfig(),\n            this.loadActionsConfig()\n        ]);\n        return {\n            gameConfig,\n            skillsConfig,\n            traitsConfig,\n            actionsConfig\n        };\n    }\n    /**\r\n     * Gets the current game configuration, falling back to default if not loaded.\r\n     * \r\n     * @returns {Object} The game configuration object\r\n     */ getGameConfig() {\n        return this.gameConfig || this.defaultConfig;\n    }\n    /**\r\n     * Gets the current skills configuration, falling back to empty object if not loaded.\r\n     * \r\n     * @returns {Object} The skills configuration object\r\n     */ getSkillsConfig() {\n        return this.skillsConfig || {};\n    }\n    /**\r\n     * Gets the current traits configuration, falling back to empty object if not loaded.\r\n     * \r\n     * @returns {Object} The traits configuration object\r\n     */ getTraitsConfig() {\n        return this.traitsConfig || {\n            traits: {}\n        };\n    }\n    /**\r\n     * Gets the current actions configuration, falling back to empty object if not loaded.\r\n     * \r\n     * @returns {Object} The actions configuration object\r\n     */ getActionsConfig() {\n        return this.actionsConfig || {};\n    }\n    /**\r\n     * Gets a message from the configuration and replaces placeholders with provided values.\r\n     * \r\n     * @param {string} key - The message key to retrieve\r\n     * @param {Object} [replacements={}] - Object containing placeholder replacements\r\n     * @returns {string} The processed message with replacements applied\r\n     */ getMessage(key) {\n        let replacements = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const messages = this.getGameConfig().messages || {};\n        let message = messages[key] || key;\n        for (const [placeholder, value] of Object.entries(replacements)){\n            message = message.replace(new RegExp(\"{\".concat(placeholder, \"}\"), 'g'), value);\n        }\n        return message;\n    }\n    /**\r\n     * Gets a constant value from the configuration with optional default fallback.\r\n     * \r\n     * @param {string} key - The constant key to retrieve\r\n     * @param {*} [defaultValue=null] - Default value if key is not found\r\n     * @returns {*} The constant value or default\r\n     */ getConstant(key) {\n        let defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        const constants = this.getGameConfig().constants || {};\n        return constants[key] !== undefined ? constants[key] : defaultValue;\n    }\n    /**\r\n     * Gets the UI configuration section from the game configuration.\r\n     * \r\n     * @returns {Object} The UI configuration object\r\n     */ getUIConfig() {\n        return this.getGameConfig().ui || {};\n    }\n    /**\r\n     * Performs a deep merge of two objects, with source properties overriding target properties.\r\n     * Arrays in the source completely replace arrays in the target.\r\n     *\r\n     * @param {Object} target - The target object to merge into\r\n     * @param {Object} source - The source object to merge from\r\n     * @returns {Object} The merged object\r\n     */ deepMerge(target, source) {\n        const result = {\n            ...target\n        };\n        for(const key in source){\n            if (source.hasOwnProperty(key)) {\n                if (Array.isArray(source[key])) {\n                    // Replace arrays entirely\n                    result[key] = source[key].slice();\n                } else if (source[key] instanceof Object && key in target && target[key] instanceof Object && !Array.isArray(target[key])) {\n                    result[key] = this.deepMerge(target[key], source[key]);\n                } else {\n                    result[key] = source[key];\n                }\n            }\n        }\n        return result;\n    }\n    /**\r\n     * Updates the current configuration with new configuration data.\r\n     * \r\n     * @param {Object} newConfig - The new configuration to merge\r\n     */ updateConfig(newConfig) {\n        this.gameConfig = this.deepMerge(this.gameConfig || this.defaultConfig, newConfig);\n    }\n    /**\r\n     * Resets the configuration to the default values.\r\n     */ resetToDefault() {\n        this.gameConfig = this.defaultConfig;\n    }\n    /**\r\n     * Creates a new ConfigManager instance.\r\n     * Initializes configuration storage and loads default configuration.\r\n     */ constructor(){\n        /** @type {Object|null} The loaded game configuration */ this.gameConfig = null;\n        /** @type {Object|null} The loaded skills configuration */ this.skillsConfig = null;\n        /** @type {Object|null} The loaded traits configuration */ this.traitsConfig = null;\n        /** @type {Object|null} The loaded actions configuration */ this.actionsConfig = null;\n        /** @type {Object} The default configuration fallback */ this.defaultConfig = this.getDefaultConfig();\n    }\n}\nif (true) window.ConfigManager = ConfigManager;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/core/ConfigManager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/core/EventSystem.js":
/*!*************************************************!*\
  !*** ./src/lib/game-engine/core/EventSystem.js ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventSystem: () => (/* binding */ EventSystem)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Event System\r\n * \r\n * Handles all event communication between different parts of the game engine.\r\n * Provides decoupled communication and event management.\r\n */ class EventSystem {\n    /**\r\n     * Subscribe to an event\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Callback function\r\n     * @param {Object} options - Event options\r\n     */ on(event, callback) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (!this.enabled) return;\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        const listener = {\n            callback,\n            options,\n            id: this._generateListenerId()\n        };\n        this.listeners.get(event).push(listener);\n        return listener.id; // Return listener ID for removal\n    }\n    /**\r\n     * Subscribe to an event once (auto-removes after first trigger)\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Callback function\r\n     * @param {Object} options - Event options\r\n     */ once(event, callback) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (!this.enabled) return;\n        const onceCallback = (data)=>{\n            callback(data);\n            this.off(event, onceCallback);\n        };\n        return this.on(event, onceCallback, options);\n    }\n    /**\r\n     * Unsubscribe from an event\r\n     * @param {string} event - Event name\r\n     * @param {Function|string} callbackOrId - Callback function or listener ID\r\n     */ off(event, callbackOrId) {\n        if (!this.listeners.has(event)) return;\n        const listeners = this.listeners.get(event);\n        if (typeof callbackOrId === 'string') {\n            // Remove by listener ID\n            const index = listeners.findIndex((listener)=>listener.id === callbackOrId);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        } else {\n            // Remove by callback function\n            const index = listeners.findIndex((listener)=>listener.callback === callbackOrId);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    /**\r\n     * Emit an event to all listeners\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     * @param {Object} options - Emission options\r\n     */ emit(event) {\n        let data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (!this.enabled) return;\n        const timestamp = Date.now();\n        const eventInfo = {\n            event,\n            data,\n            timestamp,\n            options\n        };\n        // Add to history\n        this._addToHistory(eventInfo);\n        // Get listeners for this event\n        const listeners = this.listeners.get(event) || [];\n        // Emit to all listeners\n        listeners.forEach((listener)=>{\n            try {\n                // Check if listener should be called based on options\n                if (this._shouldCallListener(listener, options)) {\n                    listener.callback(data, eventInfo);\n                }\n            } catch (error) {\n                console.error(\"Error in event listener for \".concat(event, \":\"), error);\n                this.emit('error', {\n                    error,\n                    event,\n                    listenerId: listener.id\n                });\n            }\n        });\n        // Emit to wildcard listeners\n        this._emitToWildcards(event, data, eventInfo);\n    }\n    /**\r\n     * Emit an event asynchronously\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     * @param {Object} options - Emission options\r\n     */ async emitAsync(event) {\n        let data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (!this.enabled) return;\n        const timestamp = Date.now();\n        const eventInfo = {\n            event,\n            data,\n            timestamp,\n            options\n        };\n        // Add to history\n        this._addToHistory(eventInfo);\n        // Get listeners for this event\n        const listeners = this.listeners.get(event) || [];\n        // Emit to all listeners asynchronously\n        const promises = listeners.map(async (listener)=>{\n            try {\n                if (this._shouldCallListener(listener, options)) {\n                    await listener.callback(data, eventInfo);\n                }\n            } catch (error) {\n                console.error(\"Error in async event listener for \".concat(event, \":\"), error);\n                this.emit('error', {\n                    error,\n                    event,\n                    listenerId: listener.id\n                });\n            }\n        });\n        await Promise.all(promises);\n        // Emit to wildcard listeners\n        await this._emitToWildcardsAsync(event, data, eventInfo);\n    }\n    /**\r\n     * Remove all listeners for an event\r\n     * @param {string} event - Event name\r\n     */ removeAllListeners(event) {\n        if (event) {\n            this.listeners.delete(event);\n        } else {\n            this.listeners.clear();\n        }\n    }\n    /**\r\n     * Get all listeners for an event\r\n     * @param {string} event - Event name\r\n     * @returns {Array} Array of listeners\r\n     */ getListeners(event) {\n        return this.listeners.get(event) || [];\n    }\n    /**\r\n     * Get listener count for an event\r\n     * @param {string} event - Event name\r\n     * @returns {number} Number of listeners\r\n     */ getListenerCount(event) {\n        return this.getListeners(event).length;\n    }\n    /**\r\n     * Get all registered events\r\n     * @returns {Array} Array of event names\r\n     */ getEvents() {\n        return Array.from(this.listeners.keys());\n    }\n    /**\r\n     * Get event history\r\n     * @param {string} event - Optional event filter\r\n     * @param {number} limit - Maximum number of events to return\r\n     * @returns {Array} Array of recent events\r\n     */ getHistory() {\n        let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        let history = this.eventHistory;\n        if (event) {\n            history = history.filter((item)=>item.event === event);\n        }\n        if (limit) {\n            history = history.slice(-limit);\n        }\n        return history;\n    }\n    /**\r\n     * Clear event history\r\n     */ clearHistory() {\n        this.eventHistory = [];\n    }\n    /**\r\n     * Enable or disable the event system\r\n     * @param {boolean} enabled - Whether events should be enabled\r\n     */ setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\r\n     * Check if event system is enabled\r\n     * @returns {boolean} Whether events are enabled\r\n     */ isEnabled() {\n        return this.enabled;\n    }\n    /**\r\n     * Set maximum history size\r\n     * @param {number} size - Maximum number of events to keep in history\r\n     */ setMaxHistorySize(size) {\n        this.maxHistorySize = size;\n        this._trimHistory();\n    }\n    /**\r\n     * Get event system statistics\r\n     * @returns {Object} Event system statistics\r\n     */ getStats() {\n        const totalListeners = Array.from(this.listeners.values()).reduce((sum, listeners)=>sum + listeners.length, 0);\n        return {\n            totalEvents: this.listeners.size,\n            totalListeners,\n            historySize: this.eventHistory.length,\n            maxHistorySize: this.maxHistorySize,\n            enabled: this.enabled\n        };\n    }\n    // Private methods\n    /**\r\n     * Add event to history\r\n     * @param {Object} eventInfo - Event information\r\n     */ _addToHistory(eventInfo) {\n        this.eventHistory.push(eventInfo);\n        this._trimHistory();\n    }\n    /**\r\n     * Trim history to maximum size\r\n     */ _trimHistory() {\n        if (this.eventHistory.length > this.maxHistorySize) {\n            this.eventHistory = this.eventHistory.slice(-this.maxHistorySize);\n        }\n    }\n    /**\r\n     * Generate unique listener ID\r\n     * @returns {string} Unique listener ID\r\n     */ _generateListenerId() {\n        return \"listener_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    /**\r\n     * Check if listener should be called based on options\r\n     * @param {Object} listener - Listener object\r\n     * @param {Object} options - Emission options\r\n     * @returns {boolean} Whether listener should be called\r\n     */ _shouldCallListener(listener, options) {\n        // Add filtering logic here if needed\n        return true;\n    }\n    /**\r\n     * Emit to wildcard listeners\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     * @param {Object} eventInfo - Event information\r\n     */ _emitToWildcards(event, data, eventInfo) {\n        const wildcardListeners = this.listeners.get('*') || [];\n        wildcardListeners.forEach((listener)=>{\n            try {\n                listener.callback({\n                    event,\n                    data\n                }, eventInfo);\n            } catch (error) {\n                console.error(\"Error in wildcard event listener:\", error);\n            }\n        });\n    }\n    /**\r\n     * Emit to wildcard listeners asynchronously\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     * @param {Object} eventInfo - Event information\r\n     */ async _emitToWildcardsAsync(event, data, eventInfo) {\n        const wildcardListeners = this.listeners.get('*') || [];\n        const promises = wildcardListeners.map(async (listener)=>{\n            try {\n                await listener.callback({\n                    event,\n                    data\n                }, eventInfo);\n            } catch (error) {\n                console.error(\"Error in async wildcard event listener:\", error);\n            }\n        });\n        await Promise.all(promises);\n    }\n    constructor(){\n        this.listeners = new Map();\n        this.onceListeners = new Map();\n        this.eventHistory = [];\n        this.maxHistorySize = 100;\n        this.enabled = true;\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = EventSystem;\n}\nif (true) window.EventSystem = EventSystem;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/core/EventSystem.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/core/GameEngine.js":
/*!************************************************!*\
  !*** ./src/lib/game-engine/core/GameEngine.js ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameEngine: () => (/* binding */ GameEngine)\n/* harmony export */ });\n/* harmony import */ var _GameStateManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameStateManager.js */ \"(app-pages-browser)/./src/lib/game-engine/core/GameStateManager.js\");\n/* harmony import */ var _EventSystem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/core/EventSystem.js\");\n/* harmony import */ var _AssetLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AssetLoader.js */ \"(app-pages-browser)/./src/lib/game-engine/core/AssetLoader.js\");\n/* harmony import */ var _ConfigManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConfigManager.js */ \"(app-pages-browser)/./src/lib/game-engine/core/ConfigManager.js\");\n/* harmony import */ var _utils_Localization_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Localization.js */ \"(app-pages-browser)/./src/lib/game-engine/utils/Localization.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Core Game Engine\r\n * \r\n * This is the main engine class that orchestrates all game systems.\r\n * It maintains clean separation between engine logic and game data,\r\n * allowing the same engine to run different games with different data sets.\r\n */ // Import core systems\n\n\n\n\n\nclass GameEngine {\n    /**\r\n     * Initialize the game with a specific mod/data set\r\n     * @param {string} modId - The mod to load (e.g., 'base-game', 'fantasy-mod')\r\n     * @param {Object} options - Additional initialization options\r\n     */ async initialize(modId) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            console.log(\"Initializing game engine with mod: \".concat(modId));\n            // Load mod data\n            this.currentMod = await this._loadMod(modId);\n            this.gameData = this.currentMod.data;\n            // Initialize game systems with mod data\n            await this._initializeGameSystems();\n            // Set up cross-system references\n            this._setupSystemReferences();\n            // Set up event listeners\n            this._setupEventListeners();\n            // Load saved state if requested\n            if (options.loadSavedState !== false) {\n                this.stateManager.loadGameState(this.skillManager, this.inventoryManager, this.traitManager);\n            }\n            // Start auto-save\n            this._startAutoSave();\n            this.isRunning = true;\n            console.log('Game engine initialized successfully');\n            // Emit initialization complete event\n            this.eventSystem.emit('engine:initialized', {\n                modId,\n                gameData: this.gameData\n            });\n        } catch (error) {\n            console.error('Failed to initialize game engine:', error);\n            throw error;\n        }\n    }\n    /**\r\n     * Start the game\r\n     */ start() {\n        if (!this.isRunning) {\n            throw new Error('Game engine must be initialized before starting');\n        }\n        console.log('Starting game engine');\n        this.eventSystem.emit('engine:started');\n    }\n    /**\r\n     * Pause the game\r\n     */ pause() {\n        console.log('Pausing game engine');\n        this.eventSystem.emit('engine:paused');\n    }\n    /**\r\n     * Resume the game\r\n     */ resume() {\n        console.log('Resuming game engine');\n        this.eventSystem.emit('engine:resumed');\n    }\n    /**\r\n     * Stop the game and clean up\r\n     */ stop() {\n        console.log('Stopping game engine');\n        // Stop auto-save\n        this._stopAutoSave();\n        // Save final state\n        this.stateManager.save();\n        // Clean up event listeners\n        this._cleanupEventListeners();\n        this.isRunning = false;\n        this.eventSystem.emit('engine:stopped');\n    }\n    /**\r\n     * Switch to a different mod/game\r\n     * @param {string} modId - The new mod to load\r\n     */ async switchMod(modId) {\n        console.log(\"Switching to mod: \".concat(modId));\n        // Stop current game\n        this.stop();\n        // Initialize with new mod\n        await this.initialize(modId);\n        // Start new game\n        this.start();\n    }\n    /**\r\n     * Get a system by name\r\n     * @param {string} systemName - The name of the system to get\r\n     * @returns {Object} The system instance\r\n     */ getSystem(systemName) {\n        const systems = {\n            events: this.eventSystem,\n            state: this.stateManager,\n            config: this.configManager,\n            assets: this.assetLoader,\n            mods: this.modManager,\n            skills: this.skillManager,\n            inventory: this.inventoryManager,\n            traits: this.traitManager,\n            actions: this.actionManager,\n            species: this.speciesSystem,\n            locations: this.locationSystem,\n            achievements: this.achievementSystem,\n            encyclopedia: this.encyclopediaSystem,\n            ui: this.uiManager\n        };\n        return systems[systemName] || null;\n    }\n    /**\r\n     * Get current game data\r\n     * @returns {Object} Current game data\r\n     */ getGameData() {\n        return this.gameData;\n    }\n    /**\r\n     * Get current mod information\r\n     * @returns {Object} Current mod data\r\n     */ getCurrentMod() {\n        return this.currentMod;\n    }\n    // Private methods\n    _initializeCoreSystems() {\n        // Initialize core systems\n        this.stateManager = new _GameStateManager_js__WEBPACK_IMPORTED_MODULE_0__.GameStateManager();\n        this.eventSystem = new _EventSystem_js__WEBPACK_IMPORTED_MODULE_1__.EventSystem();\n        this.assetLoader = new _AssetLoader_js__WEBPACK_IMPORTED_MODULE_2__.AssetLoader(this.config.assetCacheSize);\n        this.localization = new _utils_Localization_js__WEBPACK_IMPORTED_MODULE_4__.Localization(this.config.defaultLanguage);\n        this.configManager = new _ConfigManager_js__WEBPACK_IMPORTED_MODULE_3__.ConfigManager();\n        // Set up event listeners\n        this._setupEventListeners();\n    }\n    /**\r\n     * Initialize game systems\r\n     */ async _initializeGameSystems() {\n        console.log('Initializing game systems...');\n        // Load system modules first\n        await this._loadSystemModules();\n        // Initialize mod manager after modules are loaded\n        this.modManager = new ModManager(this.eventSystem, this.assetLoader);\n        await this.modManager.initialize();\n        // Get mod data\n        const modData = this.modManager.getAllModData();\n        // Initialize systems with mod data (only create the ones that need special initialization)\n        this.locationSystem = new LocationSystem(modData.locations || {}, this.stateManager, this.eventSystem);\n        this.achievementSystem = new AchievementSystem(modData.achievements || {}, this.stateManager, this.eventSystem);\n        this.encyclopediaSystem = new EncyclopediaSystem(modData, this.eventSystem);\n        // Initialize systems (only call initialize if the method exists)\n        if (this.skillManager.initialize) await this.skillManager.initialize();\n        if (this.inventoryManager.initialize) await this.inventoryManager.initialize();\n        if (this.traitManager.initialize) await this.traitManager.initialize();\n        if (this.actionManager.initialize) await this.actionManager.initialize();\n        if (this.locationSystem.initialize) await this.locationSystem.initialize();\n        if (this.achievementSystem.initialize) await this.achievementSystem.initialize();\n        if (this.encyclopediaSystem.initialize) await this.encyclopediaSystem.initialize();\n        if (this.uiManager.initialize) await this.uiManager.initialize();\n        // Load configurations from mod data\n        this.skillManager.loadFromConfig(modData.skills || {}, modData.config || {});\n        this.inventoryManager.loadFromConfig(modData.items || {});\n        this.traitManager.loadFromConfig(modData.traits || {});\n        this.actionManager.loadFromConfig(modData.actions || {});\n        // Set up cross-system references\n        this._setupSystemReferences();\n        console.log('Game systems initialized');\n    }\n    /**\r\n     * Load all required system modules dynamically\r\n     */ async _loadSystemModules() {\n        // In Next.js environment, modules are imported directly\n        // No need for dynamic loading since we're using ES modules\n        console.log('System modules loaded via ES imports');\n        try {\n            // Import all system modules\n            const { SkillManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_SkillManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/SkillManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/SkillManager.js\"));\n            const { InventoryManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_InventoryManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/InventoryManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/InventoryManager.js\"));\n            const { TraitManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_TraitManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/TraitManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/TraitManager.js\"));\n            const { ActionAvailabilityEngine } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_ActionAvailabilityEngine_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/ActionAvailabilityEngine.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/ActionAvailabilityEngine.js\"));\n            const { ActionManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_ActionManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/ActionManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/ActionManager.js\"));\n            const { SpeciesSystem } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_SpeciesSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/SpeciesSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/SpeciesSystem.js\"));\n            const { LocationSystem: LocationSystem1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_LocationSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/LocationSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/LocationSystem.js\"));\n            const { AchievementSystem: AchievementSystem1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_AchievementSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/AchievementSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/AchievementSystem.js\"));\n            const { EncyclopediaSystem: EncyclopediaSystem1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_EncyclopediaSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/EncyclopediaSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/EncyclopediaSystem.js\"));\n            const { UIManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_ui_UIManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../ui/UIManager.js */ \"(app-pages-browser)/./src/lib/game-engine/ui/UIManager.js\"));\n            const { EncyclopediaUI } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_ui_EncyclopediaUI_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../ui/EncyclopediaUI.js */ \"(app-pages-browser)/./src/lib/game-engine/ui/EncyclopediaUI.js\"));\n            const { FoodCategoryUI } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_ui_FoodCategoryUI_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../ui/FoodCategoryUI.js */ \"(app-pages-browser)/./src/lib/game-engine/ui/FoodCategoryUI.js\"));\n            const { ModManager: ModManager1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_core_ModManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./ModManager.js */ \"(app-pages-browser)/./src/lib/game-engine/core/ModManager.js\"));\n            // Initialize managers with imported classes\n            this.skillManager = new SkillManager();\n            this.inventoryManager = new InventoryManager();\n            this.traitManager = new TraitManager();\n            this.actionAvailabilityEngine = new ActionAvailabilityEngine();\n            this.actionManager = new ActionManager();\n            this.speciesSystem = new SpeciesSystem();\n            this.locationSystem = new LocationSystem1();\n            this.achievementSystem = new AchievementSystem1();\n            this.encyclopediaSystem = new EncyclopediaSystem1();\n            this.uiManager = new UIManager();\n            this.encyclopediaUI = new EncyclopediaUI();\n            this.foodCategoryUI = new FoodCategoryUI();\n            this.modManager = new ModManager1();\n            console.log('Successfully loaded all system modules');\n        } catch (error) {\n            console.error('Failed to load system modules:', error);\n            throw error;\n        }\n    }\n    /**\r\n     * Set up cross-system references\r\n     */ _setupSystemReferences() {\n        // Set up cross-system references\n        if (this.actionManager && this.locationSystem) {\n            this.actionManager.setLocationSystem(this.locationSystem);\n        }\n        if (this.skillManager && this.inventoryManager) {\n            this.skillManager.setInventorySystem(this.inventoryManager);\n        }\n        if (this.actionManager && this.skillManager) {\n            this.actionManager.setSkillSystem(this.skillManager);\n        }\n        if (this.actionManager && this.inventoryManager) {\n            this.actionManager.setInventorySystem(this.inventoryManager);\n        }\n        // Set up quest and NPC system references (placeholder for future systems)\n        if (this.actionManager) {\n        // TODO: Add actual quest and NPC systems when implemented\n        // this.actionManager.setQuestSystem(this.questSystem);\n        // this.actionManager.setNPCSystem(this.npcSystem);\n        }\n        if (this.achievementSystem && this.skillManager) {\n            this.achievementSystem.setSkillSystem(this.skillManager);\n        }\n        if (this.achievementSystem && this.inventoryManager) {\n            this.achievementSystem.setInventorySystem(this.inventoryManager);\n        }\n        // Set up manager references\n        if (this.skillManager && this.configManager) {\n            this.skillManager.setConfigManager(this.configManager);\n        }\n        if (this.skillManager && this.uiManager) {\n            this.skillManager.setUIManager(this.uiManager);\n        }\n        if (this.skillManager && this.eventSystem) {\n            this.skillManager.setEventSystem(this.eventSystem);\n        }\n        if (this.actionManager && this.configManager) {\n            this.actionManager.setConfigManager(this.configManager);\n        }\n        if (this.actionManager && this.uiManager) {\n            this.actionManager.setUIManager(this.uiManager);\n        }\n        if (this.inventoryManager && this.configManager) {\n            this.inventoryManager.setConfigManager(this.configManager);\n        }\n        if (this.inventoryManager && this.uiManager) {\n            this.inventoryManager.setUIManager(this.uiManager);\n        }\n        if (this.inventoryManager && this.eventSystem) {\n            this.inventoryManager.setEventSystem(this.eventSystem);\n        }\n        if (this.traitManager && this.configManager) {\n            this.traitManager.setConfigManager(this.configManager);\n        }\n        if (this.traitManager && this.uiManager) {\n            this.traitManager.setUIManager(this.uiManager);\n        }\n    }\n    async _loadMod(modId) {\n        // For now, just return the base game data\n        // In the future, this could load different mods\n        return {\n            id: modId,\n            manifest: {\n                name: 'Base Game',\n                version: '1.0.0'\n            },\n            data: {}\n        };\n    }\n    async _loadItemsData() {\n        try {\n            const response = await fetch('data/items.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load items data:', error);\n            return {};\n        }\n    }\n    async _loadSpeciesData() {\n        try {\n            const response = await fetch('data/species.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load species data:', error);\n            return {};\n        }\n    }\n    async _loadLocationsData() {\n        try {\n            const response = await fetch('data/locations.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load locations data:', error);\n            return {};\n        }\n    }\n    async _loadAchievementsData() {\n        try {\n            const response = await fetch('data/achievements.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load achievements data:', error);\n            return {};\n        }\n    }\n    _setupEventListeners() {\n        // Set up global event listeners\n        this.eventSystem.on('state:changed', ()=>{\n            this.stateManager.save();\n        });\n        this.eventSystem.on('error', (error)=>{\n            console.error('Game engine error:', error);\n        });\n        // Set up location change events\n        this.eventSystem.on('location:changed', (data)=>{\n            console.log('Location changed:', data);\n            // Emit event for UI updates\n            this.eventSystem.emit('ui:locationChanged', data);\n        });\n    }\n    _cleanupEventListeners() {\n        // Clean up event listeners\n        this.eventSystem.removeAllListeners();\n    }\n    _startAutoSave() {\n        this.autoSaveInterval = setInterval(()=>{\n            this.stateManager.save();\n        }, this.config.autoSaveInterval);\n    }\n    _stopAutoSave() {\n        if (this.autoSaveInterval) {\n            clearInterval(this.autoSaveInterval);\n            this.autoSaveInterval = null;\n        }\n    }\n    constructor(config = {}){\n        this.config = {\n            autoSaveInterval: 120000,\n            defaultLanguage: 'en',\n            assetCacheSize: 100,\n            ...config\n        };\n        // Core systems\n        this.stateManager = null;\n        this.eventSystem = null;\n        this.assetLoader = null;\n        this.localization = null;\n        this.configManager = null;\n        // Game systems\n        this.skillManager = null;\n        this.inventoryManager = null;\n        this.speciesSystem = null;\n        this.actionManager = null;\n        this.achievementSystem = null;\n        this.locationSystem = null;\n        this.encyclopediaSystem = null;\n        this.traitManager = null;\n        this.uiManager = null;\n        // Game state\n        this.isRunning = false;\n        this.currentMod = null;\n        this.gameData = null;\n        // Initialize core systems\n        this._initializeCoreSystems();\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = GameEngine;\n}\nif (true) window.GameEngine = GameEngine;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/core/GameEngine.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/core/GameStateManager.js":
/*!******************************************************!*\
  !*** ./src/lib/game-engine/core/GameStateManager.js ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameStateManager: () => (/* binding */ GameStateManager)\n/* harmony export */ });\nclass GameStateManager {\n    saveGameState(skillManager, inventoryManager, traitManager) {\n        try {\n            const gameState = {\n                skills: {},\n                inventory: {},\n                traits: {},\n                lastSaved: new Date().toISOString()\n            };\n            // Save skills\n            const skills = skillManager.getAllSkills();\n            for (const skill of skills){\n                gameState.skills[skill.name] = {\n                    level: skill.level,\n                    experience: skill.xp\n                };\n            }\n            // Save inventory\n            const items = inventoryManager.getAllItems();\n            for (const item of items){\n                gameState.inventory[item.gameObject.id] = {\n                    quantity: item.quantity\n                };\n            }\n            // Save traits\n            const traits = traitManager.getAllTraits();\n            for (const trait of traits){\n                gameState.traits[trait.name] = {\n                    level: trait.level,\n                    experience: trait.xp\n                };\n            }\n            // Save achievements if achievementSystem exists\n            if (window.achievementSystem) {\n                gameState.achievements = {\n                    unlocked: Array.from(window.achievementSystem.getUnlockedAchievements()),\n                    progress: window.achievementSystem.getAchievementProgress()\n                };\n            }\n            localStorage.setItem('tavernsGameState', JSON.stringify(gameState));\n            console.log('Game state saved successfully');\n            return true;\n        } catch (error) {\n            console.error('Failed to save game state:', error);\n            return false;\n        }\n    }\n    loadGameState(skillManager, inventoryManager, traitManager) {\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            if (!savedState) {\n                console.log('No saved game state found');\n                return false;\n            }\n            const gameState = JSON.parse(savedState);\n            console.log('Loading saved game state:', gameState);\n            // Load skills\n            if (gameState.skills) {\n                for (const [skillName, skillData] of Object.entries(gameState.skills)){\n                    const skill = skillManager.getSkill(skillName);\n                    if (skill) {\n                        skill.level = skillData.level || 1;\n                        skill.xp = skillData.experience || 0;\n                        skill.xpToNext = skill.getXpToNextLevel(skill.level);\n                    }\n                }\n            }\n            // Load inventory\n            if (gameState.inventory) {\n                for (const [itemId, itemData] of Object.entries(gameState.inventory)){\n                    inventoryManager.addItem(itemId, itemData.quantity || 1);\n                }\n            }\n            // Load traits\n            if (gameState.traits) {\n                for (const [traitName, traitData] of Object.entries(gameState.traits)){\n                    const trait = traitManager.getTrait(traitName);\n                    if (trait) {\n                        trait.level = traitData.level || 1;\n                        trait.xp = traitData.experience || 0;\n                        trait.xpToNext = trait.getXpToNextLevel(trait.level);\n                    }\n                }\n            }\n            // Load achievements if achievementSystem exists\n            if (gameState.achievements && window.achievementSystem) {\n                const achievementState = gameState.achievements;\n                if (achievementState.unlocked) {\n                    window.achievementSystem.unlockedAchievements = new Set(achievementState.unlocked);\n                }\n                if (achievementState.progress) {\n                    window.achievementSystem.achievementProgress = achievementState.progress;\n                }\n            }\n            console.log('Game state loaded successfully');\n            return true;\n        } catch (error) {\n            console.error('Failed to load game state:', error);\n            return false;\n        }\n    }\n    setupAutoSave(skillManager, inventoryManager, traitManager, uiManager) {\n        if (this.autoSaveInterval) {\n            clearInterval(this.autoSaveInterval);\n        }\n        this.autoSaveInterval = setInterval(()=>{\n            const success = this.saveGameState(skillManager, inventoryManager, traitManager);\n            if (success) {\n                uiManager.updateLastSavedTime();\n            }\n        }, this.autoSaveIntervalMinutes * 60 * 1000);\n        console.log(\"Auto-save enabled (every \".concat(this.autoSaveIntervalMinutes, \" minutes)\"));\n    }\n    stopAutoSave() {\n        if (this.autoSaveInterval) {\n            clearInterval(this.autoSaveInterval);\n            this.autoSaveInterval = null;\n            console.log('Auto-save disabled');\n        }\n    }\n    clearGameState() {\n        try {\n            localStorage.removeItem('tavernsGameState');\n            console.log('Game state cleared');\n            return true;\n        } catch (error) {\n            console.error('Failed to clear game state:', error);\n            return false;\n        }\n    }\n    getLastSavedTime() {\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            if (savedState) {\n                const gameState = JSON.parse(savedState);\n                return gameState.lastSaved ? new Date(gameState.lastSaved) : null;\n            }\n            return null;\n        } catch (error) {\n            console.error('Failed to get last saved time:', error);\n            return null;\n        }\n    }\n    exportGameState() {\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            if (savedState) {\n                const gameState = JSON.parse(savedState);\n                const dataStr = JSON.stringify(gameState, null, 2);\n                const dataBlob = new Blob([\n                    dataStr\n                ], {\n                    type: 'application/json'\n                });\n                const link = document.createElement('a');\n                link.href = URL.createObjectURL(dataBlob);\n                link.download = \"taverns-save-\".concat(new Date().toISOString().split('T')[0], \".json\");\n                link.click();\n                console.log('Game state exported successfully');\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error('Failed to export game state:', error);\n            return false;\n        }\n    }\n    importGameState(gameStateData) {\n        try {\n            const gameState = typeof gameStateData === 'string' ? JSON.parse(gameStateData) : gameStateData;\n            // Validate the game state structure\n            if (!gameState || typeof gameState !== 'object') {\n                throw new Error('Invalid game state format');\n            }\n            localStorage.setItem('tavernsGameState', JSON.stringify(gameState));\n            console.log('Game state imported successfully');\n            return true;\n        } catch (error) {\n            console.error('Failed to import game state:', error);\n            return false;\n        }\n    }\n    /**\r\n     * Get a specific state value by key\r\n     * @param {string} key - The state key to retrieve\r\n     * @returns {*} The state value or null if not found\r\n     */ getState(key) {\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            if (savedState) {\n                const gameState = JSON.parse(savedState);\n                return gameState[key] || null;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Failed to get state for key '\".concat(key, \"':\"), error);\n            return null;\n        }\n    }\n    /**\r\n     * Set a specific state value by key\r\n     * @param {string} key - The state key to set\r\n     * @param {*} value - The value to store\r\n     * @returns {boolean} Success status\r\n     */ setState(key, value) {\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            let gameState = savedState ? JSON.parse(savedState) : {};\n            gameState[key] = value;\n            gameState.lastSaved = new Date().toISOString();\n            localStorage.setItem('tavernsGameState', JSON.stringify(gameState));\n            return true;\n        } catch (error) {\n            console.error(\"Failed to set state for key '\".concat(key, \"':\"), error);\n            return false;\n        }\n    }\n    /**\r\n     * Save the current state (alias for saveGameState for compatibility)\r\n     */ save() {\n        // This is a simplified save that just updates the timestamp\n        // Full save should be done through saveGameState with managers\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            if (savedState) {\n                const gameState = JSON.parse(savedState);\n                gameState.lastSaved = new Date().toISOString();\n                localStorage.setItem('tavernsGameState', JSON.stringify(gameState));\n            }\n            return true;\n        } catch (error) {\n            console.error('Failed to save state:', error);\n            return false;\n        }\n    }\n    /**\r\n     * Check if there's a saved state\r\n     * @returns {boolean} True if saved state exists\r\n     */ hasSavedState() {\n        try {\n            const savedState = localStorage.getItem('tavernsGameState');\n            return savedState !== null;\n        } catch (error) {\n            console.error('Failed to check saved state:', error);\n            return false;\n        }\n    }\n    constructor(){\n        this.autoSaveInterval = null;\n        this.autoSaveIntervalMinutes = 2;\n    }\n}\nif (true) window.GameStateManager = GameStateManager;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/core/GameStateManager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/utils/Localization.js":
/*!***************************************************!*\
  !*** ./src/lib/game-engine/utils/Localization.js ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Localization: () => (/* binding */ Localization)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Localization System\r\n * \r\n * Handles multiple languages and provides fallback mechanisms\r\n * for missing translations.\r\n */ class Localization {\n    /**\r\n     * Set the current language\r\n     * @param {string} language - Language code (e.g., 'en', 'es', 'fr')\r\n     */ setLanguage(language) {\n        this.currentLanguage = language;\n        this.emit('language:changed', {\n            language\n        });\n    }\n    /**\r\n     * Get the current language\r\n     * @returns {string} Current language code\r\n     */ getLanguage() {\n        return this.currentLanguage;\n    }\n    /**\r\n     * Get the default language\r\n     * @returns {string} Default language code\r\n     */ getDefaultLanguage() {\n        return this.defaultLanguage;\n    }\n    /**\r\n     * Load translations for a language\r\n     * @param {string} language - Language code\r\n     * @param {Object} translations - Translation data\r\n     */ loadTranslations(language, translations) {\n        this.translations.set(language, translations);\n        this.loadedLanguages.add(language);\n        this.emit('translations:loaded', {\n            language,\n            count: Object.keys(translations).length\n        });\n    }\n    /**\r\n     * Load translations from a file\r\n     * @param {string} language - Language code\r\n     * @param {string} path - Path to translation file\r\n     */ async loadTranslationsFromFile(language, path) {\n        try {\n            const response = await fetch(path);\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const translations = await response.json();\n            this.loadTranslations(language, translations);\n            return true;\n        } catch (error) {\n            console.error(\"Failed to load translations for \".concat(language, \":\"), error);\n            this.emit('translations:loadError', {\n                language,\n                error\n            });\n            return false;\n        }\n    }\n    /**\r\n     * Get a translated string\r\n     * @param {string} key - Translation key\r\n     * @param {Object} params - Parameters for interpolation\r\n     * @param {string} language - Optional language override\r\n     * @returns {string} Translated string\r\n     */ get(key) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, language = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        const targetLanguage = language || this.currentLanguage;\n        // Try to get translation from target language\n        let translation = this._getTranslation(key, targetLanguage);\n        // If not found, try fallback chain\n        if (!translation) {\n            for (const fallbackLang of this.fallbackChain){\n                if (fallbackLang !== targetLanguage) {\n                    translation = this._getTranslation(key, fallbackLang);\n                    if (translation) break;\n                }\n            }\n        }\n        // If still not found, return the key\n        if (!translation) {\n            console.warn(\"Translation key not found: \".concat(key, \" for language: \").concat(targetLanguage));\n            return key;\n        }\n        // Interpolate parameters\n        return this._interpolate(translation, params);\n    }\n    /**\r\n     * Get a translated string with pluralization\r\n     * @param {string} key - Translation key\r\n     * @param {number} count - Count for pluralization\r\n     * @param {Object} params - Parameters for interpolation\r\n     * @param {string} language - Optional language override\r\n     * @returns {string} Translated string\r\n     */ getPlural(key, count) {\n        let params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, language = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n        const targetLanguage = language || this.currentLanguage;\n        const pluralForm = this._getPluralForm(count, targetLanguage);\n        // Try to get pluralized key\n        const pluralKey = \"\".concat(key, \"_\").concat(pluralForm);\n        let translation = this.get(pluralKey, {\n            ...params,\n            count\n        }, language);\n        // If plural key not found, try the base key\n        if (translation === pluralKey) {\n            translation = this.get(key, {\n                ...params,\n                count\n            }, language);\n        }\n        return translation;\n    }\n    /**\r\n     * Check if a translation key exists\r\n     * @param {string} key - Translation key\r\n     * @param {string} language - Optional language override\r\n     * @returns {boolean} Whether the key exists\r\n     */ has(key) {\n        let language = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        const targetLanguage = language || this.currentLanguage;\n        // Check target language\n        if (this._getTranslation(key, targetLanguage)) {\n            return true;\n        }\n        // Check fallback chain\n        for (const fallbackLang of this.fallbackChain){\n            if (fallbackLang !== targetLanguage && this._getTranslation(key, fallbackLang)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\r\n     * Get all loaded languages\r\n     * @returns {Array} Array of loaded language codes\r\n     */ getLoadedLanguages() {\n        return Array.from(this.loadedLanguages);\n    }\n    /**\r\n     * Get translation statistics\r\n     * @param {string} language - Optional language filter\r\n     * @returns {Object} Translation statistics\r\n     */ getStats() {\n        let language = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        if (language) {\n            const translations = this.translations.get(language);\n            return {\n                language,\n                keyCount: translations ? Object.keys(translations).length : 0,\n                loaded: this.loadedLanguages.has(language)\n            };\n        }\n        const stats = {};\n        for (const lang of this.loadedLanguages){\n            stats[lang] = this.getStats(lang);\n        }\n        return {\n            currentLanguage: this.currentLanguage,\n            defaultLanguage: this.defaultLanguage,\n            loadedLanguages: this.getLoadedLanguages(),\n            languages: stats\n        };\n    }\n    /**\r\n     * Add a fallback language\r\n     * @param {string} language - Language code to add to fallback chain\r\n     */ addFallbackLanguage(language) {\n        if (!this.fallbackChain.includes(language)) {\n            this.fallbackChain.push(language);\n        }\n    }\n    /**\r\n     * Remove a fallback language\r\n     * @param {string} language - Language code to remove from fallback chain\r\n     */ removeFallbackLanguage(language) {\n        const index = this.fallbackChain.indexOf(language);\n        if (index > -1) {\n            this.fallbackChain.splice(index, 1);\n        }\n    }\n    /**\r\n     * Get the fallback chain\r\n     * @returns {Array} Array of fallback languages\r\n     */ getFallbackChain() {\n        return [\n            ...this.fallbackChain\n        ];\n    }\n    /**\r\n     * Clear all translations\r\n     */ clear() {\n        this.translations.clear();\n        this.loadedLanguages.clear();\n        this.emit('translations:cleared', {});\n    }\n    /**\r\n     * Subscribe to localization events\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Callback function\r\n     */ on(event, callback) {\n        if (!this.listeners) {\n            this.listeners = new Map();\n        }\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(callback);\n    }\n    /**\r\n     * Unsubscribe from localization events\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Callback function\r\n     */ off(event, callback) {\n        if (this.listeners && this.listeners.has(event)) {\n            const callbacks = this.listeners.get(event);\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n    }\n    /**\r\n     * Emit an event to all listeners\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     */ emit(event, data) {\n        if (this.listeners && this.listeners.has(event)) {\n            this.listeners.get(event).forEach((callback)=>{\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(\"Error in localization event listener for \".concat(event, \":\"), error);\n                }\n            });\n        }\n    }\n    // Private methods\n    /**\r\n     * Get translation from a specific language\r\n     * @param {string} key - Translation key\r\n     * @param {string} language - Language code\r\n     * @returns {string|null} Translation or null if not found\r\n     */ _getTranslation(key, language) {\n        const translations = this.translations.get(language);\n        if (!translations) return null;\n        // Support nested keys with dot notation\n        const keys = key.split('.');\n        let current = translations;\n        for (const k of keys){\n            if (current && typeof current === 'object' && k in current) {\n                current = current[k];\n            } else {\n                return null;\n            }\n        }\n        return typeof current === 'string' ? current : null;\n    }\n    /**\r\n     * Interpolate parameters into a translation string\r\n     * @param {string} text - Text with placeholders\r\n     * @param {Object} params - Parameters to interpolate\r\n     * @returns {string} Interpolated text\r\n     */ _interpolate(text, params) {\n        return text.replace(/\\{(\\w+)\\}/g, (match, key)=>{\n            return params[key] !== undefined ? params[key] : match;\n        });\n    }\n    /**\r\n     * Get plural form for a count\r\n     * @param {number} count - Count\r\n     * @param {string} language - Language code\r\n     * @returns {string} Plural form\r\n     */ _getPluralForm(count, language) {\n        const rule = this.pluralRules.get(language);\n        if (!rule) return 'other';\n        return rule(count);\n    }\n    /**\r\n     * Initialize plural rules for common languages\r\n     */ _initializePluralRules() {\n        // English: 1 = one, other = other\n        this.pluralRules.set('en', (count)=>{\n            return count === 1 ? 'one' : 'other';\n        });\n        // Spanish: 1 = one, other = other\n        this.pluralRules.set('es', (count)=>{\n            return count === 1 ? 'one' : 'other';\n        });\n        // French: 0,1 = one, other = other\n        this.pluralRules.set('fr', (count)=>{\n            return count === 0 || count === 1 ? 'one' : 'other';\n        });\n        // German: 1 = one, other = other\n        this.pluralRules.set('de', (count)=>{\n            return count === 1 ? 'one' : 'other';\n        });\n        // Russian: 1 = one, 2-4 = few, 0,5-20 = other, other = other\n        this.pluralRules.set('ru', (count)=>{\n            const mod10 = count % 10;\n            const mod100 = count % 100;\n            if (mod10 === 1 && mod100 !== 11) return 'one';\n            if ([\n                2,\n                3,\n                4\n            ].includes(mod10) && ![\n                12,\n                13,\n                14\n            ].includes(mod100)) return 'few';\n            if (mod10 === 0 || [\n                5,\n                6,\n                7,\n                8,\n                9\n            ].includes(mod10) || [\n                11,\n                12,\n                13,\n                14\n            ].includes(mod100)) return 'other';\n            return 'other';\n        });\n    }\n    constructor(defaultLanguage = 'en'){\n        this.defaultLanguage = defaultLanguage;\n        this.currentLanguage = defaultLanguage;\n        this.translations = new Map();\n        this.loadedLanguages = new Set();\n        this.fallbackChain = [\n            'en',\n            'en-US',\n            'en-GB'\n        ];\n        this.pluralRules = new Map();\n        // Initialize plural rules for common languages\n        this._initializePluralRules();\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = Localization;\n}\nif (true) window.Localization = Localization;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/utils/Localization.js\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CGitHub%5C%5CSelf%5C%5Ctaverns%5C%5Csrc%5C%5Ccomponents%5C%5Cgame%5C%5CGameInterface.tsx%22%2C%22ids%22%3A%5B%22GameInterface%22%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);