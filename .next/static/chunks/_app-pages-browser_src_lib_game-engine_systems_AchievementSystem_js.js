"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_systems_AchievementSystem_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/systems/AchievementSystem.js":
/*!**********************************************************!*\
  !*** ./src/lib/game-engine/systems/AchievementSystem.js ***!
  \**********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AchievementSystem: () => (/* binding */ AchievementSystem)\n/* harmony export */ });\n/**\r\n * Achievement System\r\n * \r\n * Manages achievements, tracks progress, and handles achievement unlocking.\r\n * Integrates with other systems to monitor game state and award achievements.\r\n */ class AchievementSystem {\n    /**\r\n     * Initialize the achievement system\r\n     */ async initialize() {\n        console.log('Initializing Achievement System');\n        // Load saved achievement state\n        this._loadAchievementState();\n        // Set up event listeners for achievement tracking\n        this._setupEventListeners();\n        // Check for any achievements that should already be unlocked\n        this._checkInitialAchievements();\n        console.log('Achievement System initialized');\n    }\n    /**\r\n     * Get all achievements data\r\n     * @returns {Object} All achievements configuration\r\n     */ getAllAchievements() {\n        return this.achievementsData;\n    }\n    /**\r\n     * Get unlocked achievements\r\n     * @returns {Set} Set of unlocked achievement IDs\r\n     */ getUnlockedAchievements() {\n        return this.unlockedAchievements;\n    }\n    /**\r\n     * Get achievement progress\r\n     * @returns {Object} Achievement progress data\r\n     */ getAchievementProgress() {\n        return this.achievementProgress;\n    }\n    /**\r\n     * Check if an achievement is unlocked\r\n     * @param {string} achievementId - The achievement ID to check\r\n     * @returns {boolean} True if achievement is unlocked\r\n     */ isAchievementUnlocked(achievementId) {\n        return this.unlockedAchievements.has(achievementId);\n    }\n    /**\r\n     * Get total achievement points earned\r\n     * @returns {number} Total points from unlocked achievements\r\n     */ getTotalPoints() {\n        let total = 0;\n        for (const achievementId of this.unlockedAchievements){\n            const achievement = this.achievementsData[achievementId];\n            if (achievement) {\n                total += achievement.points || 0;\n            }\n        }\n        return total;\n    }\n    /**\r\n     * Check and unlock achievements based on current game state\r\n     * This is the main method that will be called to evaluate achievements\r\n     */ checkAchievements() {\n        const gameState = this.stateManager.getState();\n        for (const [achievementId, achievement] of Object.entries(this.achievementsData)){\n            if (this.unlockedAchievements.has(achievementId)) {\n                continue; // Already unlocked\n            }\n            if (this._evaluateAchievement(achievement, gameState)) {\n                this._unlockAchievement(achievementId);\n            }\n        }\n    }\n    /**\r\n     * Force unlock an achievement (for testing or special cases)\r\n     * @param {string} achievementId - The achievement ID to unlock\r\n     */ forceUnlockAchievement(achievementId) {\n        if (!this.achievementsData[achievementId]) {\n            console.warn(\"Attempted to unlock non-existent achievement: \".concat(achievementId));\n            return;\n        }\n        this._unlockAchievement(achievementId);\n    }\n    /**\r\n     * Reset all achievements (for testing or new game)\r\n     */ resetAchievements() {\n        this.unlockedAchievements.clear();\n        this.achievementProgress = {};\n        this._initializeProgress();\n        this._saveAchievementState();\n        this.eventSystem.emit('achievements:reset');\n    }\n    /**\r\n     * Set the skill manager reference\r\n     * @param {SkillManager} skillManager - The skill manager instance\r\n     */ setSkillSystem(skillManager) {\n        this.skillManager = skillManager;\n    }\n    /**\r\n     * Set the inventory manager reference\r\n     * @param {InventoryManager} inventoryManager - The inventory manager instance\r\n     */ setInventorySystem(inventoryManager) {\n        this.inventoryManager = inventoryManager;\n    }\n    // Private methods\n    _initializeProgress() {\n        // Initialize progress tracking for each achievement\n        for (const achievementId of Object.keys(this.achievementsData)){\n            this.achievementProgress[achievementId] = {\n                current: 0,\n                required: this._getRequiredValue(this.achievementsData[achievementId]),\n                completed: false\n            };\n        }\n    }\n    _loadAchievementState() {\n        try {\n            const savedState = this.stateManager.getState().achievements;\n            if (savedState) {\n                this.unlockedAchievements = new Set(savedState.unlocked || []);\n                this.achievementProgress = savedState.progress || this.achievementProgress;\n            }\n        } catch (error) {\n            console.warn('Failed to load achievement state:', error);\n        }\n    }\n    _saveAchievementState() {\n        try {\n            const currentState = this.stateManager.getState();\n            currentState.achievements = {\n                unlocked: Array.from(this.unlockedAchievements),\n                progress: this.achievementProgress\n            };\n            this.stateManager.setState(currentState);\n        } catch (error) {\n            console.error('Failed to save achievement state:', error);\n        }\n    }\n    _setupEventListeners() {\n        // Listen for skill level ups\n        this.eventSystem.on('skill:levelUp', (data)=>{\n            this._updateSkillLevelProgress(data.skillName, data.newLevel);\n            this.checkAchievements();\n        });\n        // Listen for inventory changes\n        this.eventSystem.on('inventory:itemAdded', (data)=>{\n            this._updateInventoryProgress(data.itemId);\n            this.checkAchievements();\n        });\n        // Listen for trading events\n        this.eventSystem.on('trade:completed', (data)=>{\n            this._updateTradingProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for consumption events\n        this.eventSystem.on('item:consumed', (data)=>{\n            this._updateConsumptionProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for crafting events\n        this.eventSystem.on('craft:completed', (data)=>{\n            this._updateCraftingProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for location visits\n        this.eventSystem.on('location:visited', (data)=>{\n            this._updateLocationProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for pet capture events\n        this.eventSystem.on('pet:captured', (data)=>{\n            this._updatePetProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for cooking events\n        this.eventSystem.on('cooking:completed', (data)=>{\n            this._updateCookingProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for game state changes that might affect achievements\n        this.eventSystem.on('state:changed', ()=>{\n            this.checkAchievements();\n        });\n    }\n    _checkInitialAchievements() {\n        // Check for achievements that should be unlocked based on current state\n        this.checkAchievements();\n    }\n    _evaluateAchievement(achievement, gameState) {\n        const requirements = achievement.requirements;\n        if (!requirements) {\n            return false;\n        }\n        // Check skill level requirements\n        if (requirements.skillLevel) {\n            for (const [skillName, requiredLevel] of Object.entries(requirements.skillLevel)){\n                var _gameState_skills;\n                const skill = (_gameState_skills = gameState.skills) === null || _gameState_skills === void 0 ? void 0 : _gameState_skills[skillName];\n                if (!skill || skill.level < requiredLevel) {\n                    return false;\n                }\n            }\n        }\n        // Check any skill level requirement\n        if (requirements.anySkillLevel) {\n            const requiredLevel = requirements.anySkillLevel;\n            const hasAnySkillAtLevel = Object.values(gameState.skills || {}).some((skill)=>skill.level >= requiredLevel);\n            if (!hasAnySkillAtLevel) {\n                return false;\n            }\n        }\n        // Check multiple skill levels requirement\n        if (requirements.multipleSkillLevels) {\n            const { count, level } = requirements.multipleSkillLevels;\n            const skillsAtLevel = Object.values(gameState.skills || {}).filter((skill)=>skill.level >= level).length;\n            if (skillsAtLevel < count) {\n                return false;\n            }\n        }\n        // Check unique items requirement\n        if (requirements.uniqueItems) {\n            const requiredCount = requirements.uniqueItems;\n            const uniqueItemCount = Object.keys(gameState.inventory || {}).length;\n            if (uniqueItemCount < requiredCount) {\n                return false;\n            }\n        }\n        // Check custom requirements\n        if (requirements.custom) {\n            return this._evaluateCustomRequirement(requirements.custom, gameState);\n        }\n        return true;\n    }\n    _evaluateCustomRequirement(requirementType, gameState) {\n        switch(requirementType){\n            case 'secret_discovery':\n                // This is a placeholder for secret achievements\n                // In a real implementation, this would check for specific game events\n                return false;\n            case 'trade_syrup_maple_run':\n                var _gameState_tradingHistory;\n                // Check if player has traded syrup in Maple Run\n                // This would need to be tracked in game state\n                return ((_gameState_tradingHistory = gameState.tradingHistory) === null || _gameState_tradingHistory === void 0 ? void 0 : _gameState_tradingHistory.some((trade)=>trade.itemId === 'syrup' && trade.location === 'maple_run')) || false;\n            case 'consume_red_mushroom':\n                var _gameState_consumptionHistory;\n                // Check if player has consumed a red mushroom\n                return ((_gameState_consumptionHistory = gameState.consumptionHistory) === null || _gameState_consumptionHistory === void 0 ? void 0 : _gameState_consumptionHistory.some((consumption)=>consumption.itemId === 'red_mushroom')) || false;\n            case 'animate_mushroom_pet':\n                var _gameState_petHistory;\n                // Check if player has used Animation spell on mushroom and captured as pet\n                return ((_gameState_petHistory = gameState.petHistory) === null || _gameState_petHistory === void 0 ? void 0 : _gameState_petHistory.some((pet)=>pet.source === 'animated_mushroom')) || false;\n            case 'cook_moss_mossy_glade':\n                var _gameState_cookingHistory;\n                // Check if player has cooked with moss in Mossy Glade\n                return ((_gameState_cookingHistory = gameState.cookingHistory) === null || _gameState_cookingHistory === void 0 ? void 0 : _gameState_cookingHistory.some((cooking)=>{\n                    var _cooking_ingredients;\n                    return ((_cooking_ingredients = cooking.ingredients) === null || _cooking_ingredients === void 0 ? void 0 : _cooking_ingredients.includes('moss')) && cooking.location === 'mossy_glade';\n                })) || false;\n            case 'first_craft':\n                var _gameState_craftingHistory;\n                // Check if player has crafted any item\n                return ((_gameState_craftingHistory = gameState.craftingHistory) === null || _gameState_craftingHistory === void 0 ? void 0 : _gameState_craftingHistory.length) > 0 || false;\n            case 'visit_locations':\n                var _gameState_achievementRequirements;\n                // Check if player has visited enough locations\n                const visitedLocations = gameState.visitedLocations || [];\n                const requiredCount = ((_gameState_achievementRequirements = gameState.achievementRequirements) === null || _gameState_achievementRequirements === void 0 ? void 0 : _gameState_achievementRequirements.locationCount) || 5;\n                return visitedLocations.length >= requiredCount;\n            default:\n                return false;\n        }\n    }\n    _getRequiredValue(achievement) {\n        const requirements = achievement.requirements;\n        if (requirements.skillLevel) {\n            return Math.max(...Object.values(requirements.skillLevel));\n        }\n        if (requirements.anySkillLevel) {\n            return requirements.anySkillLevel;\n        }\n        if (requirements.multipleSkillLevels) {\n            return requirements.multipleSkillLevels.level;\n        }\n        if (requirements.uniqueItems) {\n            return requirements.uniqueItems;\n        }\n        return 1; // Default required value\n    }\n    _unlockAchievement(achievementId) {\n        const achievement = this.achievementsData[achievementId];\n        if (!achievement) {\n            console.warn(\"Attempted to unlock non-existent achievement: \".concat(achievementId));\n            return;\n        }\n        this.unlockedAchievements.add(achievementId);\n        if (!this.achievementProgress[achievementId]) {\n            this.achievementProgress[achievementId] = {\n                current: 0,\n                required: this._getRequiredValue(achievement),\n                completed: false\n            };\n        }\n        this.achievementProgress[achievementId].completed = true;\n        this.achievementProgress[achievementId].current = this.achievementProgress[achievementId].required;\n        // Save state\n        this._saveAchievementState();\n        // Emit achievement unlocked event\n        this.eventSystem.emit('achievement:unlocked', {\n            achievementId,\n            achievement,\n            points: achievement.points || 0,\n            totalPoints: this.getTotalPoints()\n        });\n        console.log(\"Achievement unlocked: \".concat(achievement.name, \" (\").concat(achievementId, \")\"));\n    }\n    _updateSkillLevelProgress(skillName, level) {\n        for (const [achievementId, achievement] of Object.entries(this.achievementsData)){\n            if (this.unlockedAchievements.has(achievementId)) {\n                continue;\n            }\n            const requirements = achievement.requirements;\n            if (requirements.skillLevel && requirements.skillLevel[skillName]) {\n                const requiredLevel = requirements.skillLevel[skillName];\n                if (!this.achievementProgress[achievementId]) {\n                    this.achievementProgress[achievementId] = {\n                        current: 0,\n                        required: this._getRequiredValue(achievement),\n                        completed: false\n                    };\n                }\n                this.achievementProgress[achievementId].current = Math.min(level, requiredLevel);\n            }\n            if (requirements.anySkillLevel) {\n                const requiredLevel = requirements.anySkillLevel;\n                if (!this.achievementProgress[achievementId]) {\n                    this.achievementProgress[achievementId] = {\n                        current: 0,\n                        required: this._getRequiredValue(achievement),\n                        completed: false\n                    };\n                }\n                this.achievementProgress[achievementId].current = Math.min(level, requiredLevel);\n            }\n        }\n    }\n    _updateInventoryProgress(itemId) {\n        for (const [achievementId, achievement] of Object.entries(this.achievementsData)){\n            if (this.unlockedAchievements.has(achievementId)) {\n                continue;\n            }\n            const requirements = achievement.requirements;\n            if (requirements.uniqueItems) {\n                const gameState = this.stateManager.getState();\n                const uniqueItemCount = Object.keys(gameState.inventory || {}).length;\n                if (!this.achievementProgress[achievementId]) {\n                    this.achievementProgress[achievementId] = {\n                        current: 0,\n                        required: this._getRequiredValue(achievement),\n                        completed: false\n                    };\n                }\n                this.achievementProgress[achievementId].current = Math.min(uniqueItemCount, requirements.uniqueItems);\n            }\n        }\n    }\n    _updateTradingProgress(data) {\n        // Update trading history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.tradingHistory) {\n            gameState.tradingHistory = [];\n        }\n        gameState.tradingHistory.push({\n            itemId: data.itemId,\n            location: data.location,\n            type: data.type,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateConsumptionProgress(data) {\n        // Update consumption history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.consumptionHistory) {\n            gameState.consumptionHistory = [];\n        }\n        gameState.consumptionHistory.push({\n            itemId: data.itemId,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateCraftingProgress(data) {\n        // Update crafting history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.craftingHistory) {\n            gameState.craftingHistory = [];\n        }\n        gameState.craftingHistory.push({\n            itemId: data.itemId,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateLocationProgress(data) {\n        // Update visited locations in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.visitedLocations) {\n            gameState.visitedLocations = [];\n        }\n        if (!gameState.visitedLocations.includes(data.locationId)) {\n            gameState.visitedLocations.push(data.locationId);\n        }\n        this.stateManager.setState(gameState);\n    }\n    _updatePetProgress(data) {\n        // Update pet history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.petHistory) {\n            gameState.petHistory = [];\n        }\n        gameState.petHistory.push({\n            source: data.source,\n            petType: data.petType,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateCookingProgress(data) {\n        // Update cooking history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.cookingHistory) {\n            gameState.cookingHistory = [];\n        }\n        gameState.cookingHistory.push({\n            ingredients: data.ingredients,\n            location: data.location,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    constructor(achievementsData, stateManager, eventSystem){\n        this.achievementsData = achievementsData || {};\n        this.stateManager = stateManager;\n        this.eventSystem = eventSystem;\n        // System references\n        this.skillManager = null;\n        this.inventoryManager = null;\n        // Achievement state\n        this.unlockedAchievements = new Set();\n        this.achievementProgress = {};\n        // Initialize achievement progress tracking\n        this._initializeProgress();\n    }\n}\nif (true) window.AchievementSystem = AchievementSystem;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/systems/AchievementSystem.js\n"));

/***/ })

}]);