"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_systems_EncyclopediaSystem_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/systems/EncyclopediaSystem.js":
/*!***********************************************************!*\
  !*** ./src/lib/game-engine/systems/EncyclopediaSystem.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncyclopediaSystem: () => (/* binding */ EncyclopediaSystem)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Encyclopedia System - Manages game data encyclopedia with crosslinking\r\n * Provides organized access to all game content including skills, items, species, etc.\r\n */ class EncyclopediaSystem {\n    /**\r\n   * Initialize the encyclopedia with all game data\r\n   * @param {Object} gameData - All loaded game data\r\n   */ async initialize(gameData) {\n        if (this.initialized) return;\n        try {\n            await this.loadSkillsData(gameData.skills || {});\n            await this.loadItemsData(gameData.items || {});\n            await this.loadSpeciesData(gameData.species || {});\n            await this.loadTraitsData(gameData.traits || {});\n            await this.loadLocationsData(gameData.locations || {});\n            await this.loadActionsData(gameData.actions || {});\n            this.buildCrossReferences();\n            this.buildSearchIndex();\n            this.initialized = true;\n            console.log('Encyclopedia system initialized with', this.entries.size, 'entries');\n        } catch (error) {\n            console.error('Failed to initialize encyclopedia system:', error);\n        }\n    }\n    /**\r\n   * Load skills data into encyclopedia\r\n   * @param {Object} skillsData - Skills configuration\r\n   */ async loadSkillsData(skillsData) {\n        const category = 'Skills';\n        this.categories.set(category, {\n            name: category,\n            description: 'All available skills and abilities',\n            icon: '‚öîÔ∏è',\n            entries: []\n        });\n        for (const [categoryName, categorySkills] of Object.entries(skillsData)){\n            for (const [skillName, skillData] of Object.entries(categorySkills)){\n                const entry = {\n                    id: \"skill_\".concat(skillName.toLowerCase().replace(/\\s+/g, '_')),\n                    type: 'skill',\n                    category: category,\n                    subcategory: categoryName,\n                    name: skillName,\n                    description: skillData.description || 'No description available.',\n                    data: skillData,\n                    tags: [\n                        categoryName.toLowerCase(),\n                        'skill'\n                    ],\n                    crossReferences: []\n                };\n                // Add requirements as cross-references\n                if (skillData.requires) {\n                    entry.requirements = skillData.requires;\n                    entry.crossReferences.push({\n                        type: 'requirement',\n                        target: \"skill_\".concat(skillData.requires.skill.toLowerCase().replace(/\\s+/g, '_')),\n                        description: \"Requires \".concat(skillData.requires.skill, \" level \").concat(skillData.requires.level)\n                    });\n                }\n                // Add sub-skills as cross-references\n                if (skillData.sub_skills) {\n                    for (const [subSkillName, subSkillData] of Object.entries(skillData.sub_skills)){\n                        entry.crossReferences.push({\n                            type: 'sub-skill',\n                            target: \"skill_\".concat(subSkillName.toLowerCase().replace(/\\s+/g, '_')),\n                            description: \"Sub-skill: \".concat(subSkillName)\n                        });\n                    }\n                }\n                this.entries.set(entry.id, entry);\n                this.categories.get(category).entries.push(entry.id);\n            }\n        }\n    }\n    /**\r\n   * Load items data into encyclopedia\r\n   * @param {Object} itemsData - Items configuration\r\n   */ async loadItemsData(itemsData) {\n        const category = 'Items';\n        this.categories.set(category, {\n            name: category,\n            description: 'All available items and equipment',\n            icon: 'üéí',\n            entries: []\n        });\n        for (const [itemId, itemData] of Object.entries(itemsData)){\n            const entry = {\n                id: \"item_\".concat(itemId),\n                type: 'item',\n                category: category,\n                name: itemData.displayName || itemData.name,\n                description: itemData.description || 'No description available.',\n                examineText: itemData.examineText || itemData.description,\n                icon: itemData.icon || 'üì¶',\n                data: itemData,\n                tags: [\n                    'item'\n                ],\n                crossReferences: []\n            };\n            // Add item type tags\n            if (itemData.stackable !== undefined) {\n                entry.tags.push(itemData.stackable ? 'stackable' : 'unique');\n            }\n            // Add equipment tags\n            if (itemData.equipmentType) {\n                entry.tags.push(itemData.equipmentType);\n                entry.subcategory = itemData.equipmentType;\n            }\n            this.entries.set(entry.id, entry);\n            this.categories.get(category).entries.push(entry.id);\n        }\n    }\n    /**\r\n   * Load species data into encyclopedia\r\n   * @param {Object} speciesData - Species configuration\r\n   */ async loadSpeciesData(speciesData) {\n        const category = 'Species';\n        this.categories.set(category, {\n            name: category,\n            description: 'All playable and non-playable species',\n            icon: 'üë•',\n            entries: []\n        });\n        for (const [categoryName, categorySpecies] of Object.entries(speciesData)){\n            for (const [speciesId, speciesData] of Object.entries(categorySpecies)){\n                const entry = {\n                    id: \"species_\".concat(speciesId),\n                    type: 'species',\n                    category: category,\n                    subcategory: categoryName,\n                    name: speciesData.name || speciesId,\n                    description: speciesData.description || 'No description available.',\n                    icon: 'üë§',\n                    data: speciesData,\n                    tags: [\n                        categoryName,\n                        'species'\n                    ],\n                    crossReferences: []\n                };\n                // Add profession cross-references\n                if (speciesData.professions) {\n                    for (const profession of speciesData.professions){\n                        entry.crossReferences.push({\n                            type: 'profession',\n                            target: \"skill_\".concat(profession.toLowerCase().replace(/\\s+/g, '_')),\n                            description: \"Can specialize in \".concat(profession)\n                        });\n                    }\n                }\n                this.entries.set(entry.id, entry);\n                this.categories.get(category).entries.push(entry.id);\n            }\n        }\n    }\n    /**\r\n   * Load traits data into encyclopedia\r\n   * @param {Object} traitsData - Traits configuration\r\n   */ async loadTraitsData(traitsData) {\n        const category = 'Traits';\n        this.categories.set(category, {\n            name: category,\n            description: 'Character traits and abilities',\n            icon: '‚ú®',\n            entries: []\n        });\n        for (const [traitId, traitData] of Object.entries(traitsData)){\n            const entry = {\n                id: \"trait_\".concat(traitId),\n                type: 'trait',\n                category: category,\n                name: traitData.name || traitId,\n                description: traitData.description || 'No description available.',\n                icon: '‚ú®',\n                data: traitData,\n                tags: [\n                    'trait'\n                ],\n                crossReferences: []\n            };\n            this.entries.set(entry.id, entry);\n            this.categories.get(category).entries.push(entry.id);\n        }\n    }\n    /**\r\n   * Load locations data into encyclopedia\r\n   * @param {Object} locationsData - Locations configuration\r\n   */ async loadLocationsData(locationsData) {\n        const category = 'Locations';\n        this.categories.set(category, {\n            name: category,\n            description: 'All game locations and areas',\n            icon: 'üó∫Ô∏è',\n            entries: []\n        });\n        for (const [locationId, locationData] of Object.entries(locationsData)){\n            const entry = {\n                id: \"location_\".concat(locationId),\n                type: 'location',\n                category: category,\n                name: locationData.name || locationId,\n                description: locationData.description || 'No description available.',\n                icon: 'üó∫Ô∏è',\n                data: locationData,\n                tags: [\n                    'location'\n                ],\n                crossReferences: []\n            };\n            this.entries.set(entry.id, entry);\n            this.categories.get(category).entries.push(entry.id);\n        }\n    }\n    /**\r\n   * Load actions data into encyclopedia\r\n   * @param {Object} actionsData - Actions configuration\r\n   */ async loadActionsData(actionsData) {\n        const category = 'Actions';\n        this.categories.set(category, {\n            name: category,\n            description: 'All available player actions',\n            icon: '‚ö°',\n            entries: []\n        });\n        for (const [actionId, actionData] of Object.entries(actionsData)){\n            const entry = {\n                id: \"action_\".concat(actionId),\n                type: 'action',\n                category: category,\n                name: actionData.name || actionId,\n                description: actionData.description || 'No description available.',\n                icon: '‚ö°',\n                data: actionData,\n                tags: [\n                    'action'\n                ],\n                crossReferences: []\n            };\n            // Add skill requirement cross-references\n            if (actionData.skillRequired) {\n                entry.crossReferences.push({\n                    type: 'skill-requirement',\n                    target: \"skill_\".concat(actionData.skillRequired.toLowerCase().replace(/\\s+/g, '_')),\n                    description: \"Requires \".concat(actionData.skillRequired, \" skill\")\n                });\n            }\n            // Add item requirement cross-references\n            if (actionData.itemsRequired) {\n                for (const itemId of Object.keys(actionData.itemsRequired)){\n                    entry.crossReferences.push({\n                        type: 'item-requirement',\n                        target: \"item_\".concat(itemId),\n                        description: \"Requires \".concat(itemId)\n                    });\n                }\n            }\n            this.entries.set(entry.id, entry);\n            this.categories.get(category).entries.push(entry.id);\n        }\n    }\n    /**\r\n   * Build cross-references between entries\r\n   */ buildCrossReferences() {\n        for (const [entryId, entry] of this.entries){\n            for (const crossRef of entry.crossReferences){\n                const targetEntry = this.entries.get(crossRef.target);\n                if (targetEntry) {\n                    if (!targetEntry.crossReferences) {\n                        targetEntry.crossReferences = [];\n                    }\n                    targetEntry.crossReferences.push({\n                        type: 'reverse',\n                        target: entryId,\n                        description: \"Referenced by \".concat(entry.name)\n                    });\n                }\n            }\n        }\n    }\n    /**\r\n   * Build search index for quick lookups\r\n   */ buildSearchIndex() {\n        for (const [entryId, entry] of this.entries){\n            // Index by name\n            this.addToSearchIndex(entry.name.toLowerCase(), entryId);\n            // Index by description\n            this.addToSearchIndex(entry.description.toLowerCase(), entryId);\n            // Index by tags\n            for (const tag of entry.tags){\n                this.addToSearchIndex(tag.toLowerCase(), entryId);\n            }\n            // Index by subcategory\n            if (entry.subcategory) {\n                this.addToSearchIndex(entry.subcategory.toLowerCase(), entryId);\n            }\n        }\n    }\n    /**\r\n   * Add term to search index\r\n   * @param {string} term - Search term\r\n   * @param {string} entryId - Entry ID to index\r\n   */ addToSearchIndex(term, entryId) {\n        const words = term.split(/\\s+/);\n        for (const word of words){\n            if (word.length >= 2) {\n                if (!this.searchIndex.has(word)) {\n                    this.searchIndex.set(word, new Set());\n                }\n                this.searchIndex.get(word).add(entryId);\n            }\n        }\n    }\n    /**\r\n   * Search encyclopedia entries\r\n   * @param {string} query - Search query\r\n   * @returns {Array} Array of matching entries\r\n   */ search(query) {\n        if (!query || query.length < 2) return [];\n        const queryLower = query.toLowerCase();\n        const queryWords = queryLower.split(/\\s+/);\n        const results = new Map();\n        for (const word of queryWords){\n            if (word.length >= 2) {\n                const matches = this.searchIndex.get(word);\n                if (matches) {\n                    for (const entryId of matches){\n                        const entry = this.entries.get(entryId);\n                        if (entry) {\n                            const score = results.get(entryId) || 0;\n                            results.set(entryId, score + 1);\n                        }\n                    }\n                }\n            }\n        }\n        // Sort by relevance score\n        return Array.from(results.entries()).sort((a, b)=>b[1] - a[1]).map((param)=>{\n            let [entryId] = param;\n            return this.entries.get(entryId);\n        }).filter(Boolean);\n    }\n    /**\r\n   * Get entry by ID\r\n   * @param {string} entryId - Entry ID\r\n   * @returns {Object|null} Entry data or null if not found\r\n   */ getEntry(entryId) {\n        return this.entries.get(entryId) || null;\n    }\n    /**\r\n   * Get all categories\r\n   * @returns {Array} Array of category objects\r\n   */ getCategories() {\n        return Array.from(this.categories.values());\n    }\n    /**\r\n   * Get entries by category\r\n   * @param {string} categoryName - Category name\r\n   * @returns {Array} Array of entries in category\r\n   */ getEntriesByCategory(categoryName) {\n        const category = this.categories.get(categoryName);\n        if (!category) return [];\n        return category.entries.map((entryId)=>this.entries.get(entryId)).filter(Boolean);\n    }\n    /**\r\n   * Get cross-references for an entry\r\n   * @param {string} entryId - Entry ID\r\n   * @returns {Array} Array of cross-reference objects\r\n   */ getCrossReferences(entryId) {\n        const entry = this.entries.get(entryId);\n        if (!entry || !entry.crossReferences) return [];\n        return entry.crossReferences.map((crossRef)=>({\n                ...crossRef,\n                targetEntry: this.entries.get(crossRef.target)\n            })).filter((crossRef)=>crossRef.targetEntry);\n    }\n    /**\r\n   * Get encyclopedia statistics\r\n   * @returns {Object} Statistics about the encyclopedia\r\n   */ getStatistics() {\n        const stats = {\n            totalEntries: this.entries.size,\n            categories: this.categories.size,\n            searchIndexSize: this.searchIndex.size\n        };\n        for (const [categoryName, category] of this.categories){\n            stats[categoryName] = category.entries.length;\n        }\n        return stats;\n    }\n    constructor(){\n        this.entries = new Map();\n        this.categories = new Map();\n        this.searchIndex = new Map();\n        this.crossReferences = new Map();\n        this.initialized = false;\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = EncyclopediaSystem;\n}\nif (true) window.EncyclopediaSystem = EncyclopediaSystem;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/systems/EncyclopediaSystem.js\n"));

/***/ })

}]);