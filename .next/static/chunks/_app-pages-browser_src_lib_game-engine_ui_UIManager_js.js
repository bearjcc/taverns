"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_ui_UIManager_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/ui/UIManager.js":
/*!*********************************************!*\
  !*** ./src/lib/game-engine/ui/UIManager.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UIManager: () => (/* binding */ UIManager)\n/* harmony export */ });\nclass UIManager {\n    initializeToastContainer() {\n        this.toastContainer = document.getElementById('toast-container');\n        if (!this.toastContainer) {\n            this.toastContainer = document.createElement('div');\n            this.toastContainer.id = 'toast-container';\n            this.toastContainer.className = 'toast-container';\n            document.body.appendChild(this.toastContainer);\n        }\n    }\n    updateSkillsDisplay(skillManager, skillsConfig) {\n        const skillsContent = document.getElementById('skills-content');\n        if (!skillsContent) return;\n        const { skill_categories, skills: skillsData } = skillsConfig;\n        const playerSkills = skillManager.getAllSkills();\n        let html = '';\n        skill_categories.forEach((category)=>{\n            html += this.createSkillCategoryHtml(category);\n            const skillsInCategoryNames = Object.keys(skillsData).filter((skillName)=>skillsData[skillName].type === category.id);\n            if (skillsInCategoryNames.length > 0) {\n                skillsInCategoryNames.forEach((skillName)=>{\n                    const skillDetails = skillsData[skillName];\n                    let playerSkill = playerSkills.find((s)=>s.name === skillName);\n                    if (!playerSkill) {\n                        // Create a mock skill object for locked skills or skills the player hasn't acquired yet\n                        playerSkill = {\n                            name: skillName,\n                            level: 0,\n                            locked: skillDetails.locked,\n                            xp: 0,\n                            xpToNext: 100,\n                            getProgress: ()=>0\n                        };\n                    }\n                    html += this.createSkillHtml(skillName, skillDetails, playerSkill);\n                });\n            }\n            html += \"</div></div>\";\n        });\n        skillsContent.innerHTML = html;\n    }\n    createSkillCategoryHtml(category) {\n        return '\\n            <div class=\"skill-category\">\\n                <div class=\"skill-category-header\" onclick=\"uiManager.toggleSkillCategory(this)\">\\n                    <span class=\"skill-category-toggle\">▶</span>\\n                    <span class=\"skill-category-name\">'.concat(category.name.toUpperCase(), '</span>\\n                </div>\\n                <div class=\"skill-items-container\">\\n        ');\n    }\n    createSkillHtml(skillName, skillDetails, playerSkill) {\n        const isLocked = playerSkill.locked || skillDetails.locked;\n        if (isLocked) {\n            return '\\n                <div class=\"skill-item locked\">\\n                    <div class=\"skill-info\">\\n                        <span class=\"skill-icon\">'.concat(skillDetails.icon, '</span>\\n                        <span class=\"skill-name\">').concat(skillName, '</span>\\n                    </div>\\n                    <span class=\"skill-lock-icon\">\\uD83D\\uDD12</span>\\n                </div>\\n            ');\n        }\n        const progress = playerSkill.getProgress ? playerSkill.getProgress() : 0;\n        return '\\n            <div class=\"skill-item\">\\n                <div class=\"skill-info\">\\n                    <span class=\"skill-icon\">'.concat(skillDetails.icon, '</span>\\n                    <span class=\"skill-name\">').concat(skillName, '</span>\\n                    <span class=\"skill-level-info\">(').concat(playerSkill.level, ' / 120)</span>\\n                </div>\\n                <div class=\"skill-progress-container\">\\n                    <div class=\"skill-progress-bar\">\\n                        <div class=\"skill-progress-fill\" style=\"width: ').concat(progress, '%\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        ');\n    }\n    toggleSkillCategory(headerElement) {\n        const category = headerElement.closest('.skill-category');\n        category.classList.toggle('collapsed');\n    }\n    updateActionsDisplay(actionManager, skillManager, inventoryManager, gameConfig) {\n        const actionsContent = document.getElementById('actions-content');\n        if (!actionsContent) return;\n        const availableActions = actionManager.getAvailableActions();\n        let html = '';\n        for (const action of availableActions){\n            html += this.createActionHtml(action, actionManager, skillManager, inventoryManager, gameConfig);\n        }\n        actionsContent.innerHTML = html;\n    }\n    createActionHtml(action, actionManager, skillManager, inventoryManager, gameConfig) {\n        var _gameConfig_ui;\n        const cssClasses = (gameConfig === null || gameConfig === void 0 ? void 0 : (_gameConfig_ui = gameConfig.ui) === null || _gameConfig_ui === void 0 ? void 0 : _gameConfig_ui.cssClasses) || {};\n        const isNewlyUnlocked = actionManager.isNewlyUnlocked(action.name);\n        const newUnlockClass = isNewlyUnlocked ? \" \".concat(cssClasses.newUnlock || 'new-unlock') : '';\n        const skill = skillManager.getSkill(action.skillType);\n        const canPerform = skill && action.canPerform(skill.level, inventoryManager);\n        const disabledAttr = canPerform ? '' : 'disabled';\n        const lockedClass = canPerform ? '' : ' locked';\n        // Check availability and cooldown\n        let availabilityInfo = '';\n        let cooldownInfo = '';\n        let missingRequirements = '';\n        if (action.availabilityInfo) {\n            const availability = action.availabilityInfo;\n            // Show cooldown if action has one\n            if (action.availability && action.availability.cooldown) {\n                const remainingCooldown = actionManager.availabilityEngine.getRemainingCooldown(action.name, action.availability.cooldown);\n                if (remainingCooldown > 0) {\n                    const cooldownMinutes = Math.ceil(remainingCooldown / 60000);\n                    cooldownInfo = '<div class=\"cooldown-timer\">⏰ '.concat(cooldownMinutes, \"m cooldown</div>\");\n                }\n            }\n            // Show missing requirements if action is not available\n            if (!availability.available && availability.missingRequirements.length > 0) {\n                missingRequirements = '<div class=\"missing-requirements\">❌ '.concat(availability.missingRequirements.join(', '), \"</div>\");\n            }\n        }\n        let timeDisplay = '';\n        if (action.timeRequired > 0) {\n            timeDisplay = '<div class=\"'.concat(cssClasses.actionTime || 'action-time', '\">⏱️ ').concat(action.getTimeDisplay(), \"</div>\");\n        }\n        let variableInput = '';\n        if (action.hasVariables()) {\n            variableInput = '\\n                <div class=\"'.concat(cssClasses.actionVariable || 'action-variable', '\">\\n                    <input type=\"number\" min=\"1\" value=\"1\" id=\"var-').concat(action.name, '\" \\n                           placeholder=\"Amount\" style=\"width: 60px; margin-right: 5px;\">\\n                </div>\\n            ');\n        }\n        // Build tooltip with availability information\n        let tooltip = action.tooltip || action.description;\n        if (action.availabilityInfo && !action.availabilityInfo.available) {\n            tooltip += \"\\n\\nNot available: \".concat(action.availabilityInfo.reasons.join(', '));\n        }\n        return '\\n            <button class=\"'.concat(cssClasses.actionButton || 'action-button').concat(newUnlockClass).concat(lockedClass, '\" \\n                    onclick=\"handleAction(\\'').concat(action.name, '\\')\" \\n                    title=\"').concat(tooltip, '\" ').concat(disabledAttr, '>\\n                <div class=\"').concat(cssClasses.actionIcon || 'action-icon', '\">').concat(action.icon, '</div>\\n                <div class=\"').concat(cssClasses.actionTitle || 'action-title', '\">').concat(action.displayName, '</div>\\n                <div class=\"').concat(cssClasses.actionDescription || 'action-description', '\">').concat(action.description, \"</div>\\n                \").concat(timeDisplay, \"\\n                \").concat(cooldownInfo, \"\\n                \").concat(missingRequirements, \"\\n                \").concat(variableInput, \"\\n            </button>\\n        \");\n    }\n    updateInventoryDisplay(inventoryManager, gameConfig) {\n        const inventoryContent = document.getElementById('inventory-content');\n        if (!inventoryContent) return;\n        const items = inventoryManager.getAllItems();\n        let html = '';\n        if (items.length === 0) {\n            html += '<p class=\"text-muted\">Your inventory is empty.</p>';\n        } else {\n            for (const item of items){\n                html += this.createInventoryItemHtml(item, gameConfig);\n            }\n        }\n        inventoryContent.innerHTML = html;\n    }\n    createInventoryItemHtml(inventoryItem, gameConfig) {\n        const gameObject = inventoryItem.gameObject;\n        const itemJson = JSON.stringify(inventoryItem).replace(/\"/g, '&quot;');\n        return '\\n            <div class=\"inventory-item\" \\n                 onclick=\"uiManager.showItemContextMenu(event, \\''.concat(gameObject.id, \"', \").concat(itemJson, ')\">\\n                <div class=\"item-icon\">').concat(gameObject.icon, '</div>\\n                <div class=\"item-info\">\\n                    <span class=\"item-name\">').concat(gameObject.displayName, '</span>\\n                    <span class=\"item-quantity\">x').concat(inventoryItem.quantity, \"</span>\\n                </div>\\n            </div>\\n        \");\n    }\n    updateCharacterDisplay(traitManager, gameConfig) {\n        const characterContent = document.getElementById('character-content');\n        if (!characterContent) return;\n        const traits = traitManager.getAllTraits();\n        let html = '<h3>Character</h3>';\n        if (traits.length === 0) {\n            html += '<p>No traits available.</p>';\n        } else {\n            html += '<div class=\"traits-grid\">';\n            for (const trait of traits){\n                html += this.createTraitHtml(trait, gameConfig);\n            }\n            html += '</div>';\n        }\n        characterContent.innerHTML = html;\n    }\n    createTraitHtml(trait, gameConfig) {\n        var _gameConfig_ui;\n        const cssClasses = (gameConfig === null || gameConfig === void 0 ? void 0 : (_gameConfig_ui = gameConfig.ui) === null || _gameConfig_ui === void 0 ? void 0 : _gameConfig_ui.cssClasses) || {};\n        const progress = trait.getProgress();\n        return '\\n            <div class=\"trait-item\">\\n                <div class=\"trait-header\">\\n                    <span class=\"trait-icon\">'.concat(trait.icon, '</span>\\n                    <span class=\"trait-name\">').concat(trait.name, '</span>\\n                    <span class=\"trait-level\">Level ').concat(trait.level, '</span>\\n                </div>\\n                <div class=\"trait-description\">').concat(trait.description, '</div>\\n                <div class=\"').concat(cssClasses.skillProgressContainer || 'skill-progress-container', '\">\\n                    <div class=\"').concat(cssClasses.skillProgressBar || 'skill-progress-bar', '\">\\n                        <div class=\"').concat(cssClasses.skillProgressFill || 'skill-progress-fill', '\" \\n                             style=\"width: ').concat(progress, '%\"></div>\\n                    </div>\\n                    <span class=\"').concat(cssClasses.skillXp || 'skill-xp', '\">').concat(trait.xp, \"/\").concat(trait.xpToNext, \" XP</span>\\n                </div>\\n            </div>\\n        \");\n    }\n    updateAchievementsDisplay(achievementSystem, gameConfig) {\n        const achievementsContent = document.getElementById('achievements-content');\n        if (!achievementsContent) return;\n        const achievementsData = achievementSystem.getAllAchievements();\n        const unlockedAchievements = achievementSystem.getUnlockedAchievements();\n        const achievementProgress = achievementSystem.getAchievementProgress();\n        // Group by category\n        const categories = {};\n        for (const [id, achievement] of Object.entries(achievementsData)){\n            const category = achievement.category || 'General';\n            if (!categories[category]) categories[category] = [];\n            categories[category].push({\n                ...achievement,\n                id\n            });\n        }\n        // Sort by points descending\n        for(const cat in categories){\n            categories[cat].sort((a, b)=>(b.points || 0) - (a.points || 0));\n        }\n        let html = '';\n        Object.entries(categories).forEach((param)=>{\n            let [category, achievements] = param;\n            html += '\\n                <div class=\"skill-category\">\\n                    <div class=\"skill-category-header\" onclick=\"uiManager.toggleSkillCategory(this)\">\\n                        <span class=\"skill-category-toggle\">▶</span>\\n                        <span class=\"skill-category-name\">'.concat(category.toUpperCase(), '</span>\\n                    </div>\\n                    <div class=\"skill-items-container\">\\n            ');\n            achievements.forEach((achievement)=>{\n                const isUnlocked = unlockedAchievements.has(achievement.id);\n                const progress = achievementProgress[achievement.id] || null;\n                html += '\\n                    <div class=\"skill-item'.concat(isUnlocked ? '' : ' locked', '\">\\n                        <div class=\"skill-info\">\\n                            <span class=\"skill-icon\">').concat(achievement.icon || '🏆', '</span>\\n                            <span class=\"skill-name\">').concat(isUnlocked || !achievement.secret ? achievement.name : '???', \"</span>\\n                            \").concat(isUnlocked ? '<span class=\"skill-level-info\">Unlocked</span>' : '<span class=\"skill-lock-icon\">🔒</span>', '\\n                        </div>\\n                        <div class=\"skill-progress-container\">\\n                            <div class=\"skill-progress-bar\">\\n                                <div class=\"skill-progress-fill\" style=\"width: ').concat(progress && progress.required > 1 ? Math.min(progress.current / progress.required * 100, 100) : 0, '%\"></div>\\n                            </div>\\n                            ').concat(progress && progress.required > 1 ? '<span class=\"skill-xp\">'.concat(progress.current, \"/\").concat(progress.required, \"</span>\") : '', '\\n                        </div>\\n                        <div class=\"skill-description\" style=\"color:#aaa;font-size:12px;margin-top:2px;\">\\n                            ').concat(isUnlocked || !achievement.secret ? achievement.description : 'Unlock this secret achievement to reveal its details.', '\\n                        </div>\\n                        <div class=\"skill-level-info\" style=\"font-size:11px;color:#888;\">').concat(achievement.points || 0, \" pts</div>\\n                    </div>\\n                \");\n            });\n            html += \"</div></div>\";\n        });\n        achievementsContent.innerHTML = html;\n    }\n    switchTab(tabName) {\n        this.currentTab = tabName;\n        // Hide all tab panels\n        const tabPanels = document.querySelectorAll('.tab-panel');\n        tabPanels.forEach((panel)=>panel.classList.remove('active'));\n        // Remove active class from all tab buttons\n        const tabButtons = document.querySelectorAll('.tab-button');\n        tabButtons.forEach((button)=>button.classList.remove('active'));\n        // Show selected tab panel\n        const selectedPanel = document.getElementById(\"\".concat(tabName, \"-tab\"));\n        if (selectedPanel) {\n            selectedPanel.classList.add('active');\n        }\n        // Add active class to selected tab button\n        const selectedButton = document.querySelector('[data-tab=\"'.concat(tabName, '\"]'));\n        if (selectedButton) {\n            selectedButton.classList.add('active');\n        }\n        // After switching tab, we might need to update its content\n        switch(tabName){\n            case 'skills':\n                break;\n            case 'inventory':\n                break;\n            case 'character':\n                break;\n            case 'achievements':\n                this.updateAchievementsDisplay(window.achievementSystem, window.configManager.getGameConfig());\n                break;\n        }\n    }\n    generateTabsFromConfig(gameConfig) {\n        var _gameConfig_ui, _gameConfig_ui1, _gameConfig_ui2;\n        const sidebar = document.querySelector('.sidebar');\n        if (!sidebar) return;\n        const tabs = (gameConfig === null || gameConfig === void 0 ? void 0 : (_gameConfig_ui = gameConfig.ui) === null || _gameConfig_ui === void 0 ? void 0 : _gameConfig_ui.tabs) || [];\n        const cssClasses = (gameConfig === null || gameConfig === void 0 ? void 0 : (_gameConfig_ui1 = gameConfig.ui) === null || _gameConfig_ui1 === void 0 ? void 0 : _gameConfig_ui1.cssClasses) || {};\n        const elementIds = (gameConfig === null || gameConfig === void 0 ? void 0 : (_gameConfig_ui2 = gameConfig.ui) === null || _gameConfig_ui2 === void 0 ? void 0 : _gameConfig_ui2.elementIds) || {};\n        let tabsHtml = '<div class=\"tab-buttons\">';\n        let panelsHtml = '<div class=\"tab-panels\">';\n        tabs.forEach((tab, index)=>{\n            const isActive = index === 0 ? 'active' : '';\n            const tabId = elementIds[\"\".concat(tab.id, \"Tab\")] || \"\".concat(tab.id, \"-tab\");\n            tabsHtml += '\\n                <button class=\"'.concat(cssClasses.tabButton || 'tab-button', \" \").concat(isActive, '\" \\n                        data-tab=\"').concat(tab.id, '\" \\n                        onclick=\"uiManager.switchTab(\\'').concat(tab.id, '\\')\">\\n                    <span class=\"tab-icon\">').concat(tab.icon, '</span>\\n                    <span class=\"tab-name\">').concat(tab.displayName, \"</span>\\n                </button>\\n            \");\n            panelsHtml += '\\n                <div id=\"'.concat(tabId, '\" class=\"').concat(cssClasses.tabPanel || 'tab-panel', \" \").concat(isActive, '\">\\n                    <div class=\"tab-content\" id=\"').concat(tab.id, '-content\">\\n                        <h3>').concat(tab.displayName, \"</h3>\\n                        <p>Loading \").concat(tab.displayName.toLowerCase(), \"...</p>\\n                    </div>\\n                </div>\\n            \");\n        });\n        tabsHtml += '</div>';\n        panelsHtml += '</div>';\n        sidebar.innerHTML = tabsHtml + panelsHtml;\n    }\n    addNarrationMessage(message) {\n        const narrationContent = document.getElementById('narration-content');\n        if (!narrationContent) return;\n        const messageElement = document.createElement('div');\n        messageElement.className = 'narration-message';\n        messageElement.textContent = message;\n        narrationContent.appendChild(messageElement);\n        narrationContent.scrollTop = narrationContent.scrollHeight;\n    }\n    showToast(message) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'info', duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3000;\n        const toast = document.createElement('div');\n        toast.className = \"toast toast-\".concat(type);\n        toast.textContent = message;\n        this.toastContainer.appendChild(toast);\n        setTimeout(()=>{\n            toast.classList.add('show');\n        }, 100);\n        setTimeout(()=>{\n            toast.classList.remove('show');\n            setTimeout(()=>{\n                if (toast.parentNode) {\n                    toast.parentNode.removeChild(toast);\n                }\n            }, 300);\n        }, duration);\n    }\n    flashXpGain(skillName, xpAmount) {\n        const skillElement = document.querySelector('[data-skill=\"'.concat(skillName, '\"]'));\n        if (skillElement) {\n            skillElement.classList.add('xp-gain');\n            setTimeout(()=>{\n                skillElement.classList.remove('xp-gain');\n            }, 1000);\n        }\n    }\n    updateLastSavedTime() {\n        const now = new Date();\n        const timeString = now.toLocaleTimeString();\n        console.log(\"Game state saved at \".concat(timeString));\n        // Update the display in the UI\n        const lastSavedElement = document.getElementById('last-saved-time');\n        if (lastSavedElement) {\n            lastSavedElement.textContent = \"Last saved: \".concat(timeString);\n        }\n    }\n    manualSave(skillManager, inventoryManager, traitManager) {\n        try {\n            const success = gameStateManager.saveGameState(skillManager, inventoryManager, traitManager);\n            if (success) {\n                this.showToast('Game saved successfully', 'success');\n                this.updateLastSavedTime();\n            } else {\n                this.showToast('Failed to save game', 'error');\n            }\n        } catch (error) {\n            console.error('Manual save failed:', error);\n            this.showToast('Failed to save game', 'error');\n        }\n    }\n    showItemContextMenu(event, itemId, inventoryItem) {\n        event.preventDefault();\n        this.removeContextMenu();\n        const menu = document.createElement('div');\n        menu.className = 'context-menu';\n        menu.innerHTML = \"\\n            <div class=\\\"context-menu-item\\\" onclick=\\\"handleItemAction('examine', '\".concat(itemId, \"')\\\">Examine</div>\\n            <div class=\\\"context-menu-item\\\" onclick=\\\"handleItemAction('use', '\").concat(itemId, \"')\\\">Use</div>\\n            <div class=\\\"context-menu-item\\\" onclick=\\\"handleItemAction('drop', '\").concat(itemId, \"')\\\">Drop</div>\\n        \");\n        menu.style.left = event.pageX + 'px';\n        menu.style.top = event.pageY + 'px';\n        document.body.appendChild(menu);\n        document.addEventListener('click', this.removeContextMenu);\n    }\n    removeContextMenu() {\n        const existingMenu = document.querySelector('.context-menu');\n        if (existingMenu) {\n            existingMenu.remove();\n        }\n        document.removeEventListener('click', this.removeContextMenu);\n    }\n    constructor(){\n        this.currentTab = 'skills';\n        this.toastContainer = null;\n        this.initializeToastContainer();\n    }\n}\nif (true) window.UIManager = UIManager;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/ui/UIManager.js\n"));

/***/ })

}]);