"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_systems_ActionManager_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/systems/ActionManager.js":
/*!******************************************************!*\
  !*** ./src/lib/game-engine/systems/ActionManager.js ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Action: () => (/* binding */ Action),\n/* harmony export */   ActionManager: () => (/* binding */ ActionManager)\n/* harmony export */ });\nclass ActionManager {\n    /**\r\n     * Set the configuration manager reference\r\n     * @param {ConfigManager} configManager - The configuration manager instance\r\n     */ setConfigManager(configManager) {\n        this.configManager = configManager;\n    }\n    /**\r\n     * Set the UI manager reference\r\n     * @param {UIManager} uiManager - The UI manager instance\r\n     */ setUIManager(uiManager) {\n        this.uiManager = uiManager;\n    }\n    /**\r\n     * Set the skill manager reference\r\n     * @param {SkillManager} skillManager - The skill manager instance\r\n     */ setSkillSystem(skillManager) {\n        this.skillManager = skillManager;\n    }\n    /**\r\n     * Set the inventory manager reference\r\n     * @param {InventoryManager} inventoryManager - The inventory manager instance\r\n     */ setInventorySystem(inventoryManager) {\n        this.inventoryManager = inventoryManager;\n    }\n    /**\r\n     * Set the location system reference\r\n     * @param {LocationSystem} locationSystem - The location system instance\r\n     */ setLocationSystem(locationSystem) {\n        this.locationSystem = locationSystem;\n    }\n    /**\r\n     * Set the quest system reference\r\n     * @param {QuestSystem} questSystem - The quest system instance\r\n     */ setQuestSystem(questSystem) {\n        this.questSystem = questSystem;\n    }\n    /**\r\n     * Set the NPC system reference\r\n     * @param {NPCSystem} npcSystem - The NPC system instance\r\n     */ setNPCSystem(npcSystem) {\n        this.npcSystem = npcSystem;\n    }\n    loadFromConfig(actionsConfig) {\n        try {\n            console.log('Loading actions...');\n            this.actions.clear();\n            if (actionsConfig) {\n                for (const [skillType, skillData] of Object.entries(actionsConfig)){\n                    if (skillData.actions) {\n                        for (const actionData of skillData.actions){\n                            const action = new Action(actionData.name, actionData.displayName, actionData.description, actionData.icon, actionData.tooltip, actionData.levelRequired, actionData.xpReward, actionData.timeRequired, actionData.timeUnit, actionData.itemReward, actionData.itemCount, actionData.itemConsumption, actionData.unlockMessage, actionData.flavorText, actionData.skillType, actionData.variables, actionData.availability || {});\n                            this.actions.set(actionData.name, action);\n                        }\n                    }\n                }\n            }\n            console.log(\"Loaded \".concat(this.actions.size, \" actions\"));\n        } catch (error) {\n            console.error('Error loading actions:', error);\n        }\n    }\n    getAction(actionName) {\n        return this.actions.get(actionName);\n    }\n    getAllActions() {\n        return Array.from(this.actions.values());\n    }\n    getAvailableActions() {\n        const availableActions = [];\n        for (const action of this.actions.values()){\n            const skill = this.skillManager ? this.skillManager.getSkill(action.skillType) : null;\n            if (!skill) continue;\n            // Check basic skill level requirement\n            if (skill.level < action.levelRequired) continue;\n            // Check dynamic availability using the availability engine\n            const context = this._buildActionContext();\n            const availability = this.availabilityEngine.checkActionAvailability(action, context);\n            if (availability.available) {\n                // Add availabilityInfo to the action instance without losing prototype methods\n                action.availabilityInfo = availability;\n                availableActions.push(action);\n            }\n        }\n        return availableActions;\n    }\n    /**\r\n     * Build context object for action availability checking\r\n     * @returns {Object} Context object with all necessary systems\r\n     */ _buildActionContext() {\n        return {\n            currentLocation: this.locationSystem ? this.locationSystem.getCurrentLocation() : null,\n            locationSystem: this.locationSystem,\n            inventoryManager: this.inventoryManager,\n            skillManager: this.skillManager,\n            questSystem: this.questSystem,\n            npcSystem: this.npcSystem,\n            configManager: this.configManager,\n            uiManager: this.uiManager\n        };\n    }\n    /**\r\n     * Execute an action\r\n     * @param {string} actionName - The name of the action to execute\r\n     * @param {*} variable - Optional variable parameter\r\n     * @returns {Object} Result of the action execution\r\n     */ executeAction(actionName) {\n        let variable = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        const action = this.getAction(actionName);\n        if (!action) {\n            return {\n                success: false,\n                message: 'Action not found'\n            };\n        }\n        const skill = this.skillManager ? this.skillManager.getSkill(action.skillType) : null;\n        if (!skill) {\n            return {\n                success: false,\n                message: 'Skill not found'\n            };\n        }\n        // Check dynamic availability before execution\n        const context = this._buildActionContext();\n        const availability = this.availabilityEngine.checkActionAvailability(action, context);\n        if (!availability.available) {\n            const reason = availability.reasons.length > 0 ? availability.reasons[0] : 'Action not available';\n            return {\n                success: false,\n                message: reason\n            };\n        }\n        // Check if player can perform the action (basic requirements)\n        if (!action.canPerform(skill.level, this.inventoryManager)) {\n            return {\n                success: false,\n                message: \"Requires \".concat(action.skillType, \" level \").concat(action.levelRequired)\n            };\n        }\n        // Handle item consumption\n        for (const [itemId, requiredQuantity] of Object.entries(action.itemConsumption)){\n            if (!this.inventoryManager || !this.inventoryManager.hasItem(itemId, requiredQuantity)) {\n                var _this_inventoryManager_getGameObject;\n                const itemName = this.inventoryManager ? ((_this_inventoryManager_getGameObject = this.inventoryManager.getGameObject(itemId)) === null || _this_inventoryManager_getGameObject === void 0 ? void 0 : _this_inventoryManager_getGameObject.displayName) || itemId : itemId;\n                const message = this.configManager ? this.configManager.getMessage('actionInsufficientItems', {\n                    itemName\n                }) : \"Insufficient \".concat(itemName);\n                return {\n                    success: false,\n                    message\n                };\n            }\n        }\n        // Consume items\n        for (const [itemId, quantity] of Object.entries(action.itemConsumption)){\n            if (this.inventoryManager) {\n                this.inventoryManager.removeItem(itemId, quantity);\n                // Emit item consumed event for achievement tracking\n                if (this.eventSystem) {\n                    this.eventSystem.emit('item:consumed', {\n                        itemId: itemId,\n                        quantity: quantity,\n                        actionName: actionName\n                    });\n                }\n            }\n        }\n        // Record action usage for cooldown tracking\n        if (action.availability && action.availability.cooldown) {\n            this.availabilityEngine.recordActionUsage(actionName);\n        }\n        // Perform action and gain XP\n        const xpGained = action.performAction(skill, variable);\n        const itemReward = action.itemReward;\n        const itemCount = action.itemRewardQuantity || 1;\n        if (itemReward && this.inventoryManager) {\n            this.inventoryManager.addItem(itemReward, itemCount);\n            // Emit crafting completed event for achievement tracking\n            if (this.eventSystem && action.skillType === 'crafting') {\n                this.eventSystem.emit('craft:completed', {\n                    itemId: itemReward,\n                    quantity: itemCount,\n                    actionName: actionName\n                });\n            }\n        }\n        return {\n            success: true,\n            xpGained,\n            itemGained: itemReward,\n            itemCount,\n            message: action.flavorText || 'Action completed successfully'\n        };\n    }\n    /**\r\n     * Get actions available at a specific spot\r\n     * @param {string} spotId - The spot ID\r\n     * @returns {Array} Array of available actions\r\n     */ getActionsForSpot(spotId) {\n        if (!this.locationSystem) {\n            return this.getAvailableActions();\n        }\n        const spot = this.locationSystem._findSpotById(spotId);\n        if (!spot || !spot.actions) {\n            return [];\n        }\n        const availableActions = [];\n        for (const actionName of spot.actions){\n            const action = this.actions.get(actionName);\n            if (action) {\n                const skill = this.skillManager ? this.skillManager.getSkill(action.skillType) : null;\n                if (skill) {\n                    // Check dynamic availability\n                    const context = this._buildActionContext();\n                    const availability = this.availabilityEngine.checkActionAvailability(action, context);\n                    if (availability.available) {\n                        // Add availabilityInfo to the action instance without losing prototype methods\n                        action.availabilityInfo = availability;\n                        availableActions.push(action);\n                    }\n                }\n            }\n        }\n        return availableActions;\n    }\n    /**\r\n     * Get travel actions for current location\r\n     * @param {Object} playerState - Current player state\r\n     * @returns {Array} Array of travel actions\r\n     */ getTravelActions(playerState) {\n        if (!this.locationSystem) return [];\n        const availableSpots = this.locationSystem.getAvailableSpots();\n        const travelActions = [];\n        for (const spot of availableSpots){\n            const travelCheck = this.locationSystem.canTravelToSpot(spot.id, playerState);\n            if (travelCheck.canTravel) {\n                var _spot_travelCost;\n                travelActions.push({\n                    name: \"travel_to_\".concat(spot.id),\n                    displayName: \"Travel to \".concat(spot.name),\n                    description: spot.description,\n                    icon: \"🚶\",\n                    tooltip: \"Travel to \".concat(spot.name, \" (\").concat(spot.travelTime, \" minutes)\"),\n                    levelRequired: 1,\n                    xpReward: 0,\n                    timeRequired: spot.travelTime || 1,\n                    timeUnit: \"minutes\",\n                    itemReward: null,\n                    itemCount: 0,\n                    itemConsumption: ((_spot_travelCost = spot.travelCost) === null || _spot_travelCost === void 0 ? void 0 : _spot_travelCost.items) || {},\n                    unlockMessage: \"\",\n                    flavorText: \"You travel to \".concat(spot.name, \".\"),\n                    skillType: \"travel\",\n                    isTravelAction: true,\n                    targetSpotId: spot.id\n                });\n            }\n        }\n        return travelActions;\n    }\n    markActionAsNewlyUnlocked(actionName) {\n        this.newlyUnlockedActions.add(actionName);\n    }\n    isNewlyUnlocked(actionName) {\n        return this.newlyUnlockedActions.has(actionName);\n    }\n    markActionUsed(actionName) {\n        this.newlyUnlockedActions.delete(actionName);\n    }\n    checkForNewUnlocks(skillName, fromLevel, toLevel) {\n        for (const action of this.actions.values()){\n            if (action.skillType === skillName && action.levelRequired > fromLevel && action.levelRequired <= toLevel) {\n                this.markActionAsNewlyUnlocked(action.name);\n                if (this.configManager && this.uiManager) {\n                    const message = this.configManager.getMessage('actionUnlocked', {\n                        actionName: action.displayName,\n                        level: action.levelRequired\n                    });\n                    this.uiManager.addNarrationMessage(message);\n                }\n            }\n        }\n    }\n    constructor(eventSystem, stateManager){\n        this.actions = new Map();\n        this.newlyUnlockedActions = new Set();\n        this.locationSystem = null;\n        this.configManager = null;\n        this.uiManager = null;\n        this.skillManager = null;\n        this.inventoryManager = null;\n        this.questSystem = null;\n        this.npcSystem = null;\n        this.eventSystem = eventSystem;\n        this.stateManager = stateManager;\n        // Initialize availability engine\n        this.availabilityEngine = new ActionAvailabilityEngine(eventSystem, stateManager);\n    }\n}\n// Action class for defining game actions\nclass Action {\n    canPerform(skillLevel, inventoryManager) {\n        if (skillLevel < this.levelRequired) {\n            return false;\n        }\n        // Check if player has required items\n        for (const [itemId, requiredQuantity] of Object.entries(this.itemConsumption)){\n            if (!inventoryManager.hasItem(itemId, requiredQuantity)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getTimeDisplay() {\n        if (this.timeRequired <= 0) return '';\n        const timeValue = this.timeRequired === Math.floor(this.timeRequired) ? this.timeRequired : this.timeRequired.toFixed(1);\n        return \"\".concat(timeValue, \" \").concat(this.timeUnit);\n    }\n    hasVariables() {\n        return this.variables !== null && Object.keys(this.variables).length > 0;\n    }\n    performAction(skill) {\n        let variable = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        // Calculate XP based on variable amount if provided\n        let xpToGain = this.xpReward;\n        if (variable && this.variables && this.variables.amount) {\n            xpToGain = this.xpReward * variable;\n        }\n        // Add XP to the skill\n        if (skill && xpToGain > 0) {\n            skill.addXp(xpToGain);\n        }\n        return xpToGain;\n    }\n    constructor(name, displayName, description, icon, tooltip, levelRequired, xpReward, timeRequired, timeUnit, itemReward, itemCount, itemConsumption, unlockMessage, flavorText, skillType, variables = null, availability = {}){\n        this.name = name;\n        this.displayName = displayName;\n        this.description = description;\n        this.icon = icon;\n        this.tooltip = tooltip;\n        this.levelRequired = levelRequired;\n        this.xpReward = xpReward;\n        this.timeRequired = timeRequired || 0;\n        this.timeUnit = timeUnit || 'minutes';\n        this.itemReward = itemReward;\n        this.itemRewardQuantity = itemCount || 1;\n        this.itemConsumption = itemConsumption || {};\n        this.unlockMessage = unlockMessage;\n        this.flavorText = flavorText;\n        this.skillType = skillType;\n        this.variables = variables;\n        this.isTravelAction = false;\n        this.targetSpotId = null;\n        this.availability = availability;\n    }\n}\nif (true) window.ActionManager = ActionManager;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/systems/ActionManager.js\n"));

/***/ })

}]);