"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_ui_FoodCategoryUI_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/ui/FoodCategoryUI.js":
/*!**************************************************!*\
  !*** ./src/lib/game-engine/ui/FoodCategoryUI.js ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FoodCategoryUI: () => (/* binding */ FoodCategoryUI)\n/* harmony export */ });\n/**\r\n * Food Category UI Manager\r\n * Handles the display and interaction with food categories\r\n */ class FoodCategoryUI {\n    /**\r\n     * Initialize the food category UI\r\n     * @param {string} containerId - ID of the container element\r\n     */ initialize(containerId) {\n        this.container = document.getElementById(containerId);\n        if (!this.container) {\n            console.error(\"Container not found: \".concat(containerId));\n            return;\n        }\n        this.render();\n    }\n    /**\r\n     * Render the main food category interface\r\n     */ render() {\n        this.container.innerHTML = '\\n            <div class=\"food-categories-container\">\\n                <div class=\"food-categories-header\">\\n                    <h3>\\uD83C\\uDF7DÔ∏è Food Categories</h3>\\n                    <div class=\"food-search\">\\n                        <input type=\"text\" id=\"food-search-input\" placeholder=\"Search food items...\" \\n                               value=\"'.concat(this.searchQuery, '\">\\n                        <button id=\"food-search-btn\">\\uD83D\\uDD0D</button>\\n                    </div>\\n                </div>\\n                \\n                <div class=\"food-categories-grid\">\\n                    ').concat(this.renderCategoryGrid(), '\\n                </div>\\n                \\n                <div class=\"food-items-display\">\\n                    ').concat(this.renderFoodItems(), '\\n                </div>\\n                \\n                <div class=\"nutritional-summary\">\\n                    ').concat(this.renderNutritionalSummary(), \"\\n                </div>\\n            </div>\\n        \");\n        this.attachEventListeners();\n    }\n    /**\r\n     * Render the category grid\r\n     * @returns {string} HTML for category grid\r\n     */ renderCategoryGrid() {\n        const categories = this.foodCategoryManager.getAllCategories();\n        const stats = this.foodCategoryManager.getCategoryStatistics();\n        return categories.map((category)=>{\n            const categoryStats = stats[category.id];\n            const isSelected = this.currentCategory === category.id;\n            return '\\n                <div class=\"food-category-card '.concat(isSelected ? 'selected' : '', '\" \\n                     data-category=\"').concat(category.id, '\">\\n                    <div class=\"category-icon\" style=\"color: ').concat(category.color, '\">\\n                        ').concat(category.icon, '\\n                    </div>\\n                    <div class=\"category-info\">\\n                        <h4>').concat(category.displayName, \"</h4>\\n                        <p>\").concat(category.description, '</p>\\n                        <span class=\"item-count\">').concat(categoryStats.itemCount, \" items</span>\\n                    </div>\\n                </div>\\n            \");\n        }).join('');\n    }\n    /**\r\n     * Render food items for the selected category\r\n     * @returns {string} HTML for food items\r\n     */ renderFoodItems() {\n        if (!this.currentCategory) {\n            return '<div class=\"no-category-selected\">Select a category to view food items</div>';\n        }\n        const category = this.foodCategoryManager.getCategory(this.currentCategory);\n        const items = this.getFilteredItems();\n        const subcategories = this.foodCategoryManager.getSubcategories(this.currentCategory);\n        return '\\n            <div class=\"food-items-container\">\\n                <div class=\"category-header\">\\n                    <h4>'.concat(category.displayName, \" \").concat(category.icon, '</h4>\\n                    <div class=\"subcategory-filters\">\\n                        <button class=\"subcategory-btn ').concat(!this.currentSubcategory ? 'active' : '', '\" \\n                                data-subcategory=\"\">All</button>\\n                        ').concat(subcategories.map((sub)=>'\\n                            <button class=\"subcategory-btn '.concat(this.currentSubcategory === sub ? 'active' : '', '\" \\n                                    data-subcategory=\"').concat(sub, '\">').concat(this.formatSubcategoryName(sub), \"</button>\\n                        \")).join(''), '\\n                    </div>\\n                </div>\\n                \\n                <div class=\"food-items-grid\">\\n                    ').concat(this.renderFoodItemsGrid(items), \"\\n                </div>\\n            </div>\\n        \");\n    }\n    /**\r\n     * Render individual food items grid\r\n     * @param {Array} items - Food items to render\r\n     * @returns {string} HTML for food items grid\r\n     */ renderFoodItemsGrid(items) {\n        if (items.length === 0) {\n            return '<div class=\"no-items\">No food items found</div>';\n        }\n        return items.map((item)=>{\n            const inventoryItem = this.inventoryManager.getItem(item.id);\n            const quantity = inventoryItem ? inventoryItem.quantity : 0;\n            const nutritionalValue = item.nutritionalValue || {};\n            const effects = item.effects || [];\n            return '\\n                <div class=\"food-item-card\" data-item-id=\"'.concat(item.id, '\">\\n                    <div class=\"item-header\">\\n                        <span class=\"item-icon\">').concat(item.icon, '</span>\\n                        <span class=\"item-name\">').concat(item.displayName, '</span>\\n                        <span class=\"item-quantity\">').concat(quantity, '</span>\\n                    </div>\\n                    \\n                    <div class=\"item-description\">').concat(item.description, \"</div>\\n                    \\n                    \").concat(this.renderNutritionalInfo(nutritionalValue), \"\\n                    \\n                    \").concat(this.renderEffects(effects), '\\n                    \\n                    <div class=\"item-actions\">\\n                        <button class=\"examine-btn\" data-item-id=\"').concat(item.id, '\">Examine</button>\\n                        ').concat(quantity > 0 ? '<button class=\"consume-btn\" data-item-id=\"'.concat(item.id, '\">Consume</button>') : '', \"\\n                    </div>\\n                </div>\\n            \");\n        }).join('');\n    }\n    /**\r\n     * Render nutritional information\r\n     * @param {Object} nutritionalValue - Nutritional values\r\n     * @returns {string} HTML for nutritional info\r\n     */ renderNutritionalInfo(nutritionalValue) {\n        if (!nutritionalValue.calories && !nutritionalValue.protein) {\n            return '';\n        }\n        return '\\n            <div class=\"nutritional-info\">\\n                <div class=\"nutrition-item\">\\n                    <span class=\"nutrition-label\">Calories:</span>\\n                    <span class=\"nutrition-value\">'.concat(nutritionalValue.calories || 0, '</span>\\n                </div>\\n                <div class=\"nutrition-item\">\\n                    <span class=\"nutrition-label\">Protein:</span>\\n                    <span class=\"nutrition-value\">').concat(nutritionalValue.protein || 0, 'g</span>\\n                </div>\\n                <div class=\"nutrition-item\">\\n                    <span class=\"nutrition-label\">Carbs:</span>\\n                    <span class=\"nutrition-value\">').concat(nutritionalValue.carbs || 0, 'g</span>\\n                </div>\\n                <div class=\"nutrition-item\">\\n                    <span class=\"nutrition-label\">Fat:</span>\\n                    <span class=\"nutrition-value\">').concat(nutritionalValue.fat || 0, 'g</span>\\n                </div>\\n                <div class=\"nutrition-item\">\\n                    <span class=\"nutrition-label\">Fiber:</span>\\n                    <span class=\"nutrition-value\">').concat(nutritionalValue.fiber || 0, \"g</span>\\n                </div>\\n            </div>\\n        \");\n    }\n    /**\r\n     * Render item effects\r\n     * @param {Array} effects - Item effects\r\n     * @returns {string} HTML for effects\r\n     */ renderEffects(effects) {\n        if (effects.length === 0) {\n            return '';\n        }\n        return '\\n            <div class=\"item-effects\">\\n                '.concat(effects.map((effect)=>'\\n                    <div class=\"effect-item effect-'.concat(effect.type, '\">\\n                        <span class=\"effect-icon\">').concat(this.getEffectIcon(effect.type), '</span>\\n                        <span class=\"effect-description\">').concat(effect.description, \"</span>\\n                        \").concat(effect.duration > 0 ? '<span class=\"effect-duration\">('.concat(effect.duration, \"s)</span>\") : '', \"\\n                    </div>\\n                \")).join(''), \"\\n            </div>\\n        \");\n    }\n    /**\r\n     * Render nutritional summary\r\n     * @returns {string} HTML for nutritional summary\r\n     */ renderNutritionalSummary() {\n        const inventoryItems = this.inventoryManager.getAllItems();\n        const foodItems = inventoryItems.filter((item)=>item.gameObject.type === 'food' && item.quantity > 0);\n        if (foodItems.length === 0) {\n            return '<div class=\"nutritional-summary-empty\">No food items in inventory</div>';\n        }\n        const totalNutrition = this.foodCategoryManager.calculateNutritionalValue(foodItems.map((item)=>({\n                ...item.gameObject,\n                quantity: item.quantity\n            })));\n        return '\\n            <div class=\"nutritional-summary-content\">\\n                <h4>\\uD83D\\uDCCA Total Nutrition (Inventory)</h4>\\n                <div class=\"nutrition-summary-grid\">\\n                    <div class=\"nutrition-summary-item\">\\n                        <span class=\"summary-label\">Calories:</span>\\n                        <span class=\"summary-value\">'.concat(totalNutrition.calories, '</span>\\n                    </div>\\n                    <div class=\"nutrition-summary-item\">\\n                        <span class=\"summary-label\">Protein:</span>\\n                        <span class=\"summary-value\">').concat(totalNutrition.protein, 'g</span>\\n                    </div>\\n                    <div class=\"nutrition-summary-item\">\\n                        <span class=\"summary-label\">Carbs:</span>\\n                        <span class=\"summary-value\">').concat(totalNutrition.carbs, 'g</span>\\n                    </div>\\n                    <div class=\"nutrition-summary-item\">\\n                        <span class=\"summary-label\">Fat:</span>\\n                        <span class=\"summary-value\">').concat(totalNutrition.fat, 'g</span>\\n                    </div>\\n                    <div class=\"nutrition-summary-item\">\\n                        <span class=\"summary-label\">Fiber:</span>\\n                        <span class=\"summary-value\">').concat(totalNutrition.fiber, \"g</span>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n    }\n    /**\r\n     * Get filtered items based on current selection and search\r\n     * @returns {Array} Filtered items\r\n     */ getFilteredItems() {\n        let items = [];\n        if (this.searchQuery) {\n            items = this.foodCategoryManager.searchFoodItems(this.searchQuery);\n        } else if (this.currentCategory) {\n            if (this.currentSubcategory) {\n                items = this.foodCategoryManager.getItemsBySubcategory(this.currentSubcategory);\n            } else {\n                items = this.foodCategoryManager.getItemsByCategory(this.currentCategory);\n            }\n        }\n        return items;\n    }\n    /**\r\n     * Format subcategory name for display\r\n     * @param {string} subcategory - Subcategory ID\r\n     * @returns {string} Formatted name\r\n     */ formatSubcategoryName(subcategory) {\n        return subcategory.split('_').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n    }\n    /**\r\n     * Get effect icon\r\n     * @param {string} effectType - Effect type\r\n     * @returns {string} Effect icon\r\n     */ getEffectIcon(effectType) {\n        const icons = {\n            health: '‚ù§Ô∏è',\n            energy: '‚ö°',\n            stamina: 'üí™',\n            mana: 'üîÆ',\n            buff: '‚¨ÜÔ∏è',\n            debuff: '‚¨áÔ∏è'\n        };\n        return icons[effectType] || '‚ú®';\n    }\n    /**\r\n     * Attach event listeners\r\n     */ attachEventListeners() {\n        // Category selection\n        this.container.addEventListener('click', (e)=>{\n            if (e.target.closest('.food-category-card')) {\n                const categoryCard = e.target.closest('.food-category-card');\n                const categoryId = categoryCard.dataset.category;\n                this.selectCategory(categoryId);\n            }\n            if (e.target.closest('.subcategory-btn')) {\n                const subcategoryBtn = e.target.closest('.subcategory-btn');\n                const subcategory = subcategoryBtn.dataset.subcategory;\n                this.selectSubcategory(subcategory);\n            }\n            if (e.target.closest('.examine-btn')) {\n                const examineBtn = e.target.closest('.examine-btn');\n                const itemId = examineBtn.dataset.itemId;\n                this.examineItem(itemId);\n            }\n            if (e.target.closest('.consume-btn')) {\n                const consumeBtn = e.target.closest('.consume-btn');\n                const itemId = consumeBtn.dataset.itemId;\n                this.consumeItem(itemId);\n            }\n        });\n        // Search functionality\n        const searchInput = this.container.querySelector('#food-search-input');\n        const searchBtn = this.container.querySelector('#food-search-btn');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e)=>{\n                this.searchQuery = e.target.value;\n                this.render();\n            });\n            searchInput.addEventListener('keypress', (e)=>{\n                if (e.key === 'Enter') {\n                    this.performSearch();\n                }\n            });\n        }\n        if (searchBtn) {\n            searchBtn.addEventListener('click', ()=>{\n                this.performSearch();\n            });\n        }\n    }\n    /**\r\n     * Select a category\r\n     * @param {string} categoryId - Category ID\r\n     */ selectCategory(categoryId) {\n        this.currentCategory = categoryId;\n        this.currentSubcategory = null;\n        this.render();\n    }\n    /**\r\n     * Select a subcategory\r\n     * @param {string} subcategoryId - Subcategory ID\r\n     */ selectSubcategory(subcategoryId) {\n        this.currentSubcategory = subcategoryId || null;\n        this.render();\n    }\n    /**\r\n     * Perform search\r\n     */ performSearch() {\n        this.currentCategory = null;\n        this.currentSubcategory = null;\n        this.render();\n    }\n    /**\r\n     * Examine an item\r\n     * @param {string} itemId - Item ID\r\n     */ examineItem(itemId) {\n        const gameObject = this.inventoryManager.getGameObject(itemId);\n        if (gameObject) {\n            // Trigger examine event or show modal\n            console.log(\"Examining: \".concat(gameObject.displayName));\n            console.log(\"Description: \".concat(gameObject.examineText));\n            // You can implement a modal or notification system here\n            if (typeof showToast === 'function') {\n                showToast(\"Examining \".concat(gameObject.displayName, \": \").concat(gameObject.examineText), 'info');\n            }\n        }\n    }\n    /**\r\n     * Consume an item\r\n     * @param {string} itemId - Item ID\r\n     */ consumeItem(itemId) {\n        const gameObject = this.inventoryManager.getGameObject(itemId);\n        if (gameObject && gameObject.type === 'food') {\n            // Remove item from inventory\n            if (this.inventoryManager.removeItem(itemId, 1)) {\n                // Apply effects\n                if (gameObject.effects) {\n                    for (const effect of gameObject.effects){\n                        this.applyEffect(effect);\n                    }\n                }\n                // Show feedback\n                if (typeof showToast === 'function') {\n                    showToast(\"Consumed \".concat(gameObject.displayName), 'success');\n                }\n                // Re-render to update quantities\n                this.render();\n            }\n        }\n    }\n    /**\r\n     * Apply an effect\r\n     * @param {Object} effect - Effect to apply\r\n     */ applyEffect(effect) {\n        // This would integrate with your game's effect system\n        console.log(\"Applying effect: \".concat(effect.type, \" - \").concat(effect.value, \" - \").concat(effect.description));\n        // Example integration with game systems\n        if (typeof gameEngine !== 'undefined' && gameEngine.stateManager) {\n        // Apply effect to player state\n        // This is a placeholder - implement based on your game's state system\n        }\n    }\n    /**\r\n     * Update the display\r\n     */ update() {\n        this.render();\n    }\n    constructor(foodCategoryManager, inventoryManager){\n        this.foodCategoryManager = foodCategoryManager;\n        this.inventoryManager = inventoryManager;\n        this.currentCategory = null;\n        this.currentSubcategory = null;\n        this.searchQuery = '';\n    }\n}\nif (true) window.FoodCategoryUI = FoodCategoryUI;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/ui/FoodCategoryUI.js\n"));

/***/ })

}]);