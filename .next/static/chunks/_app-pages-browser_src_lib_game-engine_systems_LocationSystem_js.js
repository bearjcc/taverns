"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_systems_LocationSystem_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/systems/LocationSystem.js":
/*!*******************************************************!*\
  !*** ./src/lib/game-engine/systems/LocationSystem.js ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocationSystem: () => (/* binding */ LocationSystem)\n/* harmony export */ });\n/**\r\n * Location System\r\n * \r\n * Manages the hierarchical location structure:\r\n * Globe → Continents → Countries → Regions → Spots\r\n * \r\n * Handles player location tracking and spot-based action availability.\r\n */ class LocationSystem {\n    /**\r\n     * Initialize the location system\r\n     */ async initialize() {\n        try {\n            console.log('Initializing LocationSystem...');\n            // Load saved location state\n            this._loadLocationState();\n            // Set default location if none exists\n            if (!this.currentLocation.spot) {\n                this._setDefaultLocation();\n            }\n            // Build spot actions cache\n            this._buildSpotActionsCache();\n            console.log('LocationSystem initialized successfully');\n            this.eventSystem.emit('location:initialized', this.currentLocation);\n        } catch (error) {\n            console.error('Error initializing LocationSystem:', error);\n            throw error;\n        }\n    }\n    /**\r\n     * Get current player location\r\n     * @returns {Object} Current location object\r\n     */ getCurrentLocation() {\n        return {\n            ...this.currentLocation\n        };\n    }\n    /**\r\n     * Get current spot\r\n     * @returns {Object|null} Current spot data\r\n     */ getCurrentSpot() {\n        if (!this.currentLocation.spot) return null;\n        const spotPath = this._buildSpotPath();\n        return this._getSpotByPath(spotPath);\n    }\n    /**\r\n     * Get available actions for current spot\r\n     * @returns {Array} Array of available action names\r\n     */ getAvailableActions() {\n        const currentSpot = this.getCurrentSpot();\n        if (!currentSpot || !currentSpot.actions) {\n            return [];\n        }\n        return [\n            ...currentSpot.actions\n        ];\n    }\n    /**\r\n     * Move player to a new spot\r\n     * @param {string} spotId - The spot ID to move to\r\n     * @returns {boolean} Success status\r\n     */ moveToSpot(spotId) {\n        try {\n            const newSpot = this._findSpotById(spotId);\n            if (!newSpot) {\n                console.error(\"Spot not found: \".concat(spotId));\n                return false;\n            }\n            // Update current location\n            const oldLocation = {\n                ...this.currentLocation\n            };\n            this._updateLocationFromSpot(newSpot);\n            // Save state\n            this._saveLocationState();\n            // Emit location change event\n            this.eventSystem.emit('location:changed', {\n                from: oldLocation,\n                to: this.currentLocation,\n                spot: newSpot\n            });\n            // Emit location visited event for achievement tracking\n            this.eventSystem.emit('location:visited', {\n                locationId: spotId,\n                locationName: newSpot.name,\n                locationPath: this._buildSpotPath()\n            });\n            console.log(\"Moved to spot: \".concat(spotId));\n            return true;\n        } catch (error) {\n            console.error('Error moving to spot:', error);\n            return false;\n        }\n    }\n    /**\r\n     * Get all available spots from current location\r\n     * @returns {Array} Array of available spots\r\n     */ getAvailableSpots() {\n        const currentSpot = this.getCurrentSpot();\n        if (!currentSpot || !currentSpot.connections) {\n            return [];\n        }\n        return currentSpot.connections.map((connection)=>{\n            const connectedSpot = this._findSpotById(connection.spotId);\n            return {\n                id: connection.spotId,\n                name: (connectedSpot === null || connectedSpot === void 0 ? void 0 : connectedSpot.name) || connection.spotId,\n                description: (connectedSpot === null || connectedSpot === void 0 ? void 0 : connectedSpot.description) || '',\n                travelTime: connection.travelTime || 0,\n                travelCost: connection.travelCost || {},\n                requirements: connection.requirements || {}\n            };\n        });\n    }\n    /**\r\n     * Get location hierarchy for a specific path\r\n     * @param {string} path - Location path (e.g., \"globe.continent.country\")\r\n     * @returns {Object} Location hierarchy data\r\n     */ getLocationHierarchy() {\n        let path = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        if (!path) {\n            return this._getFullHierarchy();\n        }\n        const pathParts = path.split('.');\n        let current = this.locationData;\n        for (const part of pathParts){\n            if (current && current[part]) {\n                current = current[part];\n            } else {\n                return null;\n            }\n        }\n        return current;\n    }\n    /**\r\n     * Get spot by full path\r\n     * @param {string} spotPath - Full spot path\r\n     * @returns {Object|null} Spot data\r\n     */ getSpotByPath(spotPath) {\n        return this._getSpotByPath(spotPath);\n    }\n    /**\r\n     * Check if player can travel to a spot\r\n     * @param {string} spotId - Target spot ID\r\n     * @param {Object} playerState - Current player state (skills, inventory, etc.)\r\n     * @returns {Object} Travel check result\r\n     */ canTravelToSpot(spotId, playerState) {\n        const currentSpot = this.getCurrentSpot();\n        if (!currentSpot || !currentSpot.connections) {\n            return {\n                canTravel: false,\n                reason: 'No connections available'\n            };\n        }\n        const connection = currentSpot.connections.find((conn)=>conn.spotId === spotId);\n        if (!connection) {\n            return {\n                canTravel: false,\n                reason: 'Spot not connected'\n            };\n        }\n        // Check requirements\n        if (connection.requirements) {\n            const requirementCheck = this._checkRequirements(connection.requirements, playerState);\n            if (!requirementCheck.met) {\n                return {\n                    canTravel: false,\n                    reason: requirementCheck.reason\n                };\n            }\n        }\n        // Check travel costs\n        if (connection.travelCost) {\n            const costCheck = this._checkTravelCost(connection.travelCost, playerState);\n            if (!costCheck.canAfford) {\n                return {\n                    canTravel: false,\n                    reason: costCheck.reason\n                };\n            }\n        }\n        return {\n            canTravel: true\n        };\n    }\n    // Private methods\n    _buildLocationHierarchy() {\n        this.locationHierarchy.clear();\n        for (const [globeId, globeData] of Object.entries(this.locationData)){\n            this.locationHierarchy.set(globeId, {\n                type: 'globe',\n                data: globeData,\n                children: new Map()\n            });\n            if (globeData.continents) {\n                for (const [continentId, continentData] of Object.entries(globeData.continents)){\n                    this.locationHierarchy.get(globeId).children.set(continentId, {\n                        type: 'continent',\n                        data: continentData,\n                        children: new Map()\n                    });\n                    if (continentData.countries) {\n                        for (const [countryId, countryData] of Object.entries(continentData.countries)){\n                            this.locationHierarchy.get(globeId).children.get(continentId).children.set(countryId, {\n                                type: 'country',\n                                data: countryData,\n                                children: new Map()\n                            });\n                            if (countryData.regions) {\n                                for (const [regionId, regionData] of Object.entries(countryData.regions)){\n                                    this.locationHierarchy.get(globeId).children.get(continentId).children.get(countryId).children.set(regionId, {\n                                        type: 'region',\n                                        data: regionData,\n                                        children: new Map()\n                                    });\n                                    if (regionData.spots) {\n                                        for (const [spotId, spotData] of Object.entries(regionData.spots)){\n                                            this.locationHierarchy.get(globeId).children.get(continentId).children.get(countryId).children.get(regionId).children.set(spotId, {\n                                                type: 'spot',\n                                                data: spotData\n                                            });\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    _buildSpotActionsCache() {\n        this.spotActions.clear();\n        // Traverse all spots and cache their actions\n        for (const [globeId, globeData] of Object.entries(this.locationData)){\n            if (globeData.continents) {\n                for (const [continentId, continentData] of Object.entries(globeData.continents)){\n                    if (continentData.countries) {\n                        for (const [countryId, countryData] of Object.entries(continentData.countries)){\n                            if (countryData.regions) {\n                                for (const [regionId, regionData] of Object.entries(countryData.regions)){\n                                    if (regionData.spots) {\n                                        for (const [spotId, spotData] of Object.entries(regionData.spots)){\n                                            const spotPath = \"\".concat(globeId, \".\").concat(continentId, \".\").concat(countryId, \".\").concat(regionId, \".\").concat(spotId);\n                                            this.spotActions.set(spotPath, spotData.actions || []);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    _loadLocationState() {\n        const savedLocation = this.stateManager.getState('location');\n        if (savedLocation) {\n            this.currentLocation = {\n                ...savedLocation\n            };\n        }\n    }\n    _saveLocationState() {\n        this.stateManager.setState('location', this.currentLocation);\n    }\n    _setDefaultLocation() {\n        // Find the first available spot as default\n        for (const [globeId, globeData] of Object.entries(this.locationData)){\n            if (globeData.continents) {\n                for (const [continentId, continentData] of Object.entries(globeData.continents)){\n                    if (continentData.countries) {\n                        for (const [countryId, countryData] of Object.entries(continentData.countries)){\n                            if (countryData.regions) {\n                                for (const [regionId, regionData] of Object.entries(countryData.regions)){\n                                    if (regionData.spots) {\n                                        for (const [spotId, spotData] of Object.entries(regionData.spots)){\n                                            this.currentLocation = {\n                                                globe: globeId,\n                                                continent: continentId,\n                                                country: countryId,\n                                                region: regionId,\n                                                spot: spotId\n                                            };\n                                            return;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    _updateLocationFromSpot(spotData) {\n        var _spotData_path;\n        // Extract location hierarchy from spot data\n        const pathParts = ((_spotData_path = spotData.path) === null || _spotData_path === void 0 ? void 0 : _spotData_path.split('.')) || [];\n        if (pathParts.length >= 5) {\n            this.currentLocation = {\n                globe: pathParts[0],\n                continent: pathParts[1],\n                country: pathParts[2],\n                region: pathParts[3],\n                spot: pathParts[4]\n            };\n        }\n    }\n    _buildSpotPath() {\n        const { globe, continent, country, region, spot } = this.currentLocation;\n        return \"\".concat(globe, \".\").concat(continent, \".\").concat(country, \".\").concat(region, \".\").concat(spot);\n    }\n    _getSpotByPath(spotPath) {\n        const pathParts = spotPath.split('.');\n        if (pathParts.length !== 5) return null;\n        const [globeId, continentId, countryId, regionId, spotId] = pathParts;\n        try {\n            var _this_locationData_globeId_continents_continentId_countries_countryId_regions_regionId, _this_locationData_globeId_continents_continentId_countries_countryId, _this_locationData_globeId_continents_continentId, _this_locationData_globeId;\n            return ((_this_locationData_globeId = this.locationData[globeId]) === null || _this_locationData_globeId === void 0 ? void 0 : (_this_locationData_globeId_continents_continentId = _this_locationData_globeId.continents[continentId]) === null || _this_locationData_globeId_continents_continentId === void 0 ? void 0 : (_this_locationData_globeId_continents_continentId_countries_countryId = _this_locationData_globeId_continents_continentId.countries[countryId]) === null || _this_locationData_globeId_continents_continentId_countries_countryId === void 0 ? void 0 : (_this_locationData_globeId_continents_continentId_countries_countryId_regions_regionId = _this_locationData_globeId_continents_continentId_countries_countryId.regions[regionId]) === null || _this_locationData_globeId_continents_continentId_countries_countryId_regions_regionId === void 0 ? void 0 : _this_locationData_globeId_continents_continentId_countries_countryId_regions_regionId.spots[spotId]) || null;\n        } catch (error) {\n            return null;\n        }\n    }\n    _findSpotById(spotId) {\n        // Search through all spots to find by ID\n        for (const [globeId, globeData] of Object.entries(this.locationData)){\n            if (globeData.continents) {\n                for (const [continentId, continentData] of Object.entries(globeData.continents)){\n                    if (continentData.countries) {\n                        for (const [countryId, countryData] of Object.entries(continentData.countries)){\n                            if (countryData.regions) {\n                                for (const [regionId, regionData] of Object.entries(countryData.regions)){\n                                    if (regionData.spots) {\n                                        for (const [id, spotData] of Object.entries(regionData.spots)){\n                                            if (id === spotId) {\n                                                return {\n                                                    ...spotData,\n                                                    path: \"\".concat(globeId, \".\").concat(continentId, \".\").concat(countryId, \".\").concat(regionId, \".\").concat(id)\n                                                };\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    _getFullHierarchy() {\n        return this.locationData;\n    }\n    _checkRequirements(requirements, playerState) {\n        // Check skill requirements\n        if (requirements.skills) {\n            for (const [skillName, requiredLevel] of Object.entries(requirements.skills)){\n                var _playerState_skills;\n                const playerSkill = (_playerState_skills = playerState.skills) === null || _playerState_skills === void 0 ? void 0 : _playerState_skills[skillName];\n                if (!playerSkill || playerSkill.level < requiredLevel) {\n                    return {\n                        met: false,\n                        reason: \"Requires \".concat(skillName, \" level \").concat(requiredLevel)\n                    };\n                }\n            }\n        }\n        // Check item requirements\n        if (requirements.items) {\n            for (const [itemId, requiredQuantity] of Object.entries(requirements.items)){\n                var _playerState_inventory;\n                const playerItem = (_playerState_inventory = playerState.inventory) === null || _playerState_inventory === void 0 ? void 0 : _playerState_inventory[itemId];\n                if (!playerItem || playerItem.quantity < requiredQuantity) {\n                    return {\n                        met: false,\n                        reason: \"Requires \".concat(itemId, \" x\").concat(requiredQuantity)\n                    };\n                }\n            }\n        }\n        return {\n            met: true\n        };\n    }\n    _checkTravelCost(travelCost, playerState) {\n        // Check item costs\n        if (travelCost.items) {\n            for (const [itemId, requiredQuantity] of Object.entries(travelCost.items)){\n                var _playerState_inventory;\n                const playerItem = (_playerState_inventory = playerState.inventory) === null || _playerState_inventory === void 0 ? void 0 : _playerState_inventory[itemId];\n                if (!playerItem || playerItem.quantity < requiredQuantity) {\n                    return {\n                        canAfford: false,\n                        reason: \"Need \".concat(itemId, \" x\").concat(requiredQuantity)\n                    };\n                }\n            }\n        }\n        return {\n            canAfford: true\n        };\n    }\n    constructor(locationData, stateManager, eventSystem){\n        this.locationData = locationData || {};\n        this.stateManager = stateManager;\n        this.eventSystem = eventSystem;\n        // Current player location\n        this.currentLocation = {\n            globe: null,\n            continent: null,\n            country: null,\n            region: null,\n            spot: null\n        };\n        // Location hierarchy cache\n        this.locationHierarchy = new Map();\n        // Spot actions cache\n        this.spotActions = new Map();\n        this._buildLocationHierarchy();\n    }\n}\nif (true) window.LocationSystem = LocationSystem;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/systems/LocationSystem.js\n"));

/***/ })

}]);