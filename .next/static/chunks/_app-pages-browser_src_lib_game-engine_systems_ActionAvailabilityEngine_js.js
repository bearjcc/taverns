"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_systems_ActionAvailabilityEngine_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/systems/ActionAvailabilityEngine.js":
/*!*****************************************************************!*\
  !*** ./src/lib/game-engine/systems/ActionAvailabilityEngine.js ***!
  \*****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionAvailabilityEngine: () => (/* binding */ ActionAvailabilityEngine)\n/* harmony export */ });\n/**\r\n * Action Availability Engine\r\n * \r\n * Handles dynamic action availability based on various conditions:\r\n * - Location-based availability\r\n * - Time-of-day restrictions\r\n * - Weather/environmental modifiers\r\n * - Quest-based unlocks\r\n * - NPC interaction requirements\r\n * - Action cooldowns\r\n * - Prerequisites and dependencies\r\n * - Player status (health, energy, etc.)\r\n * - Equipment and tool requirements\r\n */ class ActionAvailabilityEngine {\n    /**\r\n     * Initialize default availability rules\r\n     */ _initializeDefaultRules() {\n        // Location-based rules\n        this.addRule('location', (action, context)=>{\n            const { currentLocation, locationSystem } = context;\n            if (!action.locationRestrictions) return true;\n            return action.locationRestrictions.some((restriction)=>{\n                return this._checkLocationRestriction(restriction, currentLocation, locationSystem);\n            });\n        });\n        // Time-based rules\n        this.addRule('time', (action, context)=>{\n            if (!action.timeRestrictions) return true;\n            return action.timeRestrictions.every((restriction)=>{\n                return this._checkTimeRestriction(restriction, this.gameTime);\n            });\n        });\n        // Weather-based rules\n        this.addRule('weather', (action, context)=>{\n            if (!action.weatherRestrictions) return true;\n            return action.weatherRestrictions.every((restriction)=>{\n                return this._checkWeatherRestriction(restriction, this.weather);\n            });\n        });\n        // Player status rules\n        this.addRule('playerStatus', (action, context)=>{\n            if (!action.playerStatusRequirements) return true;\n            return this._checkPlayerStatusRequirements(action.playerStatusRequirements, this.playerStatus);\n        });\n        // Equipment rules\n        this.addRule('equipment', (action, context)=>{\n            if (!action.equipmentRequirements) return true;\n            const { inventoryManager } = context;\n            return this._checkEquipmentRequirements(action.equipmentRequirements, inventoryManager);\n        });\n        // Cooldown rules\n        this.addRule('cooldown', (action, context)=>{\n            if (!action.cooldown) return true;\n            return this._checkCooldown(action.name, action.cooldown);\n        });\n        // Quest rules\n        this.addRule('quest', (action, context)=>{\n            if (!action.questRequirements) return true;\n            const { questSystem } = context;\n            return this._checkQuestRequirements(action.questRequirements, questSystem);\n        });\n        // NPC interaction rules\n        this.addRule('npc', (action, context)=>{\n            if (!action.npcRequirements) return true;\n            const { npcSystem } = context;\n            return this._checkNPCRequirements(action.npcRequirements, npcSystem);\n        });\n    }\n    /**\r\n     * Setup event listeners for dynamic updates\r\n     */ _setupEventListeners() {\n        if (this.eventSystem) {\n            this.eventSystem.on('time:update', (data)=>{\n                this.gameTime = {\n                    ...this.gameTime,\n                    ...data\n                };\n                this._notifyAvailabilityChange();\n            });\n            this.eventSystem.on('weather:change', (data)=>{\n                this.weather = {\n                    ...this.weather,\n                    ...data\n                };\n                this._notifyAvailabilityChange();\n            });\n            this.eventSystem.on('player:status:update', (data)=>{\n                this.playerStatus = {\n                    ...this.playerStatus,\n                    ...data\n                };\n                this._notifyAvailabilityChange();\n            });\n            this.eventSystem.on('location:change', (data)=>{\n                this._notifyAvailabilityChange();\n            });\n            this.eventSystem.on('quest:update', (data)=>{\n                this._notifyAvailabilityChange();\n            });\n            this.eventSystem.on('npc:interaction', (data)=>{\n                this._notifyAvailabilityChange();\n            });\n        }\n    }\n    /**\r\n     * Add a custom availability rule\r\n     * @param {string} ruleName - Name of the rule\r\n     * @param {Function} ruleFunction - Function that returns boolean\r\n     */ addRule(ruleName, ruleFunction) {\n        this.availabilityRules.set(ruleName, ruleFunction);\n    }\n    /**\r\n     * Check if an action is available given the current context\r\n     * @param {Object} action - The action to check\r\n     * @param {Object} context - Current game context\r\n     * @returns {Object} Availability result with details\r\n     */ checkActionAvailability(action, context) {\n        const result = {\n            available: true,\n            reasons: [],\n            missingRequirements: []\n        };\n        // Check each rule\n        for (const [ruleName, ruleFunction] of this.availabilityRules){\n            try {\n                const ruleResult = ruleFunction(action, context);\n                if (typeof ruleResult === 'boolean') {\n                    if (!ruleResult) {\n                        result.available = false;\n                        result.reasons.push(\"Failed \".concat(ruleName, \" check\"));\n                    }\n                } else if (ruleResult && typeof ruleResult === 'object') {\n                    if (!ruleResult.available) {\n                        result.available = false;\n                        result.reasons.push(ruleResult.reason || \"Failed \".concat(ruleName, \" check\"));\n                        if (ruleResult.missingRequirements) {\n                            result.missingRequirements.push(...ruleResult.missingRequirements);\n                        }\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error checking \".concat(ruleName, \" rule for action \").concat(action.name, \":\"), error);\n                result.available = false;\n                result.reasons.push(\"Error in \".concat(ruleName, \" check\"));\n            }\n        }\n        return result;\n    }\n    /**\r\n     * Check location restriction\r\n     * @param {Object} restriction - Location restriction object\r\n     * @param {Object} currentLocation - Current player location\r\n     * @param {Object} locationSystem - Location system instance\r\n     * @returns {boolean} Whether location requirement is met\r\n     */ _checkLocationRestriction(restriction, currentLocation, locationSystem) {\n        if (!currentLocation || !locationSystem) return false;\n        switch(restriction.type){\n            case 'spot':\n                return currentLocation.spot === restriction.spotId;\n            case 'region':\n                return currentLocation.region === restriction.regionId;\n            case 'country':\n                return currentLocation.country === restriction.countryId;\n            case 'continent':\n                return currentLocation.continent === restriction.continentId;\n            case 'globe':\n                return currentLocation.globe === restriction.globeId;\n            case 'biome':\n                const currentSpot = locationSystem.getCurrentSpot();\n                return currentSpot && currentSpot.biome === restriction.biomeType;\n            default:\n                return false;\n        }\n    }\n    /**\r\n     * Check time restriction\r\n     * @param {Object} restriction - Time restriction object\r\n     * @param {Object} gameTime - Current game time\r\n     * @returns {boolean} Whether time requirement is met\r\n     */ _checkTimeRestriction(restriction, gameTime) {\n        switch(restriction.type){\n            case 'hour':\n                return gameTime.hour >= restriction.min && gameTime.hour <= restriction.max;\n            case 'day':\n                return gameTime.day >= restriction.min && gameTime.day <= restriction.max;\n            case 'season':\n                return restriction.seasons.includes(gameTime.season);\n            case 'timeOfDay':\n                const hour = gameTime.hour;\n                switch(restriction.timeOfDay){\n                    case 'dawn':\n                        return hour >= 5 && hour < 8;\n                    case 'morning':\n                        return hour >= 8 && hour < 12;\n                    case 'afternoon':\n                        return hour >= 12 && hour < 17;\n                    case 'evening':\n                        return hour >= 17 && hour < 20;\n                    case 'night':\n                        return hour >= 20 || hour < 5;\n                    default:\n                        return false;\n                }\n            default:\n                return false;\n        }\n    }\n    /**\r\n     * Check weather restriction\r\n     * @param {Object} restriction - Weather restriction object\r\n     * @param {Object} weather - Current weather\r\n     * @returns {boolean} Whether weather requirement is met\r\n     */ _checkWeatherRestriction(restriction, weather) {\n        switch(restriction.type){\n            case 'weatherType':\n                return restriction.allowedTypes.includes(weather.type);\n            case 'temperature':\n                return weather.temperature >= restriction.min && weather.temperature <= restriction.max;\n            case 'intensity':\n                return weather.intensity >= restriction.min && weather.intensity <= restriction.max;\n            default:\n                return false;\n        }\n    }\n    /**\r\n     * Check player status requirements\r\n     * @param {Object} requirements - Player status requirements\r\n     * @param {Object} playerStatus - Current player status\r\n     * @returns {Object} Check result with details\r\n     */ _checkPlayerStatusRequirements(requirements, playerStatus) {\n        const result = {\n            available: true,\n            missingRequirements: []\n        };\n        for (const [stat, requirement] of Object.entries(requirements)){\n            const currentValue = playerStatus[stat];\n            if (currentValue === undefined) continue;\n            if (requirement.min !== undefined && currentValue < requirement.min) {\n                result.available = false;\n                result.missingRequirements.push(\"\".concat(stat, \" >= \").concat(requirement.min, \" (current: \").concat(currentValue, \")\"));\n            }\n            if (requirement.max !== undefined && currentValue > requirement.max) {\n                result.available = false;\n                result.missingRequirements.push(\"\".concat(stat, \" <= \").concat(requirement.max, \" (current: \").concat(currentValue, \")\"));\n            }\n        }\n        return result;\n    }\n    /**\r\n     * Check equipment requirements\r\n     * @param {Object} requirements - Equipment requirements\r\n     * @param {Object} inventoryManager - Inventory manager instance\r\n     * @returns {Object} Check result with details\r\n     */ _checkEquipmentRequirements(requirements, inventoryManager) {\n        const result = {\n            available: true,\n            missingRequirements: []\n        };\n        for (const [itemId, requirement] of Object.entries(requirements)){\n            const hasItem = inventoryManager && inventoryManager.hasItem(itemId, requirement.quantity || 1);\n            if (!hasItem) {\n                var _inventoryManager_getGameObject;\n                result.available = false;\n                const itemName = inventoryManager ? ((_inventoryManager_getGameObject = inventoryManager.getGameObject(itemId)) === null || _inventoryManager_getGameObject === void 0 ? void 0 : _inventoryManager_getGameObject.displayName) || itemId : itemId;\n                result.missingRequirements.push(\"\".concat(itemName, \" (\").concat(requirement.quantity || 1, \")\"));\n            }\n        }\n        return result;\n    }\n    /**\r\n     * Check cooldown for an action\r\n     * @param {string} actionName - Name of the action\r\n     * @param {number} cooldownTime - Cooldown time in milliseconds\r\n     * @returns {boolean} Whether cooldown has expired\r\n     */ _checkCooldown(actionName, cooldownTime) {\n        const lastUsed = this.actionCooldowns.get(actionName);\n        if (!lastUsed) return true;\n        const timeSinceLastUse = Date.now() - lastUsed;\n        return timeSinceLastUse >= cooldownTime;\n    }\n    /**\r\n     * Check quest requirements\r\n     * @param {Object} requirements - Quest requirements\r\n     * @param {Object} questSystem - Quest system instance\r\n     * @returns {boolean} Whether quest requirements are met\r\n     */ _checkQuestRequirements(requirements, questSystem) {\n        if (!questSystem) return true;\n        for (const requirement of requirements){\n            switch(requirement.type){\n                case 'questCompleted':\n                    if (!questSystem.isQuestCompleted(requirement.questId)) {\n                        return false;\n                    }\n                    break;\n                case 'questActive':\n                    if (!questSystem.isQuestActive(requirement.questId)) {\n                        return false;\n                    }\n                    break;\n                case 'questStage':\n                    if (!questSystem.isQuestAtStage(requirement.questId, requirement.stage)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n        }\n        return true;\n    }\n    /**\r\n     * Check NPC requirements\r\n     * @param {Object} requirements - NPC requirements\r\n     * @param {Object} npcSystem - NPC system instance\r\n     * @returns {boolean} Whether NPC requirements are met\r\n     */ _checkNPCRequirements(requirements, npcSystem) {\n        if (!npcSystem) return true;\n        for (const requirement of requirements){\n            switch(requirement.type){\n                case 'npcPresent':\n                    if (!npcSystem.isNPCPresent(requirement.npcId)) {\n                        return false;\n                    }\n                    break;\n                case 'npcRelationship':\n                    const relationship = npcSystem.getNPCRelationship(requirement.npcId);\n                    if (relationship < requirement.minRelationship) {\n                        return false;\n                    }\n                    break;\n                case 'npcQuest':\n                    if (!npcSystem.hasNPCQuest(requirement.npcId, requirement.questId)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n        }\n        return true;\n    }\n    /**\r\n     * Record action usage for cooldown tracking\r\n     * @param {string} actionName - Name of the action used\r\n     */ recordActionUsage(actionName) {\n        this.actionCooldowns.set(actionName, Date.now());\n    }\n    /**\r\n     * Get remaining cooldown time for an action\r\n     * @param {string} actionName - Name of the action\r\n     * @param {number} cooldownTime - Cooldown time in milliseconds\r\n     * @returns {number} Remaining cooldown time in milliseconds\r\n     */ getRemainingCooldown(actionName, cooldownTime) {\n        const lastUsed = this.actionCooldowns.get(actionName);\n        if (!lastUsed) return 0;\n        const timeSinceLastUse = Date.now() - lastUsed;\n        const remaining = cooldownTime - timeSinceLastUse;\n        return Math.max(0, remaining);\n    }\n    /**\r\n     * Update game time\r\n     * @param {Object} timeData - New time data\r\n     */ updateGameTime(timeData) {\n        this.gameTime = {\n            ...this.gameTime,\n            ...timeData\n        };\n        if (this.eventSystem) {\n            this.eventSystem.emit('time:update', timeData);\n        }\n    }\n    /**\r\n     * Update weather\r\n     * @param {Object} weatherData - New weather data\r\n     */ updateWeather(weatherData) {\n        this.weather = {\n            ...this.weather,\n            ...weatherData\n        };\n        if (this.eventSystem) {\n            this.eventSystem.emit('weather:change', weatherData);\n        }\n    }\n    /**\r\n     * Update player status\r\n     * @param {Object} statusData - New status data\r\n     */ updatePlayerStatus(statusData) {\n        this.playerStatus = {\n            ...this.playerStatus,\n            ...statusData\n        };\n        if (this.eventSystem) {\n            this.eventSystem.emit('player:status:update', statusData);\n        }\n    }\n    /**\r\n     * Notify systems of availability changes\r\n     */ _notifyAvailabilityChange() {\n        if (this.eventSystem) {\n            this.eventSystem.emit('action:availability:changed', {\n                gameTime: this.gameTime,\n                weather: this.weather,\n                playerStatus: this.playerStatus\n            });\n        }\n    }\n    /**\r\n     * Get current game state for debugging\r\n     * @returns {Object} Current state information\r\n     */ getDebugInfo() {\n        return {\n            gameTime: this.gameTime,\n            weather: this.weather,\n            playerStatus: this.playerStatus,\n            activeCooldowns: Array.from(this.actionCooldowns.entries()).map((param)=>{\n                let [action, timestamp] = param;\n                return {\n                    action,\n                    lastUsed: new Date(timestamp).toISOString(),\n                    timeSince: Date.now() - timestamp\n                };\n            }),\n            ruleCount: this.availabilityRules.size\n        };\n    }\n    constructor(eventSystem, stateManager){\n        this.eventSystem = eventSystem;\n        this.stateManager = stateManager;\n        // Rules registry\n        this.availabilityRules = new Map();\n        // Cooldown tracking\n        this.actionCooldowns = new Map();\n        // Time tracking\n        this.gameTime = {\n            hour: 12,\n            minute: 0,\n            day: 1,\n            season: 'spring'\n        };\n        // Weather system\n        this.weather = {\n            type: 'clear',\n            intensity: 0,\n            temperature: 20\n        };\n        // Player status\n        this.playerStatus = {\n            health: 100,\n            energy: 100,\n            hunger: 0,\n            thirst: 0,\n            temperature: 20\n        };\n        this._initializeDefaultRules();\n        this._setupEventListeners();\n    }\n}\nif (true) window.ActionAvailabilityEngine = ActionAvailabilityEngine;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/systems/ActionAvailabilityEngine.js\n"));

/***/ })

}]);