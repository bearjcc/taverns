"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_game-engine_ui_EncyclopediaUI_js"],{

/***/ "(app-pages-browser)/./src/lib/game-engine/ui/EncyclopediaUI.js":
/*!**************************************************!*\
  !*** ./src/lib/game-engine/ui/EncyclopediaUI.js ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncyclopediaUI: () => (/* binding */ EncyclopediaUI)\n/* harmony export */ });\n/**\r\n * Encyclopedia UI - Handles all encyclopedia user interface components\r\n * Provides search, browsing, and detailed entry viewing functionality\r\n */ class EncyclopediaUI {\n    /**\r\n   * Initialize the encyclopedia UI\r\n   */ initialize() {\n        this.createEncyclopediaContainer();\n        this.bindEvents();\n        this.showMainView();\n    }\n    /**\r\n   * Create the main encyclopedia container\r\n   */ createEncyclopediaContainer() {\n        // Create main container\n        const container = document.createElement('div');\n        container.id = 'encyclopedia-container';\n        container.className = 'encyclopedia-container';\n        container.style.display = 'none';\n        // Create header\n        const header = document.createElement('div');\n        header.className = 'encyclopedia-header';\n        header.innerHTML = '\\n      <div class=\"encyclopedia-title\">\\n        <span class=\"encyclopedia-icon\">\\uD83D\\uDCDA</span>\\n        <h2>Encyclopedia</h2>\\n      </div>\\n      <div class=\"encyclopedia-controls\">\\n        <button class=\"encyclopedia-back-btn\" id=\"encyclopedia-back-btn\" title=\"Back\">‚Üê</button>\\n        <button class=\"encyclopedia-home-btn\" id=\"encyclopedia-home-btn\" title=\"Home\">\\uD83C\\uDFE0</button>\\n      </div>\\n    ';\n        // Create search bar\n        const searchContainer = document.createElement('div');\n        searchContainer.className = 'encyclopedia-search';\n        searchContainer.innerHTML = '\\n      <input type=\"text\" id=\"encyclopedia-search-input\" placeholder=\"Search encyclopedia...\" class=\"encyclopedia-search-input\">\\n      <button id=\"encyclopedia-search-btn\" class=\"encyclopedia-search-btn\">\\uD83D\\uDD0D</button>\\n    ';\n        // Create content area\n        const content = document.createElement('div');\n        content.id = 'encyclopedia-content';\n        content.className = 'encyclopedia-content';\n        // Create navigation\n        const navigation = document.createElement('div');\n        navigation.id = 'encyclopedia-navigation';\n        navigation.className = 'encyclopedia-navigation';\n        // Create breadcrumb\n        const breadcrumb = document.createElement('div');\n        breadcrumb.id = 'encyclopedia-breadcrumb';\n        breadcrumb.className = 'encyclopedia-breadcrumb';\n        // Assemble container\n        container.appendChild(header);\n        container.appendChild(searchContainer);\n        container.appendChild(breadcrumb);\n        container.appendChild(navigation);\n        container.appendChild(content);\n        // Add to page\n        document.body.appendChild(container);\n    }\n    /**\r\n   * Bind event listeners\r\n   */ bindEvents() {\n        // Search functionality\n        const searchInput = document.getElementById('encyclopedia-search-input');\n        const searchBtn = document.getElementById('encyclopedia-search-btn');\n        searchInput.addEventListener('input', (e)=>{\n            this.searchQuery = e.target.value;\n            clearTimeout(this.searchTimeout);\n            this.searchTimeout = setTimeout(()=>{\n                this.performSearch();\n            }, 300);\n        });\n        searchBtn.addEventListener('click', ()=>{\n            this.performSearch();\n        });\n        // Navigation buttons\n        document.getElementById('encyclopedia-back-btn').addEventListener('click', ()=>{\n            this.goBack();\n        });\n        document.getElementById('encyclopedia-home-btn').addEventListener('click', ()=>{\n            this.showMainView();\n        });\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e)=>{\n            if (e.key === 'Escape' && this.isVisible()) {\n                this.hide();\n            }\n        });\n    }\n    /**\r\n   * Show the encyclopedia\r\n   */ show() {\n        const container = document.getElementById('encyclopedia-container');\n        container.style.display = 'block';\n        container.classList.add('encyclopedia-visible');\n    }\n    /**\r\n   * Hide the encyclopedia\r\n   */ hide() {\n        const container = document.getElementById('encyclopedia-container');\n        container.style.display = 'none';\n        container.classList.remove('encyclopedia-visible');\n    }\n    /**\r\n   * Check if encyclopedia is visible\r\n   * @returns {boolean} True if visible\r\n   */ isVisible() {\n        const container = document.getElementById('encyclopedia-container');\n        return container.style.display === 'block';\n    }\n    /**\r\n   * Show main encyclopedia view\r\n   */ showMainView() {\n        this.currentEntry = null;\n        this.currentCategory = null;\n        this.updateBreadcrumb([\n            'Encyclopedia'\n        ]);\n        this.showCategories();\n    }\n    /**\r\n   * Show categories view\r\n   */ showCategories() {\n        const navigation = document.getElementById('encyclopedia-navigation');\n        const content = document.getElementById('encyclopedia-content');\n        const categories = this.encyclopedia.getCategories();\n        // Create categories grid\n        const categoriesHTML = categories.map((category)=>'\\n      <div class=\"encyclopedia-category-card\" data-category=\"'.concat(category.name, '\">\\n        <div class=\"encyclopedia-category-icon\">').concat(category.icon, '</div>\\n        <div class=\"encyclopedia-category-info\">\\n          <h3 class=\"encyclopedia-category-name\">').concat(category.name, '</h3>\\n          <p class=\"encyclopedia-category-description\">').concat(category.description, '</p>\\n          <span class=\"encyclopedia-category-count\">').concat(category.entries.length, \" entries</span>\\n        </div>\\n      </div>\\n    \")).join('');\n        navigation.innerHTML = '\\n      <div class=\"encyclopedia-categories-grid\">\\n        '.concat(categoriesHTML, \"\\n      </div>\\n    \");\n        content.innerHTML = '\\n      <div class=\"encyclopedia-welcome\">\\n        <h2>Welcome to the Encyclopedia</h2>\\n        <p>Explore the vast knowledge of Taverns and Treasures. Use the search bar above or browse by category to discover skills, items, species, and more.</p>\\n        <div class=\"encyclopedia-stats\">\\n          <div class=\"encyclopedia-stat\">\\n            <span class=\"encyclopedia-stat-number\">'.concat(this.encyclopedia.getStatistics().totalEntries, '</span>\\n            <span class=\"encyclopedia-stat-label\">Total Entries</span>\\n          </div>\\n          <div class=\"encyclopedia-stat\">\\n            <span class=\"encyclopedia-stat-number\">').concat(this.encyclopedia.getStatistics().categories, '</span>\\n            <span class=\"encyclopedia-stat-label\">Categories</span>\\n          </div>\\n        </div>\\n      </div>\\n    ');\n        // Bind category click events\n        const categoryCards = navigation.querySelectorAll('.encyclopedia-category-card');\n        categoryCards.forEach((card)=>{\n            card.addEventListener('click', ()=>{\n                const categoryName = card.dataset.category;\n                this.showCategory(categoryName);\n            });\n        });\n    }\n    /**\r\n   * Show entries for a specific category\r\n   * @param {string} categoryName - Category name\r\n   */ showCategory(categoryName) {\n        var _this_encyclopedia_categories_get;\n        this.currentCategory = categoryName;\n        this.updateBreadcrumb([\n            'Encyclopedia',\n            categoryName\n        ]);\n        const entries = this.encyclopedia.getEntriesByCategory(categoryName);\n        const navigation = document.getElementById('encyclopedia-navigation');\n        const content = document.getElementById('encyclopedia-content');\n        // Group entries by subcategory if available\n        const groupedEntries = this.groupEntriesBySubcategory(entries);\n        let entriesHTML = '';\n        for (const [subcategory, subcategoryEntries] of Object.entries(groupedEntries)){\n            if (subcategory !== 'default') {\n                entriesHTML += '<h3 class=\"encyclopedia-subcategory\">'.concat(subcategory, \"</h3>\");\n            }\n            const subcategoryHTML = subcategoryEntries.map((entry)=>'\\n        <div class=\"encyclopedia-entry-card\" data-entry-id=\"'.concat(entry.id, '\">\\n          <div class=\"encyclopedia-entry-icon\">').concat(entry.icon || 'üìÑ', '</div>\\n          <div class=\"encyclopedia-entry-info\">\\n            <h4 class=\"encyclopedia-entry-name\">').concat(entry.name, '</h4>\\n            <p class=\"encyclopedia-entry-description\">').concat(entry.description, '</p>\\n            <div class=\"encyclopedia-entry-tags\">\\n              ').concat(entry.tags.map((tag)=>'<span class=\"encyclopedia-tag\">'.concat(tag, \"</span>\")).join(''), \"\\n            </div>\\n          </div>\\n        </div>\\n      \")).join('');\n            entriesHTML += '<div class=\"encyclopedia-entries-grid\">'.concat(subcategoryHTML, \"</div>\");\n        }\n        navigation.innerHTML = '\\n      <div class=\"encyclopedia-category-header\">\\n        <button class=\"encyclopedia-back-to-categories\">‚Üê Back to Categories</button>\\n        <h2>'.concat(categoryName, '</h2>\\n        <span class=\"encyclopedia-entry-count\">').concat(entries.length, ' entries</span>\\n      </div>\\n      <div class=\"encyclopedia-entries-container\">\\n        ').concat(entriesHTML, \"\\n      </div>\\n    \");\n        content.innerHTML = '\\n      <div class=\"encyclopedia-category-info\">\\n        <h3>About '.concat(categoryName, \"</h3>\\n        <p>\").concat(((_this_encyclopedia_categories_get = this.encyclopedia.categories.get(categoryName)) === null || _this_encyclopedia_categories_get === void 0 ? void 0 : _this_encyclopedia_categories_get.description) || 'No description available.', \"</p>\\n      </div>\\n    \");\n        // Bind events\n        navigation.querySelector('.encyclopedia-back-to-categories').addEventListener('click', ()=>{\n            this.showCategories();\n        });\n        const entryCards = navigation.querySelectorAll('.encyclopedia-entry-card');\n        entryCards.forEach((card)=>{\n            card.addEventListener('click', ()=>{\n                const entryId = card.dataset.entryId;\n                this.showEntry(entryId);\n            });\n        });\n    }\n    /**\r\n   * Show detailed entry view\r\n   * @param {string} entryId - Entry ID\r\n   */ showEntry(entryId) {\n        const entry = this.encyclopedia.getEntry(entryId);\n        if (!entry) return;\n        this.addToHistory(entryId);\n        this.currentEntry = entry;\n        this.updateBreadcrumb([\n            'Encyclopedia',\n            entry.category,\n            entry.name\n        ]);\n        const navigation = document.getElementById('encyclopedia-navigation');\n        const content = document.getElementById('encyclopedia-content');\n        // Create entry details\n        const entryHTML = this.createEntryHTML(entry);\n        navigation.innerHTML = '\\n      <div class=\"encyclopedia-entry-header\">\\n        <button class=\"encyclopedia-back-to-category\">‚Üê Back to '.concat(entry.category, '</button>\\n        <div class=\"encyclopedia-entry-title\">\\n          <span class=\"encyclopedia-entry-icon\">').concat(entry.icon || 'üìÑ', \"</span>\\n          <h2>\").concat(entry.name, \"</h2>\\n        </div>\\n      </div>\\n    \");\n        content.innerHTML = entryHTML;\n        // Bind events\n        navigation.querySelector('.encyclopedia-back-to-category').addEventListener('click', ()=>{\n            this.showCategory(entry.category);\n        });\n        // Bind cross-reference clicks\n        const crossRefLinks = content.querySelectorAll('.encyclopedia-crossref-link');\n        crossRefLinks.forEach((link)=>{\n            link.addEventListener('click', (e)=>{\n                e.preventDefault();\n                const targetId = link.dataset.target;\n                this.showEntry(targetId);\n            });\n        });\n    }\n    /**\r\n   * Create HTML for entry details\r\n   * @param {Object} entry - Entry data\r\n   * @returns {string} HTML string\r\n   */ createEntryHTML(entry) {\n        let html = '\\n      <div class=\"encyclopedia-entry-details\">\\n        <div class=\"encyclopedia-entry-main\">\\n          <div class=\"encyclopedia-entry-description-full\">\\n            <h3>Description</h3>\\n            <p>'.concat(entry.description, \"</p>\\n          </div>\\n    \");\n        // Add examine text for items\n        if (entry.examineText && entry.examineText !== entry.description) {\n            html += '\\n        <div class=\"encyclopedia-entry-examine\">\\n          <h3>Examine</h3>\\n          <p>'.concat(entry.examineText, \"</p>\\n        </div>\\n      \");\n        }\n        // Add requirements for skills\n        if (entry.requirements) {\n            html += '\\n        <div class=\"encyclopedia-entry-requirements\">\\n          <h3>Requirements</h3>\\n          <p>Requires '.concat(entry.requirements.skill, \" level \").concat(entry.requirements.level, \"</p>\\n        </div>\\n      \");\n        }\n        // Add detailed data based on type\n        if (entry.type === 'item') {\n            html += this.createItemDetailsHTML(entry);\n        } else if (entry.type === 'species') {\n            html += this.createSpeciesDetailsHTML(entry);\n        } else if (entry.type === 'skill') {\n            html += this.createSkillDetailsHTML(entry);\n        }\n        // Add cross-references\n        const crossRefs = this.encyclopedia.getCrossReferences(entry.id);\n        if (crossRefs.length > 0) {\n            html += '\\n        <div class=\"encyclopedia-entry-crossrefs\">\\n          <h3>Related Entries</h3>\\n          <div class=\"encyclopedia-crossrefs-list\">\\n            '.concat(crossRefs.map((crossRef)=>'\\n              <a href=\"#\" class=\"encyclopedia-crossref-link\" data-target=\"'.concat(crossRef.target, '\">\\n                <span class=\"encyclopedia-crossref-icon\">').concat(crossRef.targetEntry.icon || 'üìÑ', '</span>\\n                <span class=\"encyclopedia-crossref-name\">').concat(crossRef.targetEntry.name, '</span>\\n                <span class=\"encyclopedia-crossref-type\">').concat(crossRef.type, \"</span>\\n              </a>\\n            \")).join(''), \"\\n          </div>\\n        </div>\\n      \");\n        }\n        html += '\\n        </div>\\n        <div class=\"encyclopedia-entry-sidebar\">\\n          <div class=\"encyclopedia-entry-meta\">\\n            <h3>Entry Information</h3>\\n            <div class=\"encyclopedia-meta-item\">\\n              <span class=\"encyclopedia-meta-label\">Type:</span>\\n              <span class=\"encyclopedia-meta-value\">'.concat(entry.type, '</span>\\n            </div>\\n            <div class=\"encyclopedia-meta-item\">\\n              <span class=\"encyclopedia-meta-label\">Category:</span>\\n              <span class=\"encyclopedia-meta-value\">').concat(entry.category, \"</span>\\n            </div>\\n            \").concat(entry.subcategory ? '\\n              <div class=\"encyclopedia-meta-item\">\\n                <span class=\"encyclopedia-meta-label\">Subcategory:</span>\\n                <span class=\"encyclopedia-meta-value\">'.concat(entry.subcategory, \"</span>\\n              </div>\\n            \") : '', '\\n            <div class=\"encyclopedia-meta-item\">\\n              <span class=\"encyclopedia-meta-label\">Tags:</span>\\n              <div class=\"encyclopedia-tags\">\\n                ').concat(entry.tags.map((tag)=>'<span class=\"encyclopedia-tag\">'.concat(tag, \"</span>\")).join(''), \"\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    \");\n        return html;\n    }\n    /**\r\n   * Create item-specific details HTML\r\n   * @param {Object} entry - Item entry\r\n   * @returns {string} HTML string\r\n   */ createItemDetailsHTML(entry) {\n        const item = entry.data;\n        let html = '<div class=\"encyclopedia-entry-item-details\">';\n        if (item.stackable !== undefined) {\n            html += '\\n        <div class=\"encyclopedia-item-property\">\\n          <span class=\"encyclopedia-property-label\">Stackable:</span>\\n          <span class=\"encyclopedia-property-value\">'.concat(item.stackable ? 'Yes' : 'No', \"</span>\\n        </div>\\n      \");\n        }\n        if (item.maxStack) {\n            html += '\\n        <div class=\"encyclopedia-item-property\">\\n          <span class=\"encyclopedia-property-label\">Max Stack:</span>\\n          <span class=\"encyclopedia-property-value\">'.concat(item.maxStack, \"</span>\\n        </div>\\n      \");\n        }\n        if (item.equipmentType) {\n            html += '\\n        <div class=\"encyclopedia-item-property\">\\n          <span class=\"encyclopedia-property-label\">Equipment Type:</span>\\n          <span class=\"encyclopedia-property-value\">'.concat(item.equipmentType, \"</span>\\n        </div>\\n      \");\n        }\n        html += '</div>';\n        return html;\n    }\n    /**\r\n   * Create species-specific details HTML\r\n   * @param {Object} entry - Species entry\r\n   * @returns {string} HTML string\r\n   */ createSpeciesDetailsHTML(entry) {\n        const species = entry.data;\n        let html = '<div class=\"encyclopedia-entry-species-details\">';\n        if (species.attributes) {\n            html += '\\n        <div class=\"encyclopedia-species-attributes\">\\n          <h3>Attributes</h3>\\n          <div class=\"encyclopedia-attributes-grid\">\\n            '.concat(Object.entries(species.attributes).map((param)=>{\n                let [attr, range] = param;\n                return '\\n              <div class=\"encyclopedia-attribute\">\\n                <span class=\"encyclopedia-attribute-name\">'.concat(attr, '</span>\\n                <span class=\"encyclopedia-attribute-range\">').concat(range.min, \"-\").concat(range.max, \"</span>\\n              </div>\\n            \");\n            }).join(''), \"\\n          </div>\\n        </div>\\n      \");\n        }\n        if (species.bonuses) {\n            html += '\\n        <div class=\"encyclopedia-species-bonuses\">\\n          <h3>Bonuses</h3>\\n          <div class=\"encyclopedia-bonuses-list\">\\n            '.concat(Object.entries(species.bonuses).map((param)=>{\n                let [bonus, value] = param;\n                return '\\n              <div class=\"encyclopedia-bonus\">\\n                <span class=\"encyclopedia-bonus-name\">'.concat(bonus, '</span>\\n                <span class=\"encyclopedia-bonus-value\">+').concat(value, \"</span>\\n              </div>\\n            \");\n            }).join(''), \"\\n          </div>\\n        </div>\\n      \");\n        }\n        if (species.professions) {\n            html += '\\n        <div class=\"encyclopedia-species-professions\">\\n          <h3>Professions</h3>\\n          <div class=\"encyclopedia-professions-list\">\\n            '.concat(species.professions.map((profession)=>'\\n              <span class=\"encyclopedia-profession\">'.concat(profession, \"</span>\\n            \")).join(''), \"\\n          </div>\\n        </div>\\n      \");\n        }\n        html += '</div>';\n        return html;\n    }\n    /**\r\n   * Create skill-specific details HTML\r\n   * @param {Object} entry - Skill entry\r\n   * @returns {string} HTML string\r\n   */ createSkillDetailsHTML(entry) {\n        const skill = entry.data;\n        let html = '<div class=\"encyclopedia-entry-skill-details\">';\n        if (skill.sub_skills) {\n            html += '\\n        <div class=\"encyclopedia-skill-subskills\">\\n          <h3>Sub-skills</h3>\\n          <div class=\"encyclopedia-subskills-list\">\\n            '.concat(Object.entries(skill.sub_skills).map((param)=>{\n                let [subSkillName, subSkillData] = param;\n                return '\\n              <div class=\"encyclopedia-subskill\">\\n                <span class=\"encyclopedia-subskill-name\">'.concat(subSkillName, '</span>\\n                <span class=\"encyclopedia-subskill-description\">').concat(subSkillData.description, \"</span>\\n              </div>\\n            \");\n            }).join(''), \"\\n          </div>\\n        </div>\\n      \");\n        }\n        html += '</div>';\n        return html;\n    }\n    /**\r\n   * Perform search\r\n   */ performSearch() {\n        if (!this.searchQuery || this.searchQuery.length < 2) {\n            this.showMainView();\n            return;\n        }\n        const results = this.encyclopedia.search(this.searchQuery);\n        this.showSearchResults(results);\n    }\n    /**\r\n   * Show search results\r\n   * @param {Array} results - Search results\r\n   */ showSearchResults(results) {\n        this.updateBreadcrumb([\n            'Encyclopedia',\n            'Search Results'\n        ]);\n        const navigation = document.getElementById('encyclopedia-navigation');\n        const content = document.getElementById('encyclopedia-content');\n        if (results.length === 0) {\n            navigation.innerHTML = '\\n        <div class=\"encyclopedia-search-header\">\\n          <button class=\"encyclopedia-back-to-main\">‚Üê Back to Encyclopedia</button>\\n          <h2>Search Results</h2>\\n        </div>\\n      ';\n            content.innerHTML = '\\n        <div class=\"encyclopedia-no-results\">\\n          <h3>No results found</h3>\\n          <p>No entries match your search for \"'.concat(this.searchQuery, '\". Try different keywords or browse by category.</p>\\n        </div>\\n      ');\n        } else {\n            const resultsHTML = results.map((entry)=>'\\n        <div class=\"encyclopedia-search-result\" data-entry-id=\"'.concat(entry.id, '\">\\n          <div class=\"encyclopedia-result-icon\">').concat(entry.icon || 'üìÑ', '</div>\\n          <div class=\"encyclopedia-result-info\">\\n            <h4 class=\"encyclopedia-result-name\">').concat(entry.name, '</h4>\\n            <p class=\"encyclopedia-result-description\">').concat(entry.description, '</p>\\n            <div class=\"encyclopedia-result-meta\">\\n              <span class=\"encyclopedia-result-category\">').concat(entry.category, \"</span>\\n              \").concat(entry.subcategory ? '<span class=\"encyclopedia-result-subcategory\">'.concat(entry.subcategory, \"</span>\") : '', \"\\n            </div>\\n          </div>\\n        </div>\\n      \")).join('');\n            navigation.innerHTML = '\\n        <div class=\"encyclopedia-search-header\">\\n          <button class=\"encyclopedia-back-to-main\">‚Üê Back to Encyclopedia</button>\\n          <h2>Search Results</h2>\\n          <span class=\"encyclopedia-result-count\">'.concat(results.length, ' results for \"').concat(this.searchQuery, '\"</span>\\n        </div>\\n        <div class=\"encyclopedia-search-results\">\\n          ').concat(resultsHTML, \"\\n        </div>\\n      \");\n        }\n        // Bind events\n        navigation.querySelector('.encyclopedia-back-to-main').addEventListener('click', ()=>{\n            this.showMainView();\n        });\n        const resultItems = navigation.querySelectorAll('.encyclopedia-search-result');\n        resultItems.forEach((item)=>{\n            item.addEventListener('click', ()=>{\n                const entryId = item.dataset.entryId;\n                this.showEntry(entryId);\n            });\n        });\n    }\n    /**\r\n   * Group entries by subcategory\r\n   * @param {Array} entries - Array of entries\r\n   * @returns {Object} Grouped entries\r\n   */ groupEntriesBySubcategory(entries) {\n        const grouped = {};\n        entries.forEach((entry)=>{\n            const subcategory = entry.subcategory || 'default';\n            if (!grouped[subcategory]) {\n                grouped[subcategory] = [];\n            }\n            grouped[subcategory].push(entry);\n        });\n        // Sort entries within each subcategory\n        Object.values(grouped).forEach((entries)=>{\n            entries.sort((a, b)=>a.name.localeCompare(b.name));\n        });\n        return grouped;\n    }\n    /**\r\n   * Update breadcrumb navigation\r\n   * @param {Array} breadcrumbs - Array of breadcrumb items\r\n   */ updateBreadcrumb(breadcrumbs) {\n        const breadcrumb = document.getElementById('encyclopedia-breadcrumb');\n        breadcrumb.innerHTML = breadcrumbs.map((crumb, index)=>{\n            if (index === breadcrumbs.length - 1) {\n                return '<span class=\"encyclopedia-breadcrumb-current\">'.concat(crumb, \"</span>\");\n            } else {\n                return '<span class=\"encyclopedia-breadcrumb-item\">'.concat(crumb, \"</span>\");\n            }\n        }).join(' <span class=\"encyclopedia-breadcrumb-separator\">/</span> ');\n    }\n    /**\r\n   * Add entry to navigation history\r\n   * @param {string} entryId - Entry ID\r\n   */ addToHistory(entryId) {\n        // Remove any entries after current index\n        this.history = this.history.slice(0, this.historyIndex + 1);\n        // Add new entry\n        this.history.push(entryId);\n        this.historyIndex = this.history.length - 1;\n    }\n    /**\r\n   * Go back in history\r\n   */ goBack() {\n        if (this.historyIndex > 0) {\n            this.historyIndex--;\n            const entryId = this.history[this.historyIndex];\n            this.showEntry(entryId);\n        } else {\n            this.showMainView();\n        }\n    }\n    constructor(encyclopediaSystem){\n        this.encyclopedia = encyclopediaSystem;\n        this.currentEntry = null;\n        this.searchQuery = '';\n        this.currentCategory = null;\n        this.searchTimeout = null;\n        this.history = [];\n        this.historyIndex = -1;\n    }\n}\nif (true) window.EncyclopediaUI = EncyclopediaUI;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/ui/EncyclopediaUI.js\n"));

/***/ })

}]);