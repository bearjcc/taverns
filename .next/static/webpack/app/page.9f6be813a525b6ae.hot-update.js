"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/game-engine/core/GameEngine.js":
/*!************************************************!*\
  !*** ./src/lib/game-engine/core/GameEngine.js ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameEngine: () => (/* binding */ GameEngine)\n/* harmony export */ });\n/* harmony import */ var _GameStateManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameStateManager.js */ \"(app-pages-browser)/./src/lib/game-engine/core/GameStateManager.js\");\n/* harmony import */ var _EventSystem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/core/EventSystem.js\");\n/* harmony import */ var _AssetLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AssetLoader.js */ \"(app-pages-browser)/./src/lib/game-engine/core/AssetLoader.js\");\n/* harmony import */ var _ConfigManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConfigManager.js */ \"(app-pages-browser)/./src/lib/game-engine/core/ConfigManager.js\");\n/* harmony import */ var _utils_Localization_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Localization.js */ \"(app-pages-browser)/./src/lib/game-engine/utils/Localization.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Core Game Engine\r\n * \r\n * This is the main engine class that orchestrates all game systems.\r\n * It maintains clean separation between engine logic and game data,\r\n * allowing the same engine to run different games with different data sets.\r\n */ // Import core systems\n\n\n\n\n\nclass GameEngine {\n    /**\r\n     * Initialize the game with a specific mod/data set\r\n     * @param {string} modId - The mod to load (e.g., 'base-game', 'fantasy-mod')\r\n     * @param {Object} options - Additional initialization options\r\n     */ async initialize(modId) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            console.log(\"Initializing game engine with mod: \".concat(modId));\n            // Load mod data\n            this.currentMod = await this._loadMod(modId);\n            this.gameData = this.currentMod.data;\n            // Initialize game systems with mod data\n            await this._initializeGameSystems();\n            // Set up cross-system references\n            this._setupSystemReferences();\n            // Set up event listeners\n            this._setupEventListeners();\n            // Load saved state if requested\n            if (options.loadSavedState !== false) {\n                this.stateManager.loadGameState(this.skillManager, this.inventoryManager, this.traitManager);\n            }\n            // Start auto-save\n            this._startAutoSave();\n            this.isRunning = true;\n            console.log('Game engine initialized successfully');\n            // Emit initialization complete event\n            this.eventSystem.emit('engine:initialized', {\n                modId,\n                gameData: this.gameData\n            });\n        } catch (error) {\n            console.error('Failed to initialize game engine:', error);\n            throw error;\n        }\n    }\n    /**\r\n     * Start the game\r\n     */ start() {\n        if (!this.isRunning) {\n            throw new Error('Game engine must be initialized before starting');\n        }\n        console.log('Starting game engine');\n        this.eventSystem.emit('engine:started');\n    }\n    /**\r\n     * Pause the game\r\n     */ pause() {\n        console.log('Pausing game engine');\n        this.eventSystem.emit('engine:paused');\n    }\n    /**\r\n     * Resume the game\r\n     */ resume() {\n        console.log('Resuming game engine');\n        this.eventSystem.emit('engine:resumed');\n    }\n    /**\r\n     * Stop the game and clean up\r\n     */ stop() {\n        console.log('Stopping game engine');\n        // Stop auto-save\n        this._stopAutoSave();\n        // Save final state\n        this.stateManager.save();\n        // Clean up event listeners\n        this._cleanupEventListeners();\n        this.isRunning = false;\n        this.eventSystem.emit('engine:stopped');\n    }\n    /**\r\n     * Switch to a different mod/game\r\n     * @param {string} modId - The new mod to load\r\n     */ async switchMod(modId) {\n        console.log(\"Switching to mod: \".concat(modId));\n        // Stop current game\n        this.stop();\n        // Initialize with new mod\n        await this.initialize(modId);\n        // Start new game\n        this.start();\n    }\n    /**\r\n     * Get a system by name\r\n     * @param {string} systemName - The name of the system to get\r\n     * @returns {Object} The system instance\r\n     */ getSystem(systemName) {\n        const systems = {\n            events: this.eventSystem,\n            state: this.stateManager,\n            config: this.configManager,\n            assets: this.assetLoader,\n            mods: this.modManager,\n            skills: this.skillManager,\n            inventory: this.inventoryManager,\n            traits: this.traitManager,\n            actions: this.actionManager,\n            species: this.speciesSystem,\n            locations: this.locationSystem,\n            achievements: this.achievementSystem,\n            encyclopedia: this.encyclopediaSystem,\n            ui: this.uiManager\n        };\n        return systems[systemName] || null;\n    }\n    /**\r\n     * Get current game data\r\n     * @returns {Object} Current game data\r\n     */ getGameData() {\n        return this.gameData;\n    }\n    /**\r\n     * Get current mod information\r\n     * @returns {Object} Current mod data\r\n     */ getCurrentMod() {\n        return this.currentMod;\n    }\n    // Private methods\n    _initializeCoreSystems() {\n        // Initialize core systems\n        this.stateManager = new _GameStateManager_js__WEBPACK_IMPORTED_MODULE_0__.GameStateManager();\n        this.eventSystem = new _EventSystem_js__WEBPACK_IMPORTED_MODULE_1__.EventSystem();\n        this.assetLoader = new _AssetLoader_js__WEBPACK_IMPORTED_MODULE_2__.AssetLoader(this.config.assetCacheSize);\n        this.localization = new _utils_Localization_js__WEBPACK_IMPORTED_MODULE_4__.Localization(this.config.defaultLanguage);\n        this.configManager = new _ConfigManager_js__WEBPACK_IMPORTED_MODULE_3__.ConfigManager();\n        // Set up event listeners\n        this._setupEventListeners();\n    }\n    /**\r\n     * Initialize game systems\r\n     */ async _initializeGameSystems() {\n        console.log('Initializing game systems...');\n        // Load system modules first\n        await this._loadSystemModules();\n        // Initialize mod manager after modules are loaded\n        this.modManager = new ModManager(this.eventSystem, this.assetLoader);\n        await this.modManager.initialize();\n        // Get mod data\n        const modData = this.modManager.getAllModData();\n        // Initialize systems with mod data (only create the ones that need special initialization)\n        this.locationSystem = new LocationSystem(modData.locations || {}, this.stateManager, this.eventSystem);\n        this.achievementSystem = new AchievementSystem(modData.achievements || {}, this.stateManager, this.eventSystem);\n        this.encyclopediaSystem = new EncyclopediaSystem(modData, this.eventSystem);\n        // Initialize systems (only call initialize if the method exists)\n        if (this.skillManager.initialize) await this.skillManager.initialize();\n        if (this.inventoryManager.initialize) await this.inventoryManager.initialize();\n        if (this.traitManager.initialize) await this.traitManager.initialize();\n        if (this.actionManager.initialize) await this.actionManager.initialize();\n        if (this.locationSystem.initialize) await this.locationSystem.initialize();\n        if (this.achievementSystem.initialize) await this.achievementSystem.initialize();\n        if (this.encyclopediaSystem.initialize) await this.encyclopediaSystem.initialize();\n        if (this.uiManager.initialize) await this.uiManager.initialize();\n        // Load configurations from mod data\n        this.skillManager.loadFromConfig(modData.skills || {}, modData.config || {});\n        this.inventoryManager.loadFromConfig(modData.items || {});\n        this.traitManager.loadFromConfig(modData.traits || {});\n        this.actionManager.loadFromConfig(modData.actions || {});\n        // Set up cross-system references\n        this._setupSystemReferences();\n        console.log('Game systems initialized');\n    }\n    /**\r\n     * Load all required system modules dynamically\r\n     */ async _loadSystemModules() {\n        // In Next.js environment, modules are imported directly\n        // No need for dynamic loading since we're using ES modules\n        console.log('System modules loaded via ES imports');\n        try {\n            // Import all system modules\n            const { SkillManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_SkillManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/SkillManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/SkillManager.js\"));\n            const { InventoryManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_InventoryManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/InventoryManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/InventoryManager.js\"));\n            const { TraitManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_TraitManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/TraitManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/TraitManager.js\"));\n            const { ActionAvailabilityEngine } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_ActionAvailabilityEngine_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/ActionAvailabilityEngine.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/ActionAvailabilityEngine.js\"));\n            const { ActionManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_ActionManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/ActionManager.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/ActionManager.js\"));\n            const { SpeciesSystem } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_SpeciesSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/SpeciesSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/SpeciesSystem.js\"));\n            const { LocationSystem: LocationSystem1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_LocationSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/LocationSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/LocationSystem.js\"));\n            const { AchievementSystem: AchievementSystem1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_AchievementSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/AchievementSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/AchievementSystem.js\"));\n            const { EncyclopediaSystem: EncyclopediaSystem1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_systems_EncyclopediaSystem_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../systems/EncyclopediaSystem.js */ \"(app-pages-browser)/./src/lib/game-engine/systems/EncyclopediaSystem.js\"));\n            const { UIManager } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_ui_UIManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../ui/UIManager.js */ \"(app-pages-browser)/./src/lib/game-engine/ui/UIManager.js\"));\n            const { EncyclopediaUI } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_ui_EncyclopediaUI_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../ui/EncyclopediaUI.js */ \"(app-pages-browser)/./src/lib/game-engine/ui/EncyclopediaUI.js\"));\n            const { FoodCategoryUI } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_ui_FoodCategoryUI_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../ui/FoodCategoryUI.js */ \"(app-pages-browser)/./src/lib/game-engine/ui/FoodCategoryUI.js\"));\n            const { ModManager: ModManager1 } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_game-engine_core_ModManager_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./ModManager.js */ \"(app-pages-browser)/./src/lib/game-engine/core/ModManager.js\"));\n            // Initialize managers with imported classes\n            this.skillManager = new SkillManager();\n            this.inventoryManager = new InventoryManager();\n            this.traitManager = new TraitManager();\n            this.actionAvailabilityEngine = new ActionAvailabilityEngine();\n            this.actionManager = new ActionManager();\n            this.speciesSystem = new SpeciesSystem();\n            this.locationSystem = new LocationSystem1();\n            this.achievementSystem = new AchievementSystem1();\n            this.encyclopediaSystem = new EncyclopediaSystem1();\n            this.uiManager = new UIManager();\n            this.encyclopediaUI = new EncyclopediaUI();\n            this.foodCategoryUI = new FoodCategoryUI();\n            this.modManager = new ModManager1();\n            console.log('Successfully loaded all system modules');\n        } catch (error) {\n            console.error('Failed to load system modules:', error);\n            throw error;\n        }\n    }\n    /**\r\n     * Set up cross-system references\r\n     */ _setupSystemReferences() {\n        // Set up cross-system references\n        if (this.actionManager && this.locationSystem) {\n            this.actionManager.setLocationSystem(this.locationSystem);\n        }\n        if (this.skillManager && this.inventoryManager) {\n            this.skillManager.setInventorySystem(this.inventoryManager);\n        }\n        if (this.actionManager && this.skillManager) {\n            this.actionManager.setSkillSystem(this.skillManager);\n        }\n        if (this.actionManager && this.inventoryManager) {\n            this.actionManager.setInventorySystem(this.inventoryManager);\n        }\n        // Set up quest and NPC system references (placeholder for future systems)\n        if (this.actionManager) {\n        // TODO: Add actual quest and NPC systems when implemented\n        // this.actionManager.setQuestSystem(this.questSystem);\n        // this.actionManager.setNPCSystem(this.npcSystem);\n        }\n        if (this.achievementSystem && this.skillManager) {\n            this.achievementSystem.setSkillSystem(this.skillManager);\n        }\n        if (this.achievementSystem && this.inventoryManager) {\n            this.achievementSystem.setInventorySystem(this.inventoryManager);\n        }\n        // Set up manager references\n        if (this.skillManager && this.configManager) {\n            this.skillManager.setConfigManager(this.configManager);\n        }\n        if (this.skillManager && this.uiManager) {\n            this.skillManager.setUIManager(this.uiManager);\n        }\n        if (this.skillManager && this.eventSystem) {\n            this.skillManager.setEventSystem(this.eventSystem);\n        }\n        if (this.actionManager && this.configManager) {\n            this.actionManager.setConfigManager(this.configManager);\n        }\n        if (this.actionManager && this.uiManager) {\n            this.actionManager.setUIManager(this.uiManager);\n        }\n        if (this.inventoryManager && this.configManager) {\n            this.inventoryManager.setConfigManager(this.configManager);\n        }\n        if (this.inventoryManager && this.uiManager) {\n            this.inventoryManager.setUIManager(this.uiManager);\n        }\n        if (this.inventoryManager && this.eventSystem) {\n            this.inventoryManager.setEventSystem(this.eventSystem);\n        }\n        if (this.traitManager && this.configManager) {\n            this.traitManager.setConfigManager(this.configManager);\n        }\n        if (this.traitManager && this.uiManager) {\n            this.traitManager.setUIManager(this.uiManager);\n        }\n    }\n    async _loadMod(modId) {\n        // For now, just return the base game data\n        // In the future, this could load different mods\n        return {\n            id: modId,\n            manifest: {\n                name: 'Base Game',\n                version: '1.0.0'\n            },\n            data: {}\n        };\n    }\n    async _loadItemsData() {\n        try {\n            const response = await fetch('data/items.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load items data:', error);\n            return {};\n        }\n    }\n    async _loadSpeciesData() {\n        try {\n            const response = await fetch('data/species.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load species data:', error);\n            return {};\n        }\n    }\n    async _loadLocationsData() {\n        try {\n            const response = await fetch('data/locations.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load locations data:', error);\n            return {};\n        }\n    }\n    async _loadAchievementsData() {\n        try {\n            const response = await fetch('data/achievements.json');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to load achievements data:', error);\n            return {};\n        }\n    }\n    _setupEventListeners() {\n        // Set up global event listeners\n        this.eventSystem.on('state:changed', ()=>{\n            this.stateManager.save();\n        });\n        this.eventSystem.on('error', (error)=>{\n            console.error('Game engine error:', error);\n        });\n        // Set up location change events\n        this.eventSystem.on('location:changed', (data)=>{\n            console.log('Location changed:', data);\n            // Emit event for UI updates\n            this.eventSystem.emit('ui:locationChanged', data);\n        });\n    }\n    _cleanupEventListeners() {\n        // Clean up event listeners\n        this.eventSystem.removeAllListeners();\n    }\n    _startAutoSave() {\n        this.autoSaveInterval = setInterval(()=>{\n            this.stateManager.save();\n        }, this.config.autoSaveInterval);\n    }\n    _stopAutoSave() {\n        if (this.autoSaveInterval) {\n            clearInterval(this.autoSaveInterval);\n            this.autoSaveInterval = null;\n        }\n    }\n    constructor(config = {}){\n        this.config = {\n            autoSaveInterval: 120000,\n            defaultLanguage: 'en',\n            assetCacheSize: 100,\n            ...config\n        };\n        // Core systems\n        this.stateManager = null;\n        this.eventSystem = null;\n        this.assetLoader = null;\n        this.localization = null;\n        this.configManager = null;\n        // Game systems\n        this.skillManager = null;\n        this.inventoryManager = null;\n        this.speciesSystem = null;\n        this.actionManager = null;\n        this.achievementSystem = null;\n        this.locationSystem = null;\n        this.encyclopediaSystem = null;\n        this.traitManager = null;\n        this.uiManager = null;\n        // Game state\n        this.isRunning = false;\n        this.currentMod = null;\n        this.gameData = null;\n        // Initialize core systems\n        this._initializeCoreSystems();\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = GameEngine;\n}\nif (true) window.GameEngine = GameEngine;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/core/GameEngine.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/game-engine/utils/Localization.js":
/*!***************************************************!*\
  !*** ./src/lib/game-engine/utils/Localization.js ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Localization: () => (/* binding */ Localization)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/**\r\n * Localization System\r\n * \r\n * Handles multiple languages and provides fallback mechanisms\r\n * for missing translations.\r\n */ class Localization {\n    /**\r\n     * Set the current language\r\n     * @param {string} language - Language code (e.g., 'en', 'es', 'fr')\r\n     */ setLanguage(language) {\n        this.currentLanguage = language;\n        this.emit('language:changed', {\n            language\n        });\n    }\n    /**\r\n     * Get the current language\r\n     * @returns {string} Current language code\r\n     */ getLanguage() {\n        return this.currentLanguage;\n    }\n    /**\r\n     * Get the default language\r\n     * @returns {string} Default language code\r\n     */ getDefaultLanguage() {\n        return this.defaultLanguage;\n    }\n    /**\r\n     * Load translations for a language\r\n     * @param {string} language - Language code\r\n     * @param {Object} translations - Translation data\r\n     */ loadTranslations(language, translations) {\n        this.translations.set(language, translations);\n        this.loadedLanguages.add(language);\n        this.emit('translations:loaded', {\n            language,\n            count: Object.keys(translations).length\n        });\n    }\n    /**\r\n     * Load translations from a file\r\n     * @param {string} language - Language code\r\n     * @param {string} path - Path to translation file\r\n     */ async loadTranslationsFromFile(language, path) {\n        try {\n            const response = await fetch(path);\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const translations = await response.json();\n            this.loadTranslations(language, translations);\n            return true;\n        } catch (error) {\n            console.error(\"Failed to load translations for \".concat(language, \":\"), error);\n            this.emit('translations:loadError', {\n                language,\n                error\n            });\n            return false;\n        }\n    }\n    /**\r\n     * Get a translated string\r\n     * @param {string} key - Translation key\r\n     * @param {Object} params - Parameters for interpolation\r\n     * @param {string} language - Optional language override\r\n     * @returns {string} Translated string\r\n     */ get(key) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, language = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        const targetLanguage = language || this.currentLanguage;\n        // Try to get translation from target language\n        let translation = this._getTranslation(key, targetLanguage);\n        // If not found, try fallback chain\n        if (!translation) {\n            for (const fallbackLang of this.fallbackChain){\n                if (fallbackLang !== targetLanguage) {\n                    translation = this._getTranslation(key, fallbackLang);\n                    if (translation) break;\n                }\n            }\n        }\n        // If still not found, return the key\n        if (!translation) {\n            console.warn(\"Translation key not found: \".concat(key, \" for language: \").concat(targetLanguage));\n            return key;\n        }\n        // Interpolate parameters\n        return this._interpolate(translation, params);\n    }\n    /**\r\n     * Get a translated string with pluralization\r\n     * @param {string} key - Translation key\r\n     * @param {number} count - Count for pluralization\r\n     * @param {Object} params - Parameters for interpolation\r\n     * @param {string} language - Optional language override\r\n     * @returns {string} Translated string\r\n     */ getPlural(key, count) {\n        let params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, language = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n        const targetLanguage = language || this.currentLanguage;\n        const pluralForm = this._getPluralForm(count, targetLanguage);\n        // Try to get pluralized key\n        const pluralKey = \"\".concat(key, \"_\").concat(pluralForm);\n        let translation = this.get(pluralKey, {\n            ...params,\n            count\n        }, language);\n        // If plural key not found, try the base key\n        if (translation === pluralKey) {\n            translation = this.get(key, {\n                ...params,\n                count\n            }, language);\n        }\n        return translation;\n    }\n    /**\r\n     * Check if a translation key exists\r\n     * @param {string} key - Translation key\r\n     * @param {string} language - Optional language override\r\n     * @returns {boolean} Whether the key exists\r\n     */ has(key) {\n        let language = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        const targetLanguage = language || this.currentLanguage;\n        // Check target language\n        if (this._getTranslation(key, targetLanguage)) {\n            return true;\n        }\n        // Check fallback chain\n        for (const fallbackLang of this.fallbackChain){\n            if (fallbackLang !== targetLanguage && this._getTranslation(key, fallbackLang)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\r\n     * Get all loaded languages\r\n     * @returns {Array} Array of loaded language codes\r\n     */ getLoadedLanguages() {\n        return Array.from(this.loadedLanguages);\n    }\n    /**\r\n     * Get translation statistics\r\n     * @param {string} language - Optional language filter\r\n     * @returns {Object} Translation statistics\r\n     */ getStats() {\n        let language = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        if (language) {\n            const translations = this.translations.get(language);\n            return {\n                language,\n                keyCount: translations ? Object.keys(translations).length : 0,\n                loaded: this.loadedLanguages.has(language)\n            };\n        }\n        const stats = {};\n        for (const lang of this.loadedLanguages){\n            stats[lang] = this.getStats(lang);\n        }\n        return {\n            currentLanguage: this.currentLanguage,\n            defaultLanguage: this.defaultLanguage,\n            loadedLanguages: this.getLoadedLanguages(),\n            languages: stats\n        };\n    }\n    /**\r\n     * Add a fallback language\r\n     * @param {string} language - Language code to add to fallback chain\r\n     */ addFallbackLanguage(language) {\n        if (!this.fallbackChain.includes(language)) {\n            this.fallbackChain.push(language);\n        }\n    }\n    /**\r\n     * Remove a fallback language\r\n     * @param {string} language - Language code to remove from fallback chain\r\n     */ removeFallbackLanguage(language) {\n        const index = this.fallbackChain.indexOf(language);\n        if (index > -1) {\n            this.fallbackChain.splice(index, 1);\n        }\n    }\n    /**\r\n     * Get the fallback chain\r\n     * @returns {Array} Array of fallback languages\r\n     */ getFallbackChain() {\n        return [\n            ...this.fallbackChain\n        ];\n    }\n    /**\r\n     * Clear all translations\r\n     */ clear() {\n        this.translations.clear();\n        this.loadedLanguages.clear();\n        this.emit('translations:cleared', {});\n    }\n    /**\r\n     * Subscribe to localization events\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Callback function\r\n     */ on(event, callback) {\n        if (!this.listeners) {\n            this.listeners = new Map();\n        }\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(callback);\n    }\n    /**\r\n     * Unsubscribe from localization events\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Callback function\r\n     */ off(event, callback) {\n        if (this.listeners && this.listeners.has(event)) {\n            const callbacks = this.listeners.get(event);\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n    }\n    /**\r\n     * Emit an event to all listeners\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     */ emit(event, data) {\n        if (this.listeners && this.listeners.has(event)) {\n            this.listeners.get(event).forEach((callback)=>{\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(\"Error in localization event listener for \".concat(event, \":\"), error);\n                }\n            });\n        }\n    }\n    // Private methods\n    /**\r\n     * Get translation from a specific language\r\n     * @param {string} key - Translation key\r\n     * @param {string} language - Language code\r\n     * @returns {string|null} Translation or null if not found\r\n     */ _getTranslation(key, language) {\n        const translations = this.translations.get(language);\n        if (!translations) return null;\n        // Support nested keys with dot notation\n        const keys = key.split('.');\n        let current = translations;\n        for (const k of keys){\n            if (current && typeof current === 'object' && k in current) {\n                current = current[k];\n            } else {\n                return null;\n            }\n        }\n        return typeof current === 'string' ? current : null;\n    }\n    /**\r\n     * Interpolate parameters into a translation string\r\n     * @param {string} text - Text with placeholders\r\n     * @param {Object} params - Parameters to interpolate\r\n     * @returns {string} Interpolated text\r\n     */ _interpolate(text, params) {\n        return text.replace(/\\{(\\w+)\\}/g, (match, key)=>{\n            return params[key] !== undefined ? params[key] : match;\n        });\n    }\n    /**\r\n     * Get plural form for a count\r\n     * @param {number} count - Count\r\n     * @param {string} language - Language code\r\n     * @returns {string} Plural form\r\n     */ _getPluralForm(count, language) {\n        const rule = this.pluralRules.get(language);\n        if (!rule) return 'other';\n        return rule(count);\n    }\n    /**\r\n     * Initialize plural rules for common languages\r\n     */ _initializePluralRules() {\n        // English: 1 = one, other = other\n        this.pluralRules.set('en', (count)=>{\n            return count === 1 ? 'one' : 'other';\n        });\n        // Spanish: 1 = one, other = other\n        this.pluralRules.set('es', (count)=>{\n            return count === 1 ? 'one' : 'other';\n        });\n        // French: 0,1 = one, other = other\n        this.pluralRules.set('fr', (count)=>{\n            return count === 0 || count === 1 ? 'one' : 'other';\n        });\n        // German: 1 = one, other = other\n        this.pluralRules.set('de', (count)=>{\n            return count === 1 ? 'one' : 'other';\n        });\n        // Russian: 1 = one, 2-4 = few, 0,5-20 = other, other = other\n        this.pluralRules.set('ru', (count)=>{\n            const mod10 = count % 10;\n            const mod100 = count % 100;\n            if (mod10 === 1 && mod100 !== 11) return 'one';\n            if ([\n                2,\n                3,\n                4\n            ].includes(mod10) && ![\n                12,\n                13,\n                14\n            ].includes(mod100)) return 'few';\n            if (mod10 === 0 || [\n                5,\n                6,\n                7,\n                8,\n                9\n            ].includes(mod10) || [\n                11,\n                12,\n                13,\n                14\n            ].includes(mod100)) return 'other';\n            return 'other';\n        });\n    }\n    constructor(defaultLanguage = 'en'){\n        this.defaultLanguage = defaultLanguage;\n        this.currentLanguage = defaultLanguage;\n        this.translations = new Map();\n        this.loadedLanguages = new Set();\n        this.fallbackChain = [\n            'en',\n            'en-US',\n            'en-GB'\n        ];\n        this.pluralRules = new Map();\n        // Initialize plural rules for common languages\n        this._initializePluralRules();\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = Localization;\n}\nif (true) window.Localization = Localization;\n// ES Module exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/game-engine/utils/Localization.js\n"));

/***/ })

});