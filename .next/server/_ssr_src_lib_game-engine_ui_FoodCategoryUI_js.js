"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_game-engine_ui_FoodCategoryUI_js";
exports.ids = ["_ssr_src_lib_game-engine_ui_FoodCategoryUI_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/game-engine/ui/FoodCategoryUI.js":
/*!**************************************************!*\
  !*** ./src/lib/game-engine/ui/FoodCategoryUI.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FoodCategoryUI: () => (/* binding */ FoodCategoryUI)\n/* harmony export */ });\n/**\r\n * Food Category UI Manager\r\n * Handles the display and interaction with food categories\r\n */ class FoodCategoryUI {\n    constructor(foodCategoryManager, inventoryManager){\n        this.foodCategoryManager = foodCategoryManager;\n        this.inventoryManager = inventoryManager;\n        this.currentCategory = null;\n        this.currentSubcategory = null;\n        this.searchQuery = '';\n    }\n    /**\r\n     * Initialize the food category UI\r\n     * @param {string} containerId - ID of the container element\r\n     */ initialize(containerId) {\n        this.container = document.getElementById(containerId);\n        if (!this.container) {\n            console.error(`Container not found: ${containerId}`);\n            return;\n        }\n        this.render();\n    }\n    /**\r\n     * Render the main food category interface\r\n     */ render() {\n        this.container.innerHTML = `\n            <div class=\"food-categories-container\">\n                <div class=\"food-categories-header\">\n                    <h3>üçΩÔ∏è Food Categories</h3>\n                    <div class=\"food-search\">\n                        <input type=\"text\" id=\"food-search-input\" placeholder=\"Search food items...\" \n                               value=\"${this.searchQuery}\">\n                        <button id=\"food-search-btn\">üîç</button>\n                    </div>\n                </div>\n                \n                <div class=\"food-categories-grid\">\n                    ${this.renderCategoryGrid()}\n                </div>\n                \n                <div class=\"food-items-display\">\n                    ${this.renderFoodItems()}\n                </div>\n                \n                <div class=\"nutritional-summary\">\n                    ${this.renderNutritionalSummary()}\n                </div>\n            </div>\n        `;\n        this.attachEventListeners();\n    }\n    /**\r\n     * Render the category grid\r\n     * @returns {string} HTML for category grid\r\n     */ renderCategoryGrid() {\n        const categories = this.foodCategoryManager.getAllCategories();\n        const stats = this.foodCategoryManager.getCategoryStatistics();\n        return categories.map((category)=>{\n            const categoryStats = stats[category.id];\n            const isSelected = this.currentCategory === category.id;\n            return `\n                <div class=\"food-category-card ${isSelected ? 'selected' : ''}\" \n                     data-category=\"${category.id}\">\n                    <div class=\"category-icon\" style=\"color: ${category.color}\">\n                        ${category.icon}\n                    </div>\n                    <div class=\"category-info\">\n                        <h4>${category.displayName}</h4>\n                        <p>${category.description}</p>\n                        <span class=\"item-count\">${categoryStats.itemCount} items</span>\n                    </div>\n                </div>\n            `;\n        }).join('');\n    }\n    /**\r\n     * Render food items for the selected category\r\n     * @returns {string} HTML for food items\r\n     */ renderFoodItems() {\n        if (!this.currentCategory) {\n            return '<div class=\"no-category-selected\">Select a category to view food items</div>';\n        }\n        const category = this.foodCategoryManager.getCategory(this.currentCategory);\n        const items = this.getFilteredItems();\n        const subcategories = this.foodCategoryManager.getSubcategories(this.currentCategory);\n        return `\n            <div class=\"food-items-container\">\n                <div class=\"category-header\">\n                    <h4>${category.displayName} ${category.icon}</h4>\n                    <div class=\"subcategory-filters\">\n                        <button class=\"subcategory-btn ${!this.currentSubcategory ? 'active' : ''}\" \n                                data-subcategory=\"\">All</button>\n                        ${subcategories.map((sub)=>`\n                            <button class=\"subcategory-btn ${this.currentSubcategory === sub ? 'active' : ''}\" \n                                    data-subcategory=\"${sub}\">${this.formatSubcategoryName(sub)}</button>\n                        `).join('')}\n                    </div>\n                </div>\n                \n                <div class=\"food-items-grid\">\n                    ${this.renderFoodItemsGrid(items)}\n                </div>\n            </div>\n        `;\n    }\n    /**\r\n     * Render individual food items grid\r\n     * @param {Array} items - Food items to render\r\n     * @returns {string} HTML for food items grid\r\n     */ renderFoodItemsGrid(items) {\n        if (items.length === 0) {\n            return '<div class=\"no-items\">No food items found</div>';\n        }\n        return items.map((item)=>{\n            const inventoryItem = this.inventoryManager.getItem(item.id);\n            const quantity = inventoryItem ? inventoryItem.quantity : 0;\n            const nutritionalValue = item.nutritionalValue || {};\n            const effects = item.effects || [];\n            return `\n                <div class=\"food-item-card\" data-item-id=\"${item.id}\">\n                    <div class=\"item-header\">\n                        <span class=\"item-icon\">${item.icon}</span>\n                        <span class=\"item-name\">${item.displayName}</span>\n                        <span class=\"item-quantity\">${quantity}</span>\n                    </div>\n                    \n                    <div class=\"item-description\">${item.description}</div>\n                    \n                    ${this.renderNutritionalInfo(nutritionalValue)}\n                    \n                    ${this.renderEffects(effects)}\n                    \n                    <div class=\"item-actions\">\n                        <button class=\"examine-btn\" data-item-id=\"${item.id}\">Examine</button>\n                        ${quantity > 0 ? `<button class=\"consume-btn\" data-item-id=\"${item.id}\">Consume</button>` : ''}\n                    </div>\n                </div>\n            `;\n        }).join('');\n    }\n    /**\r\n     * Render nutritional information\r\n     * @param {Object} nutritionalValue - Nutritional values\r\n     * @returns {string} HTML for nutritional info\r\n     */ renderNutritionalInfo(nutritionalValue) {\n        if (!nutritionalValue.calories && !nutritionalValue.protein) {\n            return '';\n        }\n        return `\n            <div class=\"nutritional-info\">\n                <div class=\"nutrition-item\">\n                    <span class=\"nutrition-label\">Calories:</span>\n                    <span class=\"nutrition-value\">${nutritionalValue.calories || 0}</span>\n                </div>\n                <div class=\"nutrition-item\">\n                    <span class=\"nutrition-label\">Protein:</span>\n                    <span class=\"nutrition-value\">${nutritionalValue.protein || 0}g</span>\n                </div>\n                <div class=\"nutrition-item\">\n                    <span class=\"nutrition-label\">Carbs:</span>\n                    <span class=\"nutrition-value\">${nutritionalValue.carbs || 0}g</span>\n                </div>\n                <div class=\"nutrition-item\">\n                    <span class=\"nutrition-label\">Fat:</span>\n                    <span class=\"nutrition-value\">${nutritionalValue.fat || 0}g</span>\n                </div>\n                <div class=\"nutrition-item\">\n                    <span class=\"nutrition-label\">Fiber:</span>\n                    <span class=\"nutrition-value\">${nutritionalValue.fiber || 0}g</span>\n                </div>\n            </div>\n        `;\n    }\n    /**\r\n     * Render item effects\r\n     * @param {Array} effects - Item effects\r\n     * @returns {string} HTML for effects\r\n     */ renderEffects(effects) {\n        if (effects.length === 0) {\n            return '';\n        }\n        return `\n            <div class=\"item-effects\">\n                ${effects.map((effect)=>`\n                    <div class=\"effect-item effect-${effect.type}\">\n                        <span class=\"effect-icon\">${this.getEffectIcon(effect.type)}</span>\n                        <span class=\"effect-description\">${effect.description}</span>\n                        ${effect.duration > 0 ? `<span class=\"effect-duration\">(${effect.duration}s)</span>` : ''}\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n    /**\r\n     * Render nutritional summary\r\n     * @returns {string} HTML for nutritional summary\r\n     */ renderNutritionalSummary() {\n        const inventoryItems = this.inventoryManager.getAllItems();\n        const foodItems = inventoryItems.filter((item)=>item.gameObject.type === 'food' && item.quantity > 0);\n        if (foodItems.length === 0) {\n            return '<div class=\"nutritional-summary-empty\">No food items in inventory</div>';\n        }\n        const totalNutrition = this.foodCategoryManager.calculateNutritionalValue(foodItems.map((item)=>({\n                ...item.gameObject,\n                quantity: item.quantity\n            })));\n        return `\n            <div class=\"nutritional-summary-content\">\n                <h4>üìä Total Nutrition (Inventory)</h4>\n                <div class=\"nutrition-summary-grid\">\n                    <div class=\"nutrition-summary-item\">\n                        <span class=\"summary-label\">Calories:</span>\n                        <span class=\"summary-value\">${totalNutrition.calories}</span>\n                    </div>\n                    <div class=\"nutrition-summary-item\">\n                        <span class=\"summary-label\">Protein:</span>\n                        <span class=\"summary-value\">${totalNutrition.protein}g</span>\n                    </div>\n                    <div class=\"nutrition-summary-item\">\n                        <span class=\"summary-label\">Carbs:</span>\n                        <span class=\"summary-value\">${totalNutrition.carbs}g</span>\n                    </div>\n                    <div class=\"nutrition-summary-item\">\n                        <span class=\"summary-label\">Fat:</span>\n                        <span class=\"summary-value\">${totalNutrition.fat}g</span>\n                    </div>\n                    <div class=\"nutrition-summary-item\">\n                        <span class=\"summary-label\">Fiber:</span>\n                        <span class=\"summary-value\">${totalNutrition.fiber}g</span>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    /**\r\n     * Get filtered items based on current selection and search\r\n     * @returns {Array} Filtered items\r\n     */ getFilteredItems() {\n        let items = [];\n        if (this.searchQuery) {\n            items = this.foodCategoryManager.searchFoodItems(this.searchQuery);\n        } else if (this.currentCategory) {\n            if (this.currentSubcategory) {\n                items = this.foodCategoryManager.getItemsBySubcategory(this.currentSubcategory);\n            } else {\n                items = this.foodCategoryManager.getItemsByCategory(this.currentCategory);\n            }\n        }\n        return items;\n    }\n    /**\r\n     * Format subcategory name for display\r\n     * @param {string} subcategory - Subcategory ID\r\n     * @returns {string} Formatted name\r\n     */ formatSubcategoryName(subcategory) {\n        return subcategory.split('_').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n    }\n    /**\r\n     * Get effect icon\r\n     * @param {string} effectType - Effect type\r\n     * @returns {string} Effect icon\r\n     */ getEffectIcon(effectType) {\n        const icons = {\n            health: '‚ù§Ô∏è',\n            energy: '‚ö°',\n            stamina: 'üí™',\n            mana: 'üîÆ',\n            buff: '‚¨ÜÔ∏è',\n            debuff: '‚¨áÔ∏è'\n        };\n        return icons[effectType] || '‚ú®';\n    }\n    /**\r\n     * Attach event listeners\r\n     */ attachEventListeners() {\n        // Category selection\n        this.container.addEventListener('click', (e)=>{\n            if (e.target.closest('.food-category-card')) {\n                const categoryCard = e.target.closest('.food-category-card');\n                const categoryId = categoryCard.dataset.category;\n                this.selectCategory(categoryId);\n            }\n            if (e.target.closest('.subcategory-btn')) {\n                const subcategoryBtn = e.target.closest('.subcategory-btn');\n                const subcategory = subcategoryBtn.dataset.subcategory;\n                this.selectSubcategory(subcategory);\n            }\n            if (e.target.closest('.examine-btn')) {\n                const examineBtn = e.target.closest('.examine-btn');\n                const itemId = examineBtn.dataset.itemId;\n                this.examineItem(itemId);\n            }\n            if (e.target.closest('.consume-btn')) {\n                const consumeBtn = e.target.closest('.consume-btn');\n                const itemId = consumeBtn.dataset.itemId;\n                this.consumeItem(itemId);\n            }\n        });\n        // Search functionality\n        const searchInput = this.container.querySelector('#food-search-input');\n        const searchBtn = this.container.querySelector('#food-search-btn');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e)=>{\n                this.searchQuery = e.target.value;\n                this.render();\n            });\n            searchInput.addEventListener('keypress', (e)=>{\n                if (e.key === 'Enter') {\n                    this.performSearch();\n                }\n            });\n        }\n        if (searchBtn) {\n            searchBtn.addEventListener('click', ()=>{\n                this.performSearch();\n            });\n        }\n    }\n    /**\r\n     * Select a category\r\n     * @param {string} categoryId - Category ID\r\n     */ selectCategory(categoryId) {\n        this.currentCategory = categoryId;\n        this.currentSubcategory = null;\n        this.render();\n    }\n    /**\r\n     * Select a subcategory\r\n     * @param {string} subcategoryId - Subcategory ID\r\n     */ selectSubcategory(subcategoryId) {\n        this.currentSubcategory = subcategoryId || null;\n        this.render();\n    }\n    /**\r\n     * Perform search\r\n     */ performSearch() {\n        this.currentCategory = null;\n        this.currentSubcategory = null;\n        this.render();\n    }\n    /**\r\n     * Examine an item\r\n     * @param {string} itemId - Item ID\r\n     */ examineItem(itemId) {\n        const gameObject = this.inventoryManager.getGameObject(itemId);\n        if (gameObject) {\n            // Trigger examine event or show modal\n            console.log(`Examining: ${gameObject.displayName}`);\n            console.log(`Description: ${gameObject.examineText}`);\n            // You can implement a modal or notification system here\n            if (typeof showToast === 'function') {\n                showToast(`Examining ${gameObject.displayName}: ${gameObject.examineText}`, 'info');\n            }\n        }\n    }\n    /**\r\n     * Consume an item\r\n     * @param {string} itemId - Item ID\r\n     */ consumeItem(itemId) {\n        const gameObject = this.inventoryManager.getGameObject(itemId);\n        if (gameObject && gameObject.type === 'food') {\n            // Remove item from inventory\n            if (this.inventoryManager.removeItem(itemId, 1)) {\n                // Apply effects\n                if (gameObject.effects) {\n                    for (const effect of gameObject.effects){\n                        this.applyEffect(effect);\n                    }\n                }\n                // Show feedback\n                if (typeof showToast === 'function') {\n                    showToast(`Consumed ${gameObject.displayName}`, 'success');\n                }\n                // Re-render to update quantities\n                this.render();\n            }\n        }\n    }\n    /**\r\n     * Apply an effect\r\n     * @param {Object} effect - Effect to apply\r\n     */ applyEffect(effect) {\n        // This would integrate with your game's effect system\n        console.log(`Applying effect: ${effect.type} - ${effect.value} - ${effect.description}`);\n        // Example integration with game systems\n        if (typeof gameEngine !== 'undefined' && gameEngine.stateManager) {\n        // Apply effect to player state\n        // This is a placeholder - implement based on your game's state system\n        }\n    }\n    /**\r\n     * Update the display\r\n     */ update() {\n        this.render();\n    }\n}\nif (false) {}\n// ES Module exports\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/game-engine/ui/FoodCategoryUI.js\n");

/***/ })

};
;