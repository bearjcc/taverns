"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_game-engine_systems_AchievementSystem_js";
exports.ids = ["_ssr_src_lib_game-engine_systems_AchievementSystem_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/game-engine/systems/AchievementSystem.js":
/*!**********************************************************!*\
  !*** ./src/lib/game-engine/systems/AchievementSystem.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AchievementSystem: () => (/* binding */ AchievementSystem)\n/* harmony export */ });\n/**\r\n * Achievement System\r\n * \r\n * Manages achievements, tracks progress, and handles achievement unlocking.\r\n * Integrates with other systems to monitor game state and award achievements.\r\n */ class AchievementSystem {\n    constructor(achievementsData, stateManager, eventSystem){\n        this.achievementsData = achievementsData || {};\n        this.stateManager = stateManager;\n        this.eventSystem = eventSystem;\n        // System references\n        this.skillManager = null;\n        this.inventoryManager = null;\n        // Achievement state\n        this.unlockedAchievements = new Set();\n        this.achievementProgress = {};\n        // Initialize achievement progress tracking\n        this._initializeProgress();\n    }\n    /**\r\n     * Initialize the achievement system\r\n     */ async initialize() {\n        console.log('Initializing Achievement System');\n        // Load saved achievement state\n        this._loadAchievementState();\n        // Set up event listeners for achievement tracking\n        this._setupEventListeners();\n        // Check for any achievements that should already be unlocked\n        this._checkInitialAchievements();\n        console.log('Achievement System initialized');\n    }\n    /**\r\n     * Get all achievements data\r\n     * @returns {Object} All achievements configuration\r\n     */ getAllAchievements() {\n        return this.achievementsData;\n    }\n    /**\r\n     * Get unlocked achievements\r\n     * @returns {Set} Set of unlocked achievement IDs\r\n     */ getUnlockedAchievements() {\n        return this.unlockedAchievements;\n    }\n    /**\r\n     * Get achievement progress\r\n     * @returns {Object} Achievement progress data\r\n     */ getAchievementProgress() {\n        return this.achievementProgress;\n    }\n    /**\r\n     * Check if an achievement is unlocked\r\n     * @param {string} achievementId - The achievement ID to check\r\n     * @returns {boolean} True if achievement is unlocked\r\n     */ isAchievementUnlocked(achievementId) {\n        return this.unlockedAchievements.has(achievementId);\n    }\n    /**\r\n     * Get total achievement points earned\r\n     * @returns {number} Total points from unlocked achievements\r\n     */ getTotalPoints() {\n        let total = 0;\n        for (const achievementId of this.unlockedAchievements){\n            const achievement = this.achievementsData[achievementId];\n            if (achievement) {\n                total += achievement.points || 0;\n            }\n        }\n        return total;\n    }\n    /**\r\n     * Check and unlock achievements based on current game state\r\n     * This is the main method that will be called to evaluate achievements\r\n     */ checkAchievements() {\n        const gameState = this.stateManager.getState();\n        for (const [achievementId, achievement] of Object.entries(this.achievementsData)){\n            if (this.unlockedAchievements.has(achievementId)) {\n                continue; // Already unlocked\n            }\n            if (this._evaluateAchievement(achievement, gameState)) {\n                this._unlockAchievement(achievementId);\n            }\n        }\n    }\n    /**\r\n     * Force unlock an achievement (for testing or special cases)\r\n     * @param {string} achievementId - The achievement ID to unlock\r\n     */ forceUnlockAchievement(achievementId) {\n        if (!this.achievementsData[achievementId]) {\n            console.warn(`Attempted to unlock non-existent achievement: ${achievementId}`);\n            return;\n        }\n        this._unlockAchievement(achievementId);\n    }\n    /**\r\n     * Reset all achievements (for testing or new game)\r\n     */ resetAchievements() {\n        this.unlockedAchievements.clear();\n        this.achievementProgress = {};\n        this._initializeProgress();\n        this._saveAchievementState();\n        this.eventSystem.emit('achievements:reset');\n    }\n    /**\r\n     * Set the skill manager reference\r\n     * @param {SkillManager} skillManager - The skill manager instance\r\n     */ setSkillSystem(skillManager) {\n        this.skillManager = skillManager;\n    }\n    /**\r\n     * Set the inventory manager reference\r\n     * @param {InventoryManager} inventoryManager - The inventory manager instance\r\n     */ setInventorySystem(inventoryManager) {\n        this.inventoryManager = inventoryManager;\n    }\n    // Private methods\n    _initializeProgress() {\n        // Initialize progress tracking for each achievement\n        for (const achievementId of Object.keys(this.achievementsData)){\n            this.achievementProgress[achievementId] = {\n                current: 0,\n                required: this._getRequiredValue(this.achievementsData[achievementId]),\n                completed: false\n            };\n        }\n    }\n    _loadAchievementState() {\n        try {\n            const savedState = this.stateManager.getState().achievements;\n            if (savedState) {\n                this.unlockedAchievements = new Set(savedState.unlocked || []);\n                this.achievementProgress = savedState.progress || this.achievementProgress;\n            }\n        } catch (error) {\n            console.warn('Failed to load achievement state:', error);\n        }\n    }\n    _saveAchievementState() {\n        try {\n            const currentState = this.stateManager.getState();\n            currentState.achievements = {\n                unlocked: Array.from(this.unlockedAchievements),\n                progress: this.achievementProgress\n            };\n            this.stateManager.setState(currentState);\n        } catch (error) {\n            console.error('Failed to save achievement state:', error);\n        }\n    }\n    _setupEventListeners() {\n        // Listen for skill level ups\n        this.eventSystem.on('skill:levelUp', (data)=>{\n            this._updateSkillLevelProgress(data.skillName, data.newLevel);\n            this.checkAchievements();\n        });\n        // Listen for inventory changes\n        this.eventSystem.on('inventory:itemAdded', (data)=>{\n            this._updateInventoryProgress(data.itemId);\n            this.checkAchievements();\n        });\n        // Listen for trading events\n        this.eventSystem.on('trade:completed', (data)=>{\n            this._updateTradingProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for consumption events\n        this.eventSystem.on('item:consumed', (data)=>{\n            this._updateConsumptionProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for crafting events\n        this.eventSystem.on('craft:completed', (data)=>{\n            this._updateCraftingProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for location visits\n        this.eventSystem.on('location:visited', (data)=>{\n            this._updateLocationProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for pet capture events\n        this.eventSystem.on('pet:captured', (data)=>{\n            this._updatePetProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for cooking events\n        this.eventSystem.on('cooking:completed', (data)=>{\n            this._updateCookingProgress(data);\n            this.checkAchievements();\n        });\n        // Listen for game state changes that might affect achievements\n        this.eventSystem.on('state:changed', ()=>{\n            this.checkAchievements();\n        });\n    }\n    _checkInitialAchievements() {\n        // Check for achievements that should be unlocked based on current state\n        this.checkAchievements();\n    }\n    _evaluateAchievement(achievement, gameState) {\n        const requirements = achievement.requirements;\n        if (!requirements) {\n            return false;\n        }\n        // Check skill level requirements\n        if (requirements.skillLevel) {\n            for (const [skillName, requiredLevel] of Object.entries(requirements.skillLevel)){\n                const skill = gameState.skills?.[skillName];\n                if (!skill || skill.level < requiredLevel) {\n                    return false;\n                }\n            }\n        }\n        // Check any skill level requirement\n        if (requirements.anySkillLevel) {\n            const requiredLevel = requirements.anySkillLevel;\n            const hasAnySkillAtLevel = Object.values(gameState.skills || {}).some((skill)=>skill.level >= requiredLevel);\n            if (!hasAnySkillAtLevel) {\n                return false;\n            }\n        }\n        // Check multiple skill levels requirement\n        if (requirements.multipleSkillLevels) {\n            const { count, level } = requirements.multipleSkillLevels;\n            const skillsAtLevel = Object.values(gameState.skills || {}).filter((skill)=>skill.level >= level).length;\n            if (skillsAtLevel < count) {\n                return false;\n            }\n        }\n        // Check unique items requirement\n        if (requirements.uniqueItems) {\n            const requiredCount = requirements.uniqueItems;\n            const uniqueItemCount = Object.keys(gameState.inventory || {}).length;\n            if (uniqueItemCount < requiredCount) {\n                return false;\n            }\n        }\n        // Check custom requirements\n        if (requirements.custom) {\n            return this._evaluateCustomRequirement(requirements.custom, gameState);\n        }\n        return true;\n    }\n    _evaluateCustomRequirement(requirementType, gameState) {\n        switch(requirementType){\n            case 'secret_discovery':\n                // This is a placeholder for secret achievements\n                // In a real implementation, this would check for specific game events\n                return false;\n            case 'trade_syrup_maple_run':\n                // Check if player has traded syrup in Maple Run\n                // This would need to be tracked in game state\n                return gameState.tradingHistory?.some((trade)=>trade.itemId === 'syrup' && trade.location === 'maple_run') || false;\n            case 'consume_red_mushroom':\n                // Check if player has consumed a red mushroom\n                return gameState.consumptionHistory?.some((consumption)=>consumption.itemId === 'red_mushroom') || false;\n            case 'animate_mushroom_pet':\n                // Check if player has used Animation spell on mushroom and captured as pet\n                return gameState.petHistory?.some((pet)=>pet.source === 'animated_mushroom') || false;\n            case 'cook_moss_mossy_glade':\n                // Check if player has cooked with moss in Mossy Glade\n                return gameState.cookingHistory?.some((cooking)=>cooking.ingredients?.includes('moss') && cooking.location === 'mossy_glade') || false;\n            case 'first_craft':\n                // Check if player has crafted any item\n                return gameState.craftingHistory?.length > 0 || false;\n            case 'visit_locations':\n                // Check if player has visited enough locations\n                const visitedLocations = gameState.visitedLocations || [];\n                const requiredCount = gameState.achievementRequirements?.locationCount || 5;\n                return visitedLocations.length >= requiredCount;\n            default:\n                return false;\n        }\n    }\n    _getRequiredValue(achievement) {\n        const requirements = achievement.requirements;\n        if (requirements.skillLevel) {\n            return Math.max(...Object.values(requirements.skillLevel));\n        }\n        if (requirements.anySkillLevel) {\n            return requirements.anySkillLevel;\n        }\n        if (requirements.multipleSkillLevels) {\n            return requirements.multipleSkillLevels.level;\n        }\n        if (requirements.uniqueItems) {\n            return requirements.uniqueItems;\n        }\n        return 1; // Default required value\n    }\n    _unlockAchievement(achievementId) {\n        const achievement = this.achievementsData[achievementId];\n        if (!achievement) {\n            console.warn(`Attempted to unlock non-existent achievement: ${achievementId}`);\n            return;\n        }\n        this.unlockedAchievements.add(achievementId);\n        if (!this.achievementProgress[achievementId]) {\n            this.achievementProgress[achievementId] = {\n                current: 0,\n                required: this._getRequiredValue(achievement),\n                completed: false\n            };\n        }\n        this.achievementProgress[achievementId].completed = true;\n        this.achievementProgress[achievementId].current = this.achievementProgress[achievementId].required;\n        // Save state\n        this._saveAchievementState();\n        // Emit achievement unlocked event\n        this.eventSystem.emit('achievement:unlocked', {\n            achievementId,\n            achievement,\n            points: achievement.points || 0,\n            totalPoints: this.getTotalPoints()\n        });\n        console.log(`Achievement unlocked: ${achievement.name} (${achievementId})`);\n    }\n    _updateSkillLevelProgress(skillName, level) {\n        for (const [achievementId, achievement] of Object.entries(this.achievementsData)){\n            if (this.unlockedAchievements.has(achievementId)) {\n                continue;\n            }\n            const requirements = achievement.requirements;\n            if (requirements.skillLevel && requirements.skillLevel[skillName]) {\n                const requiredLevel = requirements.skillLevel[skillName];\n                if (!this.achievementProgress[achievementId]) {\n                    this.achievementProgress[achievementId] = {\n                        current: 0,\n                        required: this._getRequiredValue(achievement),\n                        completed: false\n                    };\n                }\n                this.achievementProgress[achievementId].current = Math.min(level, requiredLevel);\n            }\n            if (requirements.anySkillLevel) {\n                const requiredLevel = requirements.anySkillLevel;\n                if (!this.achievementProgress[achievementId]) {\n                    this.achievementProgress[achievementId] = {\n                        current: 0,\n                        required: this._getRequiredValue(achievement),\n                        completed: false\n                    };\n                }\n                this.achievementProgress[achievementId].current = Math.min(level, requiredLevel);\n            }\n        }\n    }\n    _updateInventoryProgress(itemId) {\n        for (const [achievementId, achievement] of Object.entries(this.achievementsData)){\n            if (this.unlockedAchievements.has(achievementId)) {\n                continue;\n            }\n            const requirements = achievement.requirements;\n            if (requirements.uniqueItems) {\n                const gameState = this.stateManager.getState();\n                const uniqueItemCount = Object.keys(gameState.inventory || {}).length;\n                if (!this.achievementProgress[achievementId]) {\n                    this.achievementProgress[achievementId] = {\n                        current: 0,\n                        required: this._getRequiredValue(achievement),\n                        completed: false\n                    };\n                }\n                this.achievementProgress[achievementId].current = Math.min(uniqueItemCount, requirements.uniqueItems);\n            }\n        }\n    }\n    _updateTradingProgress(data) {\n        // Update trading history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.tradingHistory) {\n            gameState.tradingHistory = [];\n        }\n        gameState.tradingHistory.push({\n            itemId: data.itemId,\n            location: data.location,\n            type: data.type,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateConsumptionProgress(data) {\n        // Update consumption history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.consumptionHistory) {\n            gameState.consumptionHistory = [];\n        }\n        gameState.consumptionHistory.push({\n            itemId: data.itemId,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateCraftingProgress(data) {\n        // Update crafting history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.craftingHistory) {\n            gameState.craftingHistory = [];\n        }\n        gameState.craftingHistory.push({\n            itemId: data.itemId,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateLocationProgress(data) {\n        // Update visited locations in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.visitedLocations) {\n            gameState.visitedLocations = [];\n        }\n        if (!gameState.visitedLocations.includes(data.locationId)) {\n            gameState.visitedLocations.push(data.locationId);\n        }\n        this.stateManager.setState(gameState);\n    }\n    _updatePetProgress(data) {\n        // Update pet history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.petHistory) {\n            gameState.petHistory = [];\n        }\n        gameState.petHistory.push({\n            source: data.source,\n            petType: data.petType,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n    _updateCookingProgress(data) {\n        // Update cooking history in game state\n        const gameState = this.stateManager.getState();\n        if (!gameState.cookingHistory) {\n            gameState.cookingHistory = [];\n        }\n        gameState.cookingHistory.push({\n            ingredients: data.ingredients,\n            location: data.location,\n            timestamp: Date.now()\n        });\n        this.stateManager.setState(gameState);\n    }\n}\nif (false) {}\n// ES Module exports\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/game-engine/systems/AchievementSystem.js\n");

/***/ })

};
;