"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_game-engine_core_ModManager_js";
exports.ids = ["_ssr_src_lib_game-engine_core_ModManager_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/game-engine/core/ModManager.js":
/*!************************************************!*\
  !*** ./src/lib/game-engine/core/ModManager.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModManager: () => (/* binding */ ModManager)\n/* harmony export */ });\n/**\r\n * Mod Manager\r\n * \r\n * Handles loading and management of game mods.\r\n * Supports mod discovery, loading, and dependency resolution.\r\n */ class ModManager {\n    constructor(eventSystem, assetLoader){\n        this.eventSystem = eventSystem;\n        this.assetLoader = assetLoader;\n        this.loadedMods = new Map();\n        this.modManifests = new Map();\n        this.activeMods = new Set();\n        this.modLoadOrder = [];\n    }\n    /**\r\n     * Initialize the mod manager\r\n     */ async initialize() {\n        console.log('Initializing Mod Manager');\n        // Discover available mods\n        await this.discoverMods();\n        // Load base game mod by default\n        await this.loadMod('base-game');\n        console.log('Mod Manager initialized');\n    }\n    /**\r\n     * Discover available mods in the mods directory\r\n     */ async discoverMods() {\n        try {\n            // For now, we'll hardcode the base game mod\n            // In the future, this could scan the mods directory\n            const baseGameManifest = await this.loadModManifest('mods/base-game/manifest.json');\n            this.modManifests.set('base-game', baseGameManifest);\n            console.log(`Discovered ${this.modManifests.size} mod(s)`);\n        } catch (error) {\n            console.error('Error discovering mods:', error);\n        }\n    }\n    /**\r\n     * Load a mod by ID\r\n     * @param {string} modId - The mod ID to load\r\n     * @returns {Object} The loaded mod data\r\n     */ async loadMod(modId) {\n        try {\n            console.log(`Loading mod: ${modId}`);\n            const manifest = this.modManifests.get(modId);\n            if (!manifest) {\n                throw new Error(`Mod manifest not found: ${modId}`);\n            }\n            // Check dependencies\n            await this.checkDependencies(manifest);\n            // Load mod data\n            const modData = await this.loadModData(manifest);\n            // Load mod assets\n            await this.loadModAssets(manifest);\n            // Load localization\n            await this.loadModLocalization(manifest);\n            // Store loaded mod\n            this.loadedMods.set(modId, {\n                manifest,\n                data: modData,\n                assets: {},\n                localization: {}\n            });\n            this.activeMods.add(modId);\n            this.modLoadOrder.push(modId);\n            // Emit mod loaded event\n            this.eventSystem.emit('mod:loaded', {\n                modId,\n                manifest,\n                data: modData\n            });\n            console.log(`Mod loaded successfully: ${modId}`);\n            return modData;\n        } catch (error) {\n            console.error(`Failed to load mod ${modId}:`, error);\n            throw error;\n        }\n    }\n    /**\r\n     * Load mod manifest from file\r\n     * @param {string} manifestPath - Path to the manifest file\r\n     * @returns {Object} The manifest data\r\n     */ async loadModManifest(manifestPath) {\n        try {\n            const response = await fetch(manifestPath);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(`Failed to load mod manifest ${manifestPath}:`, error);\n            throw error;\n        }\n    }\n    /**\r\n     * Check mod dependencies\r\n     * @param {Object} manifest - The mod manifest\r\n     */ async checkDependencies(manifest) {\n        const dependencies = manifest.dependencies || [];\n        for (const dependency of dependencies){\n            if (!this.loadedMods.has(dependency)) {\n                throw new Error(`Missing dependency: ${dependency}`);\n            }\n        }\n    }\n    /**\r\n     * Load mod data files\r\n     * @param {Object} manifest - The mod manifest\r\n     * @returns {Object} The loaded data\r\n     */ async loadModData(manifest) {\n        const data = {};\n        const dataFiles = manifest.data || {};\n        for (const [key, path] of Object.entries(dataFiles)){\n            try {\n                if (path.endsWith('/')) {\n                    // Directory - load all JSON files in directory\n                    data[key] = await this.loadDataDirectory(path);\n                } else {\n                    // Single file\n                    const response = await fetch(path);\n                    if (!response.ok) {\n                        console.warn(`Failed to load data file: ${path}`);\n                        continue;\n                    }\n                    data[key] = await response.json();\n                }\n            } catch (error) {\n                console.warn(`Failed to load data file ${path}:`, error);\n            }\n        }\n        return data;\n    }\n    /**\r\n     * Load all JSON files in a directory\r\n     * @param {string} directoryPath - Path to the directory\r\n     * @returns {Object} Object with filename keys and data values\r\n     */ async loadDataDirectory(directoryPath) {\n        // For now, we'll return an empty object\n        // In a real implementation, this would scan the directory\n        return {};\n    }\n    /**\r\n     * Load mod assets\r\n     * @param {Object} manifest - The mod manifest\r\n     */ async loadModAssets(manifest) {\n        const assets = manifest.assets || {};\n        // For now, we'll just log the asset paths\n        // In a real implementation, this would preload assets\n        console.log('Mod assets:', assets);\n    }\n    /**\r\n     * Load mod localization\r\n     * @param {Object} manifest - The mod manifest\r\n     */ async loadModLocalization(manifest) {\n        const localization = manifest.localization || {};\n        const defaultLang = localization.default || 'en';\n        const langPath = localization.path || 'localization/';\n        try {\n            const response = await fetch(`${langPath}${defaultLang}.json`);\n            if (response.ok) {\n                const langData = await response.json();\n                console.log('Loaded localization:', langData);\n            }\n        } catch (error) {\n            console.warn('Failed to load localization:', error);\n        }\n    }\n    /**\r\n     * Get loaded mod data\r\n     * @param {string} modId - The mod ID\r\n     * @returns {Object} The mod data\r\n     */ getModData(modId) {\n        const mod = this.loadedMods.get(modId);\n        return mod ? mod.data : null;\n    }\n    /**\r\n     * Get all loaded mod data merged together\r\n     * @returns {Object} Merged data from all loaded mods\r\n     */ getAllModData() {\n        const mergedData = {};\n        for (const [modId, mod] of this.loadedMods){\n            for (const [key, value] of Object.entries(mod.data)){\n                if (!mergedData[key]) {\n                    mergedData[key] = {};\n                }\n                // Merge data (mods loaded later override earlier ones)\n                if (typeof value === 'object' && value !== null) {\n                    Object.assign(mergedData[key], value);\n                } else {\n                    mergedData[key] = value;\n                }\n            }\n        }\n        return mergedData;\n    }\n    /**\r\n     * Get active mods\r\n     * @returns {Set} Set of active mod IDs\r\n     */ getActiveMods() {\n        return this.activeMods;\n    }\n    /**\r\n     * Get mod load order\r\n     * @returns {Array} Array of mod IDs in load order\r\n     */ getModLoadOrder() {\n        return this.modLoadOrder;\n    }\n    /**\r\n     * Unload a mod\r\n     * @param {string} modId - The mod ID to unload\r\n     */ unloadMod(modId) {\n        if (this.loadedMods.has(modId)) {\n            this.loadedMods.delete(modId);\n            this.activeMods.delete(modId);\n            const index = this.modLoadOrder.indexOf(modId);\n            if (index > -1) {\n                this.modLoadOrder.splice(index, 1);\n            }\n            this.eventSystem.emit('mod:unloaded', {\n                modId\n            });\n            console.log(`Mod unloaded: ${modId}`);\n        }\n    }\n    /**\r\n     * Reload a mod\r\n     * @param {string} modId - The mod ID to reload\r\n     */ async reloadMod(modId) {\n        this.unloadMod(modId);\n        await this.loadMod(modId);\n    }\n}\nif (false) {}\n// ES Module exports\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/game-engine/core/ModManager.js\n");

/***/ })

};
;