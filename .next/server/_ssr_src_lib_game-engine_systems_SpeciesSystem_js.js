"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_game-engine_systems_SpeciesSystem_js";
exports.ids = ["_ssr_src_lib_game-engine_systems_SpeciesSystem_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/game-engine/systems/SpeciesSystem.js":
/*!******************************************************!*\
  !*** ./src/lib/game-engine/systems/SpeciesSystem.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpeciesSystem: () => (/* binding */ SpeciesSystem)\n/* harmony export */ });\n/**\r\n * Species System\r\n * \r\n * Manages all species-related functionality including species data,\r\n * attributes, bonuses, and species operations.\r\n */ class Species {\n    constructor(data){\n        this.id = data.id;\n        this.name = data.name;\n        this.description = data.description;\n        this.type = data.type || 'playable';\n        this.attributes = data.attributes || {};\n        this.bonuses = data.bonuses || {};\n        this.professions = data.professions || [];\n        this.traits = data.traits || [];\n        this.image = data.image;\n        this.icon = data.icon;\n    }\n    /**\r\n     * Get an attribute value\r\n     * @param {string} attributeName - Name of the attribute\r\n     * @returns {number} Attribute value\r\n     */ getAttribute(attributeName) {\n        return this.attributes[attributeName] || 0;\n    }\n    /**\r\n     * Get attribute range (min/max)\r\n     * @param {string} attributeName - Name of the attribute\r\n     * @returns {Object|null} Range object or null if not found\r\n     */ getAttributeRange(attributeName) {\n        const attr = this.attributes[attributeName];\n        if (typeof attr === 'object' && attr.min !== undefined && attr.max !== undefined) {\n            return {\n                min: attr.min,\n                max: attr.max\n            };\n        }\n        return null;\n    }\n    /**\r\n     * Get a bonus value\r\n     * @param {string} bonusType - Type of bonus\r\n     * @returns {number} Bonus value\r\n     */ getBonus(bonusType) {\n        return this.bonuses[bonusType] || 0;\n    }\n    /**\r\n     * Check if species has a specific profession\r\n     * @param {string} profession - Profession to check\r\n     * @returns {boolean} Whether species has the profession\r\n     */ hasProfession(profession) {\n        return this.professions.includes(profession);\n    }\n    /**\r\n     * Check if species has a specific trait\r\n     * @param {string} trait - Trait to check\r\n     * @returns {boolean} Whether species has the trait\r\n     */ hasTrait(trait) {\n        return this.traits.includes(trait);\n    }\n    /**\r\n     * Get all attributes as an object\r\n     * @returns {Object} All attributes\r\n     */ getAllAttributes() {\n        return {\n            ...this.attributes\n        };\n    }\n    /**\r\n     * Get all bonuses as an object\r\n     * @returns {Object} All bonuses\r\n     */ getAllBonuses() {\n        return {\n            ...this.bonuses\n        };\n    }\n    /**\r\n     * Get all professions\r\n     * @returns {Array} Array of professions\r\n     */ getAllProfessions() {\n        return [\n            ...this.professions\n        ];\n    }\n    /**\r\n     * Get all traits\r\n     * @returns {Array} Array of traits\r\n     */ getAllTraits() {\n        return [\n            ...this.traits\n        ];\n    }\n    /**\r\n     * Check if species is playable\r\n     * @returns {boolean} Whether species is playable\r\n     */ isPlayable() {\n        return this.type === 'playable';\n    }\n    /**\r\n     * Get species statistics\r\n     * @returns {Object} Species statistics\r\n     */ getStats() {\n        const totalAttributes = Object.values(this.attributes).reduce((sum, attr)=>{\n            if (typeof attr === 'number') return sum + attr;\n            if (typeof attr === 'object' && attr.min !== undefined) return sum + attr.min;\n            return sum;\n        }, 0);\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.type,\n            attributesCount: Object.keys(this.attributes).length,\n            bonusesCount: Object.keys(this.bonuses).length,\n            professionsCount: this.professions.length,\n            traitsCount: this.traits.length,\n            totalAttributes,\n            isPlayable: this.isPlayable()\n        };\n    }\n}\nclass SpeciesSystem {\n    constructor(speciesConfig, stateManager, eventSystem){\n        this.speciesConfig = speciesConfig;\n        this.stateManager = stateManager;\n        this.eventSystem = eventSystem;\n        this.species = new Map();\n        this.playableSpecies = new Map();\n        this.nonPlayableSpecies = new Map();\n        this.isLoaded = false;\n        // Bind methods to maintain context\n        this.getSpecies = this.getSpecies.bind(this);\n        this.getPlayableSpecies = this.getPlayableSpecies.bind(this);\n    }\n    /**\r\n     * Initialize the species system\r\n     */ async initialize() {\n        try {\n            console.log('Initializing species system...');\n            // Load species from configuration\n            await this.loadSpeciesData();\n            // Set up event listeners\n            this._setupEventListeners();\n            console.log('Species system initialized successfully');\n            this.eventSystem.emit('speciesSystem:initialized', {\n                totalSpecies: this.species.size,\n                playableSpecies: this.playableSpecies.size,\n                nonPlayableSpecies: this.nonPlayableSpecies.size\n            });\n        } catch (error) {\n            console.error('Failed to initialize species system:', error);\n            this.eventSystem.emit('speciesSystem:initError', {\n                error\n            });\n            throw error;\n        }\n    }\n    /**\r\n     * Load species data from configuration\r\n     * @param {string} dataPath - Path to species data file\r\n     * @returns {Promise<boolean>} True if loading successful\r\n     */ async loadSpeciesData(dataPath = null) {\n        try {\n            const path = dataPath || this.speciesConfig || '../data/species.json';\n            // If path is provided as a string, load from file\n            if (typeof path === 'string') {\n                const response = await fetch(path);\n                if (!response.ok) {\n                    throw new Error(`Failed to load species data: ${response.status}`);\n                }\n                const speciesData = await response.json();\n                this.processSpeciesData(speciesData);\n            } else if (typeof path === 'object') {\n                // If path is an object, use it directly\n                this.processSpeciesData(path);\n            } else {\n                throw new Error('Invalid species configuration');\n            }\n            this.isLoaded = true;\n            console.log(`Loaded ${this.species.size} species (${this.playableSpecies.size} playable)`);\n            return true;\n        } catch (error) {\n            console.error('Error loading species data:', error);\n            this.isLoaded = false;\n            throw error;\n        }\n    }\n    /**\r\n     * Process loaded species data and create Species instances\r\n     * @param {Object} speciesData - Raw species data from JSON\r\n     */ processSpeciesData(speciesData) {\n        this.species.clear();\n        this.playableSpecies.clear();\n        this.nonPlayableSpecies.clear();\n        // Process playable species\n        if (speciesData.playable) {\n            for (const [id, data] of Object.entries(speciesData.playable)){\n                const species = new Species({\n                    id,\n                    ...data\n                });\n                this.species.set(id, species);\n                this.playableSpecies.set(id, species);\n            }\n        }\n        // Process non-playable species\n        if (speciesData.non_playable) {\n            for (const [id, data] of Object.entries(speciesData.non_playable)){\n                const species = new Species({\n                    id,\n                    ...data\n                });\n                this.species.set(id, species);\n                this.nonPlayableSpecies.set(id, species);\n            }\n        }\n    }\n    /**\r\n     * Get a species by ID\r\n     * @param {string} speciesId - ID of the species\r\n     * @returns {Species|null} Species instance or null if not found\r\n     */ getSpecies(speciesId) {\n        return this.species.get(speciesId) || null;\n    }\n    /**\r\n     * Get a species by name (case-insensitive)\r\n     * @param {string} speciesName - Name of the species\r\n     * @returns {Species|null} Species instance or null if not found\r\n     */ getSpeciesByName(speciesName) {\n        const normalizedName = speciesName.toLowerCase();\n        for (const species of this.species.values()){\n            if (species.name.toLowerCase() === normalizedName) {\n                return species;\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Get all species\r\n     * @returns {Array<Species>} Array of all species\r\n     */ getAllSpecies() {\n        return Array.from(this.species.values());\n    }\n    /**\r\n     * Get all playable species\r\n     * @returns {Array<Species>} Array of playable species\r\n     */ getPlayableSpecies() {\n        return Array.from(this.playableSpecies.values());\n    }\n    /**\r\n     * Get all non-playable species\r\n     * @returns {Array<Species>} Array of non-playable species\r\n     */ getNonPlayableSpecies() {\n        return Array.from(this.nonPlayableSpecies.values());\n    }\n    /**\r\n     * Get species that have a specific profession\r\n     * @param {string} profession - Profession to search for\r\n     * @returns {Array<Species>} Array of species with the profession\r\n     */ getSpeciesByProfession(profession) {\n        return this.getAllSpecies().filter((species)=>species.hasProfession(profession));\n    }\n    /**\r\n     * Get species within a specific attribute range\r\n     * @param {string} attributeName - Name of the attribute\r\n     * @param {number} minValue - Minimum value\r\n     * @param {number} maxValue - Maximum value\r\n     * @returns {Array<Species>} Array of species within the range\r\n     */ getSpeciesByAttributeRange(attributeName, minValue, maxValue) {\n        return this.getAllSpecies().filter((species)=>{\n            const range = species.getAttributeRange(attributeName);\n            if (!range) return false;\n            return range.min >= minValue && range.max <= maxValue;\n        });\n    }\n    /**\r\n     * Get species with a specific bonus\r\n     * @param {string} bonusType - Type of bonus\r\n     * @param {number} minValue - Minimum bonus value\r\n     * @returns {Array<Species>} Array of species with the bonus\r\n     */ getSpeciesByBonus(bonusType, minValue = 0) {\n        return this.getAllSpecies().filter((species)=>species.getBonus(bonusType) >= minValue);\n    }\n    /**\r\n     * Generate a random playable species\r\n     * @returns {Species|null} Random playable species or null if none available\r\n     */ getRandomPlayableSpecies() {\n        const playableSpecies = this.getPlayableSpecies();\n        if (playableSpecies.length === 0) return null;\n        const randomIndex = Math.floor(Math.random() * playableSpecies.length);\n        return playableSpecies[randomIndex];\n    }\n    /**\r\n     * Generate a random non-playable species\r\n     * @returns {Species|null} Random non-playable species or null if none available\r\n     */ getRandomNonPlayableSpecies() {\n        const nonPlayableSpecies = this.getNonPlayableSpecies();\n        if (nonPlayableSpecies.length === 0) return null;\n        const randomIndex = Math.floor(Math.random() * nonPlayableSpecies.length);\n        return nonPlayableSpecies[randomIndex];\n    }\n    /**\r\n     * Search species by name (partial match)\r\n     * @param {string} searchTerm - Search term\r\n     * @returns {Array<Species>} Array of matching species\r\n     */ searchSpecies(searchTerm) {\n        const normalizedTerm = searchTerm.toLowerCase();\n        return this.getAllSpecies().filter((species)=>species.name.toLowerCase().includes(normalizedTerm) || species.description.toLowerCase().includes(normalizedTerm));\n    }\n    /**\r\n     * Get all unique professions across all species\r\n     * @returns {Array<string>} Array of unique professions\r\n     */ getAllProfessions() {\n        const professions = new Set();\n        this.getAllSpecies().forEach((species)=>{\n            species.getAllProfessions().forEach((profession)=>{\n                professions.add(profession);\n            });\n        });\n        return Array.from(professions);\n    }\n    /**\r\n     * Get all unique attributes across all species\r\n     * @returns {Array<string>} Array of unique attributes\r\n     */ getAllAttributes() {\n        const attributes = new Set();\n        this.getAllSpecies().forEach((species)=>{\n            Object.keys(species.getAllAttributes()).forEach((attribute)=>{\n                attributes.add(attribute);\n            });\n        });\n        return Array.from(attributes);\n    }\n    /**\r\n     * Check if species data is loaded\r\n     * @returns {boolean} True if species data is loaded\r\n     */ isDataLoaded() {\n        return this.isLoaded;\n    }\n    /**\r\n     * Get species system statistics\r\n     * @returns {Object} Statistics object\r\n     */ getStats() {\n        return {\n            total: this.species.size,\n            playable: this.playableSpecies.size,\n            nonPlayable: this.nonPlayableSpecies.size,\n            loaded: this.isLoaded,\n            professions: this.getAllProfessions().length,\n            attributes: this.getAllAttributes().length\n        };\n    }\n    /**\r\n     * Set up event listeners\r\n     */ _setupEventListeners() {\n        // Listen for species-related events\n        this.eventSystem.on('species:selected', (data)=>{\n        // Handle species selection\n        });\n        this.eventSystem.on('species:created', (data)=>{\n        // Handle species creation\n        });\n    }\n}\nif (false) {}\n// ES Module exports\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/game-engine/systems/SpeciesSystem.js\n");

/***/ })

};
;