"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_game-engine_systems_SkillManager_js";
exports.ids = ["_ssr_src_lib_game-engine_systems_SkillManager_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/game-engine/systems/SkillManager.js":
/*!*****************************************************!*\
  !*** ./src/lib/game-engine/systems/SkillManager.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Skill: () => (/* binding */ Skill),\n/* harmony export */   SkillManager: () => (/* binding */ SkillManager)\n/* harmony export */ });\nclass SkillManager {\n    constructor(){\n        this.skills = new Map();\n        this.newlyUnlockedActions = new Set();\n        this.configManager = null;\n        this.uiManager = null;\n        this.inventoryManager = null;\n        this.eventSystem = null;\n    }\n    /**\r\n     * Set the configuration manager reference\r\n     * @param {ConfigManager} configManager - The configuration manager instance\r\n     */ setConfigManager(configManager) {\n        this.configManager = configManager;\n    }\n    /**\r\n     * Set the UI manager reference\r\n     * @param {UIManager} uiManager - The UI manager instance\r\n     */ setUIManager(uiManager) {\n        this.uiManager = uiManager;\n    }\n    /**\r\n     * Set the inventory manager reference\r\n     * @param {InventoryManager} inventoryManager - The inventory manager instance\r\n     */ setInventorySystem(inventoryManager) {\n        this.inventoryManager = inventoryManager;\n    }\n    /**\r\n     * Set the event system reference\r\n     * @param {EventSystem} eventSystem - The event system instance\r\n     */ setEventSystem(eventSystem) {\n        this.eventSystem = eventSystem;\n    }\n    loadFromConfig(skillsConfig, gameConfig) {\n        try {\n            console.log('Loading skills...');\n            this.skills.clear();\n            if (skillsConfig) {\n                const processCategory = (categoryData)=>{\n                    for (const [key, data] of Object.entries(categoryData)){\n                        // Create skill with default values if level/experience not specified\n                        const level = data.hasOwnProperty('level') ? data.level : null;\n                        const experience = data.hasOwnProperty('experience') ? data.experience : null;\n                        const skill = new Skill(key, level, experience, this.configManager);\n                        this.skills.set(key, skill);\n                        if (data.sub_skills) {\n                            processCategory(data.sub_skills);\n                        }\n                    }\n                };\n                for(const category in skillsConfig){\n                    processCategory(skillsConfig[category]);\n                }\n            }\n            console.log(`Loaded ${this.skills.size} skills`);\n        } catch (error) {\n            console.error('Error loading skills:', error);\n        }\n    }\n    addSkill(skillName, skill) {\n        this.skills.set(skillName, skill);\n    }\n    getSkill(skillName) {\n        return this.skills.get(skillName);\n    }\n    addSkillXp(skillName, xpAmount) {\n        const skill = this.skills.get(skillName);\n        if (skill) {\n            const fromLevel = skill.level;\n            const levelUps = skill.addXp(xpAmount);\n            if (levelUps > 0 && this.uiManager && this.configManager) {\n                const message = this.configManager.getMessage('levelUp', {\n                    skillName: skillName,\n                    level: skill.level\n                });\n                this.uiManager.addNarrationMessage(message);\n                // Emit skill level up event for achievement tracking\n                if (this.eventSystem) {\n                    this.eventSystem.emit('skill:levelUp', {\n                        skillName: skillName,\n                        oldLevel: fromLevel,\n                        newLevel: skill.level,\n                        levelUps: levelUps\n                    });\n                }\n            }\n            return levelUps;\n        }\n        return 0;\n    }\n    getAllSkills() {\n        return Array.from(this.skills.values());\n    }\n    checkForNewUnlocks(skillName, fromLevel, toLevel) {\n    // This will be handled by ActionManager\n    }\n}\n// Skill class for managing individual skills\nclass Skill {\n    constructor(name, level = null, xp = null, configManager = null){\n        this.name = name;\n        this.level = level !== null ? level : 1;\n        this.xp = xp !== null ? xp : 0;\n        this.configManager = configManager;\n        this.xpToNext = this.getXpToNextLevel(this.level);\n    }\n    getXpToNextLevel(level) {\n        const multiplier = this.configManager ? this.configManager.getConstant('xpMultiplier', 100) : 100;\n        return level * multiplier;\n    }\n    addXp(amount) {\n        this.xp += amount;\n        let levelUps = 0;\n        while(this.xp >= this.xpToNext){\n            this.level++;\n            this.xp -= this.xpToNext;\n            this.xpToNext = this.getXpToNextLevel(this.level);\n            levelUps++;\n        }\n        return levelUps;\n    }\n    getProgress() {\n        const progressMax = this.configManager ? this.configManager.getConstant('progressMax', 100) : 100;\n        return this.xp / this.xpToNext * progressMax;\n    }\n}\nif (false) {}\n// ES Module exports\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/game-engine/systems/SkillManager.js\n");

/***/ })

};
;