"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_game-engine_ui_UIManager_js";
exports.ids = ["_ssr_src_lib_game-engine_ui_UIManager_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/game-engine/ui/UIManager.js":
/*!*********************************************!*\
  !*** ./src/lib/game-engine/ui/UIManager.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UIManager: () => (/* binding */ UIManager)\n/* harmony export */ });\nclass UIManager {\n    constructor(){\n        this.currentTab = 'skills';\n        this.toastContainer = null;\n        this.initializeToastContainer();\n    }\n    initializeToastContainer() {\n        this.toastContainer = document.getElementById('toast-container');\n        if (!this.toastContainer) {\n            this.toastContainer = document.createElement('div');\n            this.toastContainer.id = 'toast-container';\n            this.toastContainer.className = 'toast-container';\n            document.body.appendChild(this.toastContainer);\n        }\n    }\n    updateSkillsDisplay(skillManager, skillsConfig) {\n        const skillsContent = document.getElementById('skills-content');\n        if (!skillsContent) return;\n        const { skill_categories, skills: skillsData } = skillsConfig;\n        const playerSkills = skillManager.getAllSkills();\n        let html = '';\n        skill_categories.forEach((category)=>{\n            html += this.createSkillCategoryHtml(category);\n            const skillsInCategoryNames = Object.keys(skillsData).filter((skillName)=>skillsData[skillName].type === category.id);\n            if (skillsInCategoryNames.length > 0) {\n                skillsInCategoryNames.forEach((skillName)=>{\n                    const skillDetails = skillsData[skillName];\n                    let playerSkill = playerSkills.find((s)=>s.name === skillName);\n                    if (!playerSkill) {\n                        // Create a mock skill object for locked skills or skills the player hasn't acquired yet\n                        playerSkill = {\n                            name: skillName,\n                            level: 0,\n                            locked: skillDetails.locked,\n                            xp: 0,\n                            xpToNext: 100,\n                            getProgress: ()=>0\n                        };\n                    }\n                    html += this.createSkillHtml(skillName, skillDetails, playerSkill);\n                });\n            }\n            html += `</div></div>`;\n        });\n        skillsContent.innerHTML = html;\n    }\n    createSkillCategoryHtml(category) {\n        return `\n            <div class=\"skill-category\">\n                <div class=\"skill-category-header\" onclick=\"uiManager.toggleSkillCategory(this)\">\n                    <span class=\"skill-category-toggle\">‚ñ∂</span>\n                    <span class=\"skill-category-name\">${category.name.toUpperCase()}</span>\n                </div>\n                <div class=\"skill-items-container\">\n        `;\n    }\n    createSkillHtml(skillName, skillDetails, playerSkill) {\n        const isLocked = playerSkill.locked || skillDetails.locked;\n        if (isLocked) {\n            return `\n                <div class=\"skill-item locked\">\n                    <div class=\"skill-info\">\n                        <span class=\"skill-icon\">${skillDetails.icon}</span>\n                        <span class=\"skill-name\">${skillName}</span>\n                    </div>\n                    <span class=\"skill-lock-icon\">üîí</span>\n                </div>\n            `;\n        }\n        const progress = playerSkill.getProgress ? playerSkill.getProgress() : 0;\n        return `\n            <div class=\"skill-item\">\n                <div class=\"skill-info\">\n                    <span class=\"skill-icon\">${skillDetails.icon}</span>\n                    <span class=\"skill-name\">${skillName}</span>\n                    <span class=\"skill-level-info\">(${playerSkill.level} / 120)</span>\n                </div>\n                <div class=\"skill-progress-container\">\n                    <div class=\"skill-progress-bar\">\n                        <div class=\"skill-progress-fill\" style=\"width: ${progress}%\"></div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    toggleSkillCategory(headerElement) {\n        const category = headerElement.closest('.skill-category');\n        category.classList.toggle('collapsed');\n    }\n    updateActionsDisplay(actionManager, skillManager, inventoryManager, gameConfig) {\n        const actionsContent = document.getElementById('actions-content');\n        if (!actionsContent) return;\n        const availableActions = actionManager.getAvailableActions();\n        let html = '';\n        for (const action of availableActions){\n            html += this.createActionHtml(action, actionManager, skillManager, inventoryManager, gameConfig);\n        }\n        actionsContent.innerHTML = html;\n    }\n    createActionHtml(action, actionManager, skillManager, inventoryManager, gameConfig) {\n        const cssClasses = gameConfig?.ui?.cssClasses || {};\n        const isNewlyUnlocked = actionManager.isNewlyUnlocked(action.name);\n        const newUnlockClass = isNewlyUnlocked ? ` ${cssClasses.newUnlock || 'new-unlock'}` : '';\n        const skill = skillManager.getSkill(action.skillType);\n        const canPerform = skill && action.canPerform(skill.level, inventoryManager);\n        const disabledAttr = canPerform ? '' : 'disabled';\n        const lockedClass = canPerform ? '' : ' locked';\n        // Check availability and cooldown\n        let availabilityInfo = '';\n        let cooldownInfo = '';\n        let missingRequirements = '';\n        if (action.availabilityInfo) {\n            const availability = action.availabilityInfo;\n            // Show cooldown if action has one\n            if (action.availability && action.availability.cooldown) {\n                const remainingCooldown = actionManager.availabilityEngine.getRemainingCooldown(action.name, action.availability.cooldown);\n                if (remainingCooldown > 0) {\n                    const cooldownMinutes = Math.ceil(remainingCooldown / 60000);\n                    cooldownInfo = `<div class=\"cooldown-timer\">‚è∞ ${cooldownMinutes}m cooldown</div>`;\n                }\n            }\n            // Show missing requirements if action is not available\n            if (!availability.available && availability.missingRequirements.length > 0) {\n                missingRequirements = `<div class=\"missing-requirements\">‚ùå ${availability.missingRequirements.join(', ')}</div>`;\n            }\n        }\n        let timeDisplay = '';\n        if (action.timeRequired > 0) {\n            timeDisplay = `<div class=\"${cssClasses.actionTime || 'action-time'}\">‚è±Ô∏è ${action.getTimeDisplay()}</div>`;\n        }\n        let variableInput = '';\n        if (action.hasVariables()) {\n            variableInput = `\n                <div class=\"${cssClasses.actionVariable || 'action-variable'}\">\n                    <input type=\"number\" min=\"1\" value=\"1\" id=\"var-${action.name}\" \n                           placeholder=\"Amount\" style=\"width: 60px; margin-right: 5px;\">\n                </div>\n            `;\n        }\n        // Build tooltip with availability information\n        let tooltip = action.tooltip || action.description;\n        if (action.availabilityInfo && !action.availabilityInfo.available) {\n            tooltip += `\\n\\nNot available: ${action.availabilityInfo.reasons.join(', ')}`;\n        }\n        return `\n            <button class=\"${cssClasses.actionButton || 'action-button'}${newUnlockClass}${lockedClass}\" \n                    onclick=\"handleAction('${action.name}')\" \n                    title=\"${tooltip}\" ${disabledAttr}>\n                <div class=\"${cssClasses.actionIcon || 'action-icon'}\">${action.icon}</div>\n                <div class=\"${cssClasses.actionTitle || 'action-title'}\">${action.displayName}</div>\n                <div class=\"${cssClasses.actionDescription || 'action-description'}\">${action.description}</div>\n                ${timeDisplay}\n                ${cooldownInfo}\n                ${missingRequirements}\n                ${variableInput}\n            </button>\n        `;\n    }\n    updateInventoryDisplay(inventoryManager, gameConfig) {\n        const inventoryContent = document.getElementById('inventory-content');\n        if (!inventoryContent) return;\n        const items = inventoryManager.getAllItems();\n        let html = '';\n        if (items.length === 0) {\n            html += '<p class=\"text-muted\">Your inventory is empty.</p>';\n        } else {\n            for (const item of items){\n                html += this.createInventoryItemHtml(item, gameConfig);\n            }\n        }\n        inventoryContent.innerHTML = html;\n    }\n    createInventoryItemHtml(inventoryItem, gameConfig) {\n        const gameObject = inventoryItem.gameObject;\n        const itemJson = JSON.stringify(inventoryItem).replace(/\"/g, '&quot;');\n        return `\n            <div class=\"inventory-item\" \n                 onclick=\"uiManager.showItemContextMenu(event, '${gameObject.id}', ${itemJson})\">\n                <div class=\"item-icon\">${gameObject.icon}</div>\n                <div class=\"item-info\">\n                    <span class=\"item-name\">${gameObject.displayName}</span>\n                    <span class=\"item-quantity\">x${inventoryItem.quantity}</span>\n                </div>\n            </div>\n        `;\n    }\n    updateCharacterDisplay(traitManager, gameConfig) {\n        const characterContent = document.getElementById('character-content');\n        if (!characterContent) return;\n        const traits = traitManager.getAllTraits();\n        let html = '<h3>Character</h3>';\n        if (traits.length === 0) {\n            html += '<p>No traits available.</p>';\n        } else {\n            html += '<div class=\"traits-grid\">';\n            for (const trait of traits){\n                html += this.createTraitHtml(trait, gameConfig);\n            }\n            html += '</div>';\n        }\n        characterContent.innerHTML = html;\n    }\n    createTraitHtml(trait, gameConfig) {\n        const cssClasses = gameConfig?.ui?.cssClasses || {};\n        const progress = trait.getProgress();\n        return `\n            <div class=\"trait-item\">\n                <div class=\"trait-header\">\n                    <span class=\"trait-icon\">${trait.icon}</span>\n                    <span class=\"trait-name\">${trait.name}</span>\n                    <span class=\"trait-level\">Level ${trait.level}</span>\n                </div>\n                <div class=\"trait-description\">${trait.description}</div>\n                <div class=\"${cssClasses.skillProgressContainer || 'skill-progress-container'}\">\n                    <div class=\"${cssClasses.skillProgressBar || 'skill-progress-bar'}\">\n                        <div class=\"${cssClasses.skillProgressFill || 'skill-progress-fill'}\" \n                             style=\"width: ${progress}%\"></div>\n                    </div>\n                    <span class=\"${cssClasses.skillXp || 'skill-xp'}\">${trait.xp}/${trait.xpToNext} XP</span>\n                </div>\n            </div>\n        `;\n    }\n    updateAchievementsDisplay(achievementSystem, gameConfig) {\n        const achievementsContent = document.getElementById('achievements-content');\n        if (!achievementsContent) return;\n        const achievementsData = achievementSystem.getAllAchievements();\n        const unlockedAchievements = achievementSystem.getUnlockedAchievements();\n        const achievementProgress = achievementSystem.getAchievementProgress();\n        // Group by category\n        const categories = {};\n        for (const [id, achievement] of Object.entries(achievementsData)){\n            const category = achievement.category || 'General';\n            if (!categories[category]) categories[category] = [];\n            categories[category].push({\n                ...achievement,\n                id\n            });\n        }\n        // Sort by points descending\n        for(const cat in categories){\n            categories[cat].sort((a, b)=>(b.points || 0) - (a.points || 0));\n        }\n        let html = '';\n        Object.entries(categories).forEach(([category, achievements])=>{\n            html += `\n                <div class=\"skill-category\">\n                    <div class=\"skill-category-header\" onclick=\"uiManager.toggleSkillCategory(this)\">\n                        <span class=\"skill-category-toggle\">‚ñ∂</span>\n                        <span class=\"skill-category-name\">${category.toUpperCase()}</span>\n                    </div>\n                    <div class=\"skill-items-container\">\n            `;\n            achievements.forEach((achievement)=>{\n                const isUnlocked = unlockedAchievements.has(achievement.id);\n                const progress = achievementProgress[achievement.id] || null;\n                html += `\n                    <div class=\"skill-item${isUnlocked ? '' : ' locked'}\">\n                        <div class=\"skill-info\">\n                            <span class=\"skill-icon\">${achievement.icon || 'üèÜ'}</span>\n                            <span class=\"skill-name\">${isUnlocked || !achievement.secret ? achievement.name : '???'}</span>\n                            ${isUnlocked ? '<span class=\"skill-level-info\">Unlocked</span>' : '<span class=\"skill-lock-icon\">üîí</span>'}\n                        </div>\n                        <div class=\"skill-progress-container\">\n                            <div class=\"skill-progress-bar\">\n                                <div class=\"skill-progress-fill\" style=\"width: ${progress && progress.required > 1 ? Math.min(progress.current / progress.required * 100, 100) : 0}%\"></div>\n                            </div>\n                            ${progress && progress.required > 1 ? `<span class=\"skill-xp\">${progress.current}/${progress.required}</span>` : ''}\n                        </div>\n                        <div class=\"skill-description\" style=\"color:#aaa;font-size:12px;margin-top:2px;\">\n                            ${isUnlocked || !achievement.secret ? achievement.description : 'Unlock this secret achievement to reveal its details.'}\n                        </div>\n                        <div class=\"skill-level-info\" style=\"font-size:11px;color:#888;\">${achievement.points || 0} pts</div>\n                    </div>\n                `;\n            });\n            html += `</div></div>`;\n        });\n        achievementsContent.innerHTML = html;\n    }\n    switchTab(tabName) {\n        this.currentTab = tabName;\n        // Hide all tab panels\n        const tabPanels = document.querySelectorAll('.tab-panel');\n        tabPanels.forEach((panel)=>panel.classList.remove('active'));\n        // Remove active class from all tab buttons\n        const tabButtons = document.querySelectorAll('.tab-button');\n        tabButtons.forEach((button)=>button.classList.remove('active'));\n        // Show selected tab panel\n        const selectedPanel = document.getElementById(`${tabName}-tab`);\n        if (selectedPanel) {\n            selectedPanel.classList.add('active');\n        }\n        // Add active class to selected tab button\n        const selectedButton = document.querySelector(`[data-tab=\"${tabName}\"]`);\n        if (selectedButton) {\n            selectedButton.classList.add('active');\n        }\n        // After switching tab, we might need to update its content\n        switch(tabName){\n            case 'skills':\n                break;\n            case 'inventory':\n                break;\n            case 'character':\n                break;\n            case 'achievements':\n                this.updateAchievementsDisplay(window.achievementSystem, window.configManager.getGameConfig());\n                break;\n        }\n    }\n    generateTabsFromConfig(gameConfig) {\n        const sidebar = document.querySelector('.sidebar');\n        if (!sidebar) return;\n        const tabs = gameConfig?.ui?.tabs || [];\n        const cssClasses = gameConfig?.ui?.cssClasses || {};\n        const elementIds = gameConfig?.ui?.elementIds || {};\n        let tabsHtml = '<div class=\"tab-buttons\">';\n        let panelsHtml = '<div class=\"tab-panels\">';\n        tabs.forEach((tab, index)=>{\n            const isActive = index === 0 ? 'active' : '';\n            const tabId = elementIds[`${tab.id}Tab`] || `${tab.id}-tab`;\n            tabsHtml += `\n                <button class=\"${cssClasses.tabButton || 'tab-button'} ${isActive}\" \n                        data-tab=\"${tab.id}\" \n                        onclick=\"uiManager.switchTab('${tab.id}')\">\n                    <span class=\"tab-icon\">${tab.icon}</span>\n                    <span class=\"tab-name\">${tab.displayName}</span>\n                </button>\n            `;\n            panelsHtml += `\n                <div id=\"${tabId}\" class=\"${cssClasses.tabPanel || 'tab-panel'} ${isActive}\">\n                    <div class=\"tab-content\" id=\"${tab.id}-content\">\n                        <h3>${tab.displayName}</h3>\n                        <p>Loading ${tab.displayName.toLowerCase()}...</p>\n                    </div>\n                </div>\n            `;\n        });\n        tabsHtml += '</div>';\n        panelsHtml += '</div>';\n        sidebar.innerHTML = tabsHtml + panelsHtml;\n    }\n    addNarrationMessage(message) {\n        const narrationContent = document.getElementById('narration-content');\n        if (!narrationContent) return;\n        const messageElement = document.createElement('div');\n        messageElement.className = 'narration-message';\n        messageElement.textContent = message;\n        narrationContent.appendChild(messageElement);\n        narrationContent.scrollTop = narrationContent.scrollHeight;\n    }\n    showToast(message, type = 'info', duration = 3000) {\n        const toast = document.createElement('div');\n        toast.className = `toast toast-${type}`;\n        toast.textContent = message;\n        this.toastContainer.appendChild(toast);\n        setTimeout(()=>{\n            toast.classList.add('show');\n        }, 100);\n        setTimeout(()=>{\n            toast.classList.remove('show');\n            setTimeout(()=>{\n                if (toast.parentNode) {\n                    toast.parentNode.removeChild(toast);\n                }\n            }, 300);\n        }, duration);\n    }\n    flashXpGain(skillName, xpAmount) {\n        const skillElement = document.querySelector(`[data-skill=\"${skillName}\"]`);\n        if (skillElement) {\n            skillElement.classList.add('xp-gain');\n            setTimeout(()=>{\n                skillElement.classList.remove('xp-gain');\n            }, 1000);\n        }\n    }\n    updateLastSavedTime() {\n        const now = new Date();\n        const timeString = now.toLocaleTimeString();\n        console.log(`Game state saved at ${timeString}`);\n        // Update the display in the UI\n        const lastSavedElement = document.getElementById('last-saved-time');\n        if (lastSavedElement) {\n            lastSavedElement.textContent = `Last saved: ${timeString}`;\n        }\n    }\n    manualSave(skillManager, inventoryManager, traitManager) {\n        try {\n            const success = gameStateManager.saveGameState(skillManager, inventoryManager, traitManager);\n            if (success) {\n                this.showToast('Game saved successfully', 'success');\n                this.updateLastSavedTime();\n            } else {\n                this.showToast('Failed to save game', 'error');\n            }\n        } catch (error) {\n            console.error('Manual save failed:', error);\n            this.showToast('Failed to save game', 'error');\n        }\n    }\n    showItemContextMenu(event, itemId, inventoryItem) {\n        event.preventDefault();\n        this.removeContextMenu();\n        const menu = document.createElement('div');\n        menu.className = 'context-menu';\n        menu.innerHTML = `\n            <div class=\"context-menu-item\" onclick=\"handleItemAction('examine', '${itemId}')\">Examine</div>\n            <div class=\"context-menu-item\" onclick=\"handleItemAction('use', '${itemId}')\">Use</div>\n            <div class=\"context-menu-item\" onclick=\"handleItemAction('drop', '${itemId}')\">Drop</div>\n        `;\n        menu.style.left = event.pageX + 'px';\n        menu.style.top = event.pageY + 'px';\n        document.body.appendChild(menu);\n        document.addEventListener('click', this.removeContextMenu);\n    }\n    removeContextMenu() {\n        const existingMenu = document.querySelector('.context-menu');\n        if (existingMenu) {\n            existingMenu.remove();\n        }\n        document.removeEventListener('click', this.removeContextMenu);\n    }\n}\nif (false) {}\n// ES Module exports\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/game-engine/ui/UIManager.js\n");

/***/ })

};
;