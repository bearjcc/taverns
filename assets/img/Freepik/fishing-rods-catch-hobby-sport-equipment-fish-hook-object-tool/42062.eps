%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1508.m00.i121.n002.S.c12.257617198 Vector fishing rods.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 8/3/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2015-08-02T16:44:54+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-08-02T16:44:53+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-08-02T16:44:54+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWpJI40LyMERd2ZjQD5k4qgv0/oX/Vx&#xA;tf8AkdH/AM1YeE9zDxI94RkUsUqCSJ1kRvsupBB+kYGYK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUg8xeddJ0a5i09Vk1HXLkVtNGswJLlx/OwqFijHe&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:D153E2A71C39E511B86B8EFE07F7D825</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D153E2A71C39E511B86B8EFE07F7D825</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:71014e2a-37b2-4548-82cc-6ea99ecca0e4</stRef:instanceID>
            <stRef:documentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D153E2A71C39E511B86B8EFE07F7D825</stEvt:instanceID>
                  <stEvt:when>2015-08-02T16:44:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
374.83 349.492 mo
374.818 349.487 374.828 349.48 374.818 349.475 cv
373.496 347.389 371.205 345.821 368.658 345.274 cv
368.469 345.225 368.266 345.194 368.053 345.158 cv
369.617 344.171 li
370.232 343.783 371.73 342.161 371.355 341.568 cv
370.98 340.984 368.875 341.641 368.268 342.022 cv
366.693 343.016 li
366.758 342.797 366.816 342.595 366.857 342.411 cv
367.447 339.881 367.012 337.137 365.705 335.056 cv
365.697 335.046 365.685 335.04 365.688 335.029 cv
364.652 333.401 361.564 331.074 357.299 331.347 cv
353.584 331.589 348.115 333.929 343.162 343.78 cv
348.984 338.171 354.314 337.249 354.314 337.249 cv
354.314 337.249 353.664 336.228 352.93 335.683 cv
356.24 332.544 362.367 334.135 363.5 336.422 cv
363.508 336.426 363.518 336.427 363.521 336.43 cv
364.471 337.968 364.791 339.996 364.35 341.882 cv
363.881 343.885 362.582 345.608 360.609 346.854 cv
349.889 353.875 li
351.438 353.803 351.486 354.524 350.844 356.697 cv
361.961 349.01 li
363.939 347.762 366.049 347.325 368.068 347.763 cv
369.963 348.175 371.656 349.333 372.631 350.855 cv
372.633 350.86 372.639 350.868 372.641 350.871 cv
374.242 352.759 373.018 359.101 368.77 360.739 cv
368.596 359.869 367.951 358.814 367.951 358.814 cv
367.951 358.814 364.824 363.228 357.248 366.091 cv
368.285 365.839 372.754 361.907 374.56 358.65 cv
376.627 354.918 375.855 351.136 374.83 349.492 cv
cp
0 0 0 rgb
f
362.637 364.603 mo
365.092 363.129 366.742 361.639 367.707 360.63 cv
367.742 360.735 367.77 360.839 367.789 360.935 cv
368.021 362.1 li
369.131 361.672 li
371.451 360.776 373.277 358.522 374.012 355.642 cv
374.57 353.446 374.353 351.4 373.447 350.276 cv
372.326 348.55 370.398 347.246 368.281 346.785 cv
367.705 346.661 367.113 346.598 366.525 346.598 cv
364.791 346.598 363.076 347.124 361.428 348.164 cv
350.859 355.609 li
350.846 355.234 350.77 354.903 350.594 354.602 cv
361.145 347.7 li
363.35 346.307 364.795 344.373 365.324 342.109 cv
365.82 339.991 365.463 337.672 364.371 335.904 cv
364.273 335.743 li
364.264 335.736 li
363.264 334.096 360.59 332.929 357.756 332.929 cv
355.58 332.929 353.621 333.648 352.242 334.957 cv
351.379 335.775 li
352.334 336.485 li
352.412 336.544 352.492 336.612 352.572 336.686 cv
351.248 337.124 349.197 337.971 346.818 339.551 cv
350.697 334.025 354.57 332.526 357.363 332.345 cv
357.572 332.331 357.779 332.325 357.982 332.325 cv
361.24 332.325 363.633 333.982 364.629 335.263 cv
364.611 335.361 li
364.914 335.677 li
366.035 337.493 366.406 339.936 365.883 342.185 cv
365.844 342.358 365.791 342.54 365.734 342.737 cv
364.998 345.27 li
368.801 342.867 li
368.986 342.751 369.742 342.103 370.234 341.984 cv
370.234 341.984 370.297 342.547 369.084 343.325 cv
365.305 345.708 li
367.986 346.161 li
368.133 346.185 368.271 346.207 368.404 346.241 cv
370.652 346.726 372.658 348.056 373.855 349.83 cv
373.896 350.197 li
374.137 350.293 li
374.947 351.853 375.432 355.012 373.685 358.166 cv
372.33 360.61 369.314 363.468 362.637 364.603 cv
cp
.301961 .301961 .301961 rgb
f
345.322 340.836 mo
346.021 340.009 353.047 328.172 362.627 333.579 cv
357.498 330.859 349.191 334.498 352.922 336.797 cv
350.018 337.088 346.832 339.729 345.322 340.836 cv
cp
350.799 353.99 mo
368.59 342.693 li
370.234 341.984 li
350.984 354.903 li
350.978 354.873 350.055 354.491 350.799 353.99 cv
cp
360.592 365.302 mo
365.357 363.478 366.703 361.876 367.74 360.116 cv
367.74 360.116 367.84 361.895 368.021 362.1 cv
368.43 362.56 371.627 360.004 371.627 360.004 cv
369.547 362.859 363.881 364.568 360.592 365.302 cv
cp
.858824 .858824 .858824 rgb
f
308.129 377.343 mo
307.73 377.512 308.541 377.19 308.129 377.343 cv
308.129 377.343 li
cp
.501961 .27451 .0117647 rgb
f
277.961 388.141 mo
284.047 388.141 295.859 386.234 303.371 383.201 cv
296.047 384.889 284.518 386.814 277.848 387.238 cv
277.879 387.61 277.914 387.946 277.961 388.141 cv
cp
.239216 .176471 .105882 rgb
f
341.082 365.195 mo
341.027 365.25 340.975 365.307 340.922 365.359 cv
339.978 365.674 339.133 365.74 338.395 365.618 cv
339.15 365.733 339.998 365.667 340.922 365.359 cv
340.975 365.307 341.027 365.25 341.082 365.195 cv
341.076 365.197 341.072 365.2 341.068 365.202 cv
341.006 365.227 340.951 365.264 340.887 365.285 cv
339.967 365.602 339.018 365.577 338.154 365.3 cv
333.935 364.706 334.074 360.133 335.965 357.297 cv
337.965 355.297 341.162 355.631 343.162 357.631 cv
343.582 358.891 344.228 359.878 343.813 361.064 cv
343.85 362.837 342.807 364.507 341.082 365.195 cv
cp
349.996 353.561 mo
345.539 352.849 333.584 351.684 323.734 357.517 cv
313.715 363.449 309.563 373.263 308.129 377.343 cv
308.541 377.19 307.73 377.512 308.129 377.343 cv
298.959 380.917 287.852 385.132 277.674 385.585 cv
277.75 385.909 277.795 386.622 277.848 387.238 cv
284.518 386.814 290.961 386.026 297.342 384.957 cv
301.699 383.816 305.91 382.443 309.705 380.935 cv
310.412 381.082 312.039 381.382 314.281 381.526 cv
321.188 381.365 323.564 380.441 329.256 378.943 cv
339.283 376.209 348.467 365.238 351.236 354.511 cv
350.949 354.095 350.504 353.712 349.996 353.561 cv
cp
.411765 .27451 .0117647 rgb
f
343.719 358.045 mo
341.859 354.996 337.631 354.903 335.332 357.363 cv
333.256 359.568 333.935 364.706 338.154 365.3 cv
336.889 364.894 335.818 363.93 335.352 362.576 cv
334.57 360.295 335.783 357.817 338.057 357.033 cv
340.334 356.258 342.881 357.235 343.598 359.743 cv
343.725 360.189 343.881 361.61 343.547 362.65 cv
344.299 361.085 344.549 360.193 343.719 358.045 cv
cp
.239216 .176471 .105882 rgb
f
351.236 354.511 mo
348.467 365.238 337.465 376.443 327.84 379.318 cv
322.201 381.003 319.81 381.026 314.281 381.526 cv
319.27 381.85 327.318 381.404 335.135 376.775 cv
344.855 371.021 349.961 360.587 351.547 356.211 cv
351.547 355.589 li
351.635 355.305 351.502 354.894 351.236 354.511 cv
cp
f
320.92 375.601 mo
321.414 369.228 323.07 363.351 325.516 357.631 cv
325.152 357.822 324.789 358.014 324.435 358.22 cv
322.967 359.091 321.641 360.061 320.42 361.085 cv
319.66 365.981 318.676 370.896 320.92 375.601 cv
cp
.992157 1 .690196 rgb
f
328.291 356.351 mo
326.662 362.714 326.297 368.996 326.699 375.227 cv
328.02 367.994 331.02 361.203 334.328 354.602 cv
332.188 355.014 330.17 355.597 328.291 356.351 cv
cp
f
343.412 356.386 mo
343.859 355.559 344.334 354.743 344.84 353.945 cv
343.35 353.863 341.666 353.844 339.867 353.935 cv
339.834 354.234 339.807 354.532 339.795 354.833 cv
341.162 354.919 342.439 355.476 343.412 356.386 cv
cp
f
338.115 366.259 mo
337.393 366.089 336.719 365.788 336.121 365.365 cv
335.041 368.037 333.664 370.726 333.83 373.315 cv
335.055 371.195 336.576 368.736 338.115 366.259 cv
cp
f
330.795 362.153 mo
331.742 361.58 332.695 361.03 333.654 360.493 cv
333.709 358.132 335.193 355.935 337.555 355.12 cv
338.041 354.955 338.547 354.854 339.06 354.82 cv
339.305 354.805 339.549 354.819 339.795 354.833 cv
339.807 354.532 339.834 354.234 339.867 353.935 cv
339.685 353.947 339.51 353.95 339.324 353.962 cv
339.076 353.978 338.844 354.012 338.6 354.032 cv
336.928 354.586 335.277 355.217 333.668 355.959 cv
332.662 358.004 331.685 360.063 330.795 362.153 cv
cp
.992157 .890196 .537255 rgb
f
333.668 355.959 mo
335.277 355.217 336.928 354.586 338.6 354.032 cv
337.129 354.154 335.701 354.337 334.328 354.602 cv
334.103 355.051 333.889 355.507 333.668 355.959 cv
cp
.976471 .560784 .129412 rgb
f
317.978 363.33 mo
317.48 365.03 317.02 366.729 316.607 368.422 cv
317.637 367.323 318.697 366.251 319.81 365.232 cv
319.98 363.853 320.205 362.469 320.42 361.085 cv
319.553 361.81 318.732 362.558 317.978 363.33 cv
cp
f
315.637 372.882 mo
316.943 371.86 318.252 370.849 319.568 369.857 cv
319.504 368.325 319.621 366.782 319.81 365.232 cv
318.697 366.251 317.637 367.323 316.607 368.422 cv
316.244 369.912 315.912 371.397 315.637 372.882 cv
cp
.992157 .890196 .537255 rgb
f
325.516 357.631 mo
324.916 359.03 324.381 360.44 323.887 361.863 cv
325.107 360.94 326.359 360.058 327.648 359.24 cv
327.836 358.28 328.043 357.315 328.291 356.351 cv
327.332 356.735 326.402 357.158 325.516 357.631 cv
cp
.976471 .560784 .129412 rgb
f
322.1 367.983 mo
323.668 366.844 325.25 365.741 326.848 364.676 cv
327.025 362.869 327.293 361.059 327.648 359.24 cv
326.359 360.058 325.107 360.94 323.887 361.863 cv
323.185 363.872 322.578 365.905 322.1 367.983 cv
cp
.992157 .890196 .537255 rgb
f
314.986 373.392 mo
314.93 372.384 314.887 371.374 314.861 370.363 cv
312.863 372.701 311.041 375.183 309.455 377.792 cv
311.295 376.316 313.137 374.845 314.986 373.392 cv
cp
f
348.695 354.3 mo
347.006 354.743 345.348 355.269 343.719 355.861 cv
343.621 356.038 343.51 356.207 343.412 356.386 cv
344.088 357.019 344.619 357.815 344.934 358.733 cv
345.971 361.765 344.35 365.074 341.324 366.114 cv
340.836 366.28 340.326 366.384 339.813 366.416 cv
339.23 366.452 338.662 366.39 338.115 366.259 cv
336.576 368.736 335.055 371.195 333.83 373.315 cv
333.664 370.726 335.041 368.037 336.121 365.365 cv
335.137 364.679 334.357 363.693 333.945 362.501 cv
333.719 361.837 333.641 361.159 333.654 360.493 cv
332.695 361.03 331.742 361.58 330.795 362.153 cv
328.998 366.38 327.521 370.717 326.699 375.227 cv
326.473 371.728 326.502 368.211 326.848 364.676 cv
325.25 365.741 323.668 366.844 322.1 367.983 cv
321.531 370.455 321.123 372.986 320.92 375.601 cv
320.02 373.714 319.654 371.794 319.568 369.857 cv
318.252 370.849 316.943 371.86 315.637 372.882 cv
315.445 373.915 315.279 374.943 315.141 375.973 cv
315.084 375.113 315.031 374.252 314.986 373.392 cv
313.137 374.845 311.295 376.316 309.455 377.792 cv
311.041 375.183 312.863 372.701 314.861 370.363 cv
314.834 369.239 314.83 368.117 314.873 366.988 cv
312.063 370.813 310.383 374.653 309.459 377.281 cv
309.24 377.908 li
308.621 378.149 li
302.924 380.369 295.775 383.155 288.441 384.889 cv
295.4 383.649 302.678 381.614 309.137 379.049 cv
309.541 378.887 li
309.963 378.976 li
311.254 379.243 314.744 379.831 319.234 379.541 cv
324.773 379.182 329.863 377.651 334.361 374.986 cv
343.66 369.483 348.238 359.03 349.773 354.792 cv
349.889 354.475 li
349.732 354.45 li
349.435 354.403 349.082 354.352 348.695 354.3 cv
cp
.976471 .560784 .129412 rgb
f
343.719 355.861 mo
345.348 355.269 347.006 354.743 348.695 354.3 cv
347.67 354.164 346.359 354.024 344.84 353.945 cv
344.443 354.572 344.08 355.217 343.719 355.861 cv
cp
.992157 .890196 .537255 rgb
f
317.978 363.33 mo
316.816 364.521 315.783 365.751 314.873 366.988 cv
314.76 369.996 314.949 372.986 315.141 375.973 cv
315.701 371.783 316.742 367.563 317.978 363.33 cv
cp
.992157 1 .690196 rgb
f
366.467 14.1313 mo
366.291 14.0386 366.086 14.0601 365.938 14.1714 cv
365.859 14.2158 365.66 14.3149 365.344 14.4756 cv
353.857 20.2871 341.889 27.9438 333.871 33.3438 cv
313.883 46.8257 284.66 69.0273 250.291 101.814 cv
231.352 119.909 213.124 139.087 196.112 158.817 cv
174.663 183.729 156.085 208.261 139.313 233.814 cv
129.268 249.149 93.0928 306.492 76.0586 337.136 cv
80.0156 336.986 81.4795 345.146 84.9224 346.526 cv
94.2129 325.466 136.424 256.334 145.878 241.067 cv
161.734 215.515 179.434 190.824 199.99 165.585 cv
216.378 145.495 234.01 125.863 252.397 107.236 cv
287.383 71.8413 316.324 48.7813 334.445 35.6694 cv
342.395 29.9189 354.293 21.7324 365.814 15.3862 cv
366.201 15.1738 366.396 15.0659 366.506 14.9932 cv
366.582 14.9443 366.613 14.9106 366.641 14.8672 cv
366.652 14.8491 366.666 14.8296 366.676 14.8052 cv
366.805 14.5615 366.709 14.2603 366.467 14.1313 cv
cp
.188235 .188235 .188235 rgb
f
82.8223 340.956 mo
82.332 340.259 83.2559 341.703 82.8223 340.956 cv
81.7622 339.127 80.6069 337.136 78.9731 336.02 cv
96.7285 304.414 131.935 248.727 140.986 234.91 cv
157.708 209.431 176.236 184.967 197.627 160.122 cv
214.594 140.445 232.777 121.313 251.673 103.261 cv
264.418 91.1025 295.455 63.8677 306.367 54.6934 cv
295.266 64.5767 263.986 92.667 250.975 105.83 cv
232.546 124.499 217.256 139.551 200.826 159.693 cv
180.214 185 158.297 213.067 142.396 238.693 cv
129.855 258.942 93.4775 318.524 82.8223 340.956 cv
cp
.866667 .760784 .631373 rgb
f
42.9048 429.947 mo
40.4507 434.28 33.355 440.412 24.9404 435.804 cv
24.9404 435.804 li
19.5508 432.752 20.9307 423.225 23.3848 418.889 cv
72.8926 337.086 li
75.3481 332.754 78.3384 332.049 83.729 335.106 cv
83.729 335.106 li
89.1196 338.157 90.1216 341.655 87.667 345.991 cv
42.9048 429.947 li
cp
.188235 .188235 .188235 rgb
f
42.0708 423.434 mo
39.7573 427.517 33.5396 433.564 27.0396 430.027 cv
27.0396 430.027 li
22.8813 427.673 24.7017 418.987 27.0156 414.905 cv
73.2563 337.587 li
75.5703 333.504 78.0527 332.649 82.2095 335.006 cv
82.2095 335.006 li
86.3672 337.361 86.9243 340.44 84.6123 344.522 cv
42.0708 423.434 li
cp
.568627 .364706 .176471 rgb
f
41.0732 415.397 mo
38.9434 419.155 33.8535 425.08 29.7969 422.92 cv
29.7969 422.92 li
27.2153 421.456 29.5938 413.858 31.7227 410.1 cv
73.7437 338.596 li
75.873 334.835 77.7041 333.792 80.2866 335.256 cv
80.2866 335.256 li
82.8691 336.718 82.8594 339.258 80.7305 343.02 cv
41.0732 415.397 li
cp
.713726 .501961 .290196 rgb
f
39.6631 408.927 mo
37.7114 412.371 33.6709 418.159 31.8589 417.256 cv
31.8589 417.256 li
30.7222 416.613 33.5981 410.042 35.5493 406.597 cv
73.519 340.738 li
75.4702 337.294 76.7021 336.084 77.8374 336.728 cv
77.8374 336.728 li
78.9731 337.37 78.4497 339.406 76.4971 342.855 cv
39.6631 408.927 li
cp
.905882 .690196 .45098 rgb
f
426.959 184.167 mo
424.875 178.118 420.852 172.943 415.631 169.596 cv
410.525 166.263 404.188 164.574 397.299 164.71 cv
396.244 164.728 395.162 164.787 394.082 164.884 cv
389.041 165.339 383.695 166.681 378.191 168.872 cv
372.398 171.18 366.629 174.296 360.551 178.4 cv
357.836 180.232 355.068 182.266 352.326 184.443 cv
349.973 186.313 347.725 188.395 345.549 190.409 cv
344.6 191.287 li
340.32 195.284 335.967 199.46 331.756 203.499 cv
329.426 205.733 li
324.393 210.561 319.185 215.554 313.934 220.49 cv
313.238 221.141 li
308.258 225.793 303.107 230.604 297.689 235.068 cv
297.668 235.087 li
296.268 236.212 294.816 237.377 293.26 238.3 cv
291.648 239.247 290.012 240.137 288.393 240.944 cv
284.986 242.648 281.512 244.061 278.068 245.146 cv
273.879 246.472 269.623 247.337 265.422 247.716 cv
262.154 248.012 258.896 248.013 255.74 247.719 cv
247.952 247.01 240.479 244.476 234.129 240.391 cv
227.294 236.008 221.952 230.046 218.679 223.148 cv
216.932 219.469 215.838 215.648 215.43 211.79 cv
214.999 207.77 215.319 203.78 216.381 199.93 cv
217.402 196.071 219.326 192.526 221.374 188.934 cv
223.445 185.371 225.787 181.982 228.335 178.863 cv
233.448 172.574 239.674 167.055 246.839 162.458 cv
253.402 158.237 261.07 154.594 269.629 151.629 cv
285.484 146.145 301.998 143.518 320.387 140.882 cv
321.598 140.708 322.809 140.535 324.021 140.361 cv
331.459 139.298 339.148 138.199 346.738 136.76 cv
356.103 134.986 364.873 132.473 372.799 129.29 cv
381.783 125.68 389.857 121.148 396.797 115.819 cv
404.508 109.908 410.861 102.994 415.68 95.2681 cv
420.77 87.1338 424.15 77.9517 425.457 68.7148 cv
426.853 58.855 425.947 48.9834 422.834 40.1665 cv
421.137 35.3779 418.834 31.0396 415.992 27.2705 cv
412.898 23.1606 409.24 19.8315 405.121 17.3765 cv
400.873 14.8276 396.014 13.2231 391.068 12.7363 cv
386.344 12.2559 381.264 12.7471 376.23 14.1675 cv
373.885 14.8286 371.51 15.6904 369.17 16.7295 cv
368.619 16.9731 368.129 17.2002 367.426 17.5361 cv
367.08 17.6099 367.055 17.8926 367.037 18.0991 cv
367.033 18.1348 367.031 18.1704 367.027 18.2031 cv
366.955 18.6685 li
366.912 18.9292 366.855 19.2036 366.775 19.5571 cv
366.514 20.6699 366.131 21.8042 365.603 23.0239 cv
363.793 27.1279 361.02 31.0947 357.123 35.1509 cv
353.191 39.1738 349.283 42.0864 345.178 44.0547 cv
342.563 45.2808 340.24 45.9121 338.064 45.9878 cv
336.77 46.0317 335.563 45.8608 334.477 45.4795 cv
333.906 45.2798 333.357 45.0186 332.848 44.7017 cv
332.719 44.6216 332.592 44.5405 332.467 44.4517 cv
332.365 44.3828 332.25 44.2998 331.975 44.0776 cv
331.631 43.79 331.268 43.4526 330.918 43.127 cv
330.402 42.6499 li
330.721 44.438 li
330.822 45.1504 li
330.861 45.5493 li
330.908 46.0654 330.928 46.603 330.922 47.147 cv
330.912 48.1758 330.807 49.2515 330.609 50.3452 cv
330.246 52.3555 329.576 54.4248 328.617 56.4961 cv
326.805 60.3823 324.135 63.9941 320.898 66.9419 cv
317.295 70.1953 313.352 72.2861 309.496 72.9883 cv
309.047 73.0693 308.592 73.1313 308.143 73.1719 cv
306.387 73.3311 304.682 73.1812 303.074 72.7271 cv
302.047 72.4375 301.041 72.019 300.086 71.4834 cv
299.619 71.2217 299.156 70.9287 298.713 70.6123 cv
297.754 69.8721 li
296.299 68.6367 li
296.805 70.6152 li
296.98 71.3828 li
297.066 71.8276 li
297.174 72.4189 297.26 73.0229 297.32 73.6226 cv
297.438 74.7988 297.469 76.0205 297.41 77.2529 cv
297.293 79.6079 296.857 82.0225 296.117 84.4287 cv
294.703 89.0112 292.258 93.4399 289.049 97.2363 cv
285.412 101.485 281.43 104.339 277.213 105.72 cv
274.766 106.513 272.262 106.686 270.023 106.206 cv
268.836 105.953 267.697 105.522 266.639 104.927 cv
266.119 104.638 265.605 104.303 265.105 103.928 cv
264.975 103.84 264.389 103.356 263.945 102.948 cv
262.246 101.358 li
263.025 103.537 li
263.059 103.634 263.092 103.733 263.127 103.832 cv
263.193 104.025 263.264 104.225 263.313 104.408 cv
263.484 105.014 li
263.637 105.6 263.766 106.212 263.871 106.836 cv
264.068 108.015 264.176 109.27 264.193 110.565 cv
264.225 112.952 263.955 115.47 263.389 118.051 cv
262.277 123.066 260.195 127.85 257.369 131.885 cv
255.811 134.091 254.089 135.964 252.248 137.452 cv
250.137 139.162 247.906 140.321 245.617 140.898 cv
243.232 141.505 240.602 141.435 238.214 140.696 cv
237.061 140.346 235.897 139.841 234.752 139.192 cv
234.222 138.893 233.681 138.551 233.145 138.178 cv
232.754 137.902 li
230.451 136.101 li
230.997 138.219 li
231.163 138.949 li
231.258 139.42 li
231.376 140.042 231.474 140.683 231.548 141.323 cv
231.693 142.569 231.757 143.866 231.739 145.177 cv
231.706 147.68 231.382 150.265 230.776 152.861 cv
229.582 157.948 227.392 162.845 224.442 167.021 cv
221.031 171.811 216.934 175.186 212.593 176.782 cv
210.12 177.688 207.468 177.974 204.991 177.6 cv
203.748 177.418 202.496 177.07 201.268 176.565 cv
200.678 176.322 200.086 176.042 199.512 175.731 cv
199.087 175.494 li
198.501 175.142 li
196.618 173.921 li
197.271 175.964 li
197.619 177.12 li
197.8 177.753 197.964 178.376 198.107 178.971 cv
198.411 180.227 198.667 181.492 198.866 182.727 cv
199.276 185.256 199.494 187.83 199.515 190.377 cv
199.548 195.936 198.692 201.013 196.97 205.465 cv
195.972 208.02 194.705 210.253 193.204 212.104 cv
191.524 214.174 189.48 215.787 187.289 216.77 cv
185.81 217.443 184.188 217.863 182.471 218.019 cv
181.617 218.096 180.74 218.106 179.865 218.049 cv
177.511 217.899 175.001 217.287 172.404 216.23 cv
171.51 215.851 li
170.184 215.235 li
169.408 214.865 li
169.389 214.855 169.363 214.841 169.329 214.844 cv
169.259 214.852 li
169.23 214.944 li
169.856 217.315 li
170.195 218.69 170.465 219.943 170.68 221.148 cv
171.163 223.823 171.432 226.444 171.479 228.939 cv
171.592 234.653 170.565 239.771 168.426 244.149 cv
166.07 249.04 162.235 252.9 157.628 255.02 cv
155.247 256.129 152.696 256.765 150.088 256.914 cv
148.796 256.986 147.482 256.933 146.181 256.751 cv
145.568 256.667 144.921 256.545 144.257 256.388 cv
143.874 256.294 143.582 256.216 143.311 256.135 cv
142.578 255.904 li
141.464 255.533 li
142.319 259.514 li
142.922 262.579 li
143.319 264.692 143.665 266.768 143.952 268.745 cv
144.612 273.327 144.97 277.404 145.044 281.211 cv
145.127 285.992 144.763 290.054 143.932 293.63 cv
142.863 298.223 140.984 301.878 138.346 304.494 cv
137.599 305.251 li
138.062 305.371 138.516 305.423 138.994 305.401 cv
139.123 305.275 li
141.907 302.511 143.884 298.678 144.998 293.883 cv
145.86 290.167 146.222 286.135 146.135 281.195 cv
146.058 277.336 145.695 273.214 145.027 268.595 cv
144.736 266.593 144.386 264.502 143.987 262.38 cv
143.378 259.296 li
142.922 257.147 li
143.006 257.171 li
143.292 257.257 143.599 257.338 144.003 257.438 cv
144.695 257.602 145.376 257.73 146.029 257.82 cv
147.397 258.009 148.78 258.065 150.139 257.989 cv
152.889 257.84 155.563 257.164 158.067 256 cv
162.895 253.781 166.91 249.747 169.374 244.641 cv
171.587 240.11 172.653 234.832 172.539 228.95 cv
172.491 226.401 172.217 223.724 171.725 220.993 cv
171.503 219.752 171.229 218.477 170.887 217.092 cv
170.78 216.677 li
171.975 217.192 li
174.673 218.292 177.295 218.932 179.766 219.093 cv
180.701 219.156 181.639 219.146 182.557 219.063 cv
184.387 218.898 186.115 218.451 187.69 217.735 cv
190.03 216.691 192.21 214.979 193.994 212.783 cv
195.566 210.848 196.89 208.52 197.928 205.865 cv
199.699 201.29 200.579 196.081 200.545 190.384 cv
200.525 187.784 200.301 185.156 199.881 182.571 cv
199.679 181.314 199.417 180.023 199.105 178.732 cv
198.957 178.119 198.789 177.482 198.605 176.839 cv
198.446 176.302 li
199.024 176.63 li
199.635 176.96 200.258 177.256 200.878 177.51 cv
202.183 178.045 203.515 178.415 204.838 178.608 cv
207.477 179.008 210.311 178.701 212.934 177.74 cv
217.531 176.045 221.678 172.638 225.26 167.612 cv
228.325 163.268 230.509 158.384 231.75 153.095 cv
232.372 150.432 232.704 147.773 232.738 145.193 cv
232.755 143.839 232.688 142.498 232.537 141.21 cv
232.459 140.538 232.356 139.874 232.235 139.234 cv
232.118 138.668 li
232.568 138.992 233.543 139.67 234.262 140.054 cv
235.47 140.738 236.702 141.273 237.923 141.642 cv
240.471 142.433 243.305 142.509 245.852 141.855 cv
248.279 141.244 250.638 140.02 252.86 138.221 cv
254.769 136.676 256.555 134.737 258.164 132.455 cv
261.103 128.255 263.182 123.481 264.338 118.264 cv
264.918 115.607 265.195 113.013 265.162 110.555 cv
265.143 109.212 265.029 107.909 264.824 106.679 cv
264.715 106.025 264.578 105.382 264.418 104.769 cv
264.361 104.567 li
264.529 104.7 li
265.06 105.097 265.611 105.456 266.166 105.767 cv
267.309 106.408 268.539 106.871 269.82 107.145 cv
272.219 107.657 274.896 107.476 277.5 106.632 cv
281.887 105.191 286.012 102.239 289.768 97.8564 cv
293.057 93.9609 295.564 89.4146 297.016 84.71 cv
297.779 82.2241 298.227 79.7314 298.346 77.3018 cv
298.406 76.0254 298.373 74.7568 298.25 73.5303 cv
298.185 72.8979 298.098 72.269 297.986 71.6592 cv
297.889 71.1641 li
298.17 71.3711 li
298.643 71.707 299.133 72.0186 299.629 72.2964 cv
300.648 72.8672 301.721 73.313 302.818 73.6221 cv
304.533 74.106 306.35 74.2656 308.219 74.0972 cv
308.697 74.0537 309.18 73.9883 309.654 73.9014 cv
313.738 73.1538 317.728 71.043 321.512 67.6279 cv
324.838 64.5957 327.582 60.8809 329.443 56.8843 cv
330.434 54.7441 331.127 52.5986 331.504 50.5093 cv
331.709 49.3687 331.82 48.2412 331.83 47.1577 cv
331.836 46.5879 331.813 46.0205 331.766 45.4688 cv
331.719 45.0273 li
331.934 45.1836 li
332.068 45.2783 332.207 45.3696 332.346 45.4565 cv
332.908 45.8062 333.506 46.0942 334.125 46.314 cv
335.299 46.7339 336.6 46.9287 337.986 46.8931 cv
340.279 46.8257 342.678 46.1968 345.369 44.9565 cv
349.521 42.999 353.48 40.0913 357.473 36.0688 cv
361.381 32.0581 364.225 28.0908 366.162 23.9404 cv
366.728 22.6992 367.156 21.5449 367.467 20.4106 cv
367.65 19.7334 367.779 19.1274 367.863 18.5566 cv
367.902 18.2817 li
367.904 18.2813 367.908 18.2798 367.91 18.2788 cv
367.939 18.2656 367.988 18.2456 368.06 18.2085 cv
368.889 17.8203 li
371.145 16.7832 373.438 15.9121 375.707 15.2305 cv
380.555 13.7705 385.441 13.1836 390.014 13.5142 cv
394.805 13.8506 399.533 15.2437 403.688 17.543 cv
407.75 19.7783 411.391 22.873 414.504 26.7427 cv
417.379 30.3096 419.742 34.4526 421.523 39.0557 cv
424.801 47.5342 425.957 57.1333 424.865 66.8159 cv
423.848 75.8828 420.807 84.9556 416.07 93.0522 cv
411.57 100.777 405.543 107.734 398.16 113.729 cv
391.469 119.17 383.646 123.827 374.91 127.57 cv
367.162 130.891 358.568 133.545 349.367 135.46 cv
341.254 137.12 332.996 138.311 325.01 139.463 cv
323.285 139.712 li
306.453 142.122 289.051 144.614 272.603 149.883 cv
263.83 152.697 256.262 156.013 249.467 160.019 cv
242.042 164.39 235.554 169.65 230.182 175.654 cv
224.657 181.833 220.204 188.735 216.944 196.171 cv
215.433 199.925 214.618 204.028 214.586 208.037 cv
214.547 211.991 215.229 215.968 216.612 219.856 cv
219.189 227.126 224.016 233.63 230.57 238.664 cv
236.631 243.336 243.949 246.502 251.733 247.82 cv
256.162 248.581 260.779 248.752 265.459 248.33 cv
268.426 248.061 271.428 247.553 274.383 246.814 cv
281.504 245.024 288.389 242.055 294.848 237.985 cv
297.752 235.917 300.439 233.556 303.039 231.273 cv
303.35 230.999 li
305.721 228.894 308.197 226.634 311.379 223.671 cv
316.602 218.804 321.703 213.922 326.904 208.933 cv
342.045 194.44 li
344.588 192.037 347.082 189.694 349.611 187.442 cv
352.141 185.161 354.826 183.152 357.584 181.126 cv
363.5 176.847 369.119 173.504 374.762 170.908 cv
381.256 167.924 387.539 166.089 393.434 165.455 cv
393.697 165.427 393.959 165.4 394.221 165.377 cv
400.76 164.786 406.918 165.749 412.035 168.162 cv
417.668 170.768 422.293 175.284 425.053 180.879 cv
427.684 186.127 428.752 192.219 428.146 198.497 cv
427.609 204.149 425.695 209.909 422.611 215.151 cv
419.973 219.65 416.455 224.05 411.859 228.602 cv
408.18 232.233 403.982 235.788 399.029 239.469 cv
391.295 245.186 382.603 250.612 371.68 256.546 cv
363.691 260.87 355.043 265.157 344.465 270.038 cv
338.742 272.693 333.053 275.204 327.553 277.631 cv
315.838 282.801 304.775 287.684 294.697 293.347 cv
278.473 302.322 266.016 311.292 256.613 320.768 cv
251.253 326.201 247.11 331.695 244.3 337.099 cv
241.452 342.532 239.746 348.646 239.364 354.777 cv
239.019 360.585 240.07 366.1 242.406 370.725 cv
245.08 376.094 249.02 379.417 251.855 381.259 cv
255.09 383.372 258.857 384.919 263.051 385.855 cv
266.188 386.549 269.434 386.895 272.977 386.911 cv
274.652 386.908 276.332 386.83 277.986 386.697 cv
277.977 386.631 277.967 386.565 277.959 386.5 cv
277.957 386.495 277.959 386.49 277.959 386.485 cv
276.435 386.607 274.891 386.684 273.35 386.693 cv
269.887 386.697 266.713 386.39 263.648 385.753 cv
259.557 384.897 255.852 383.459 252.638 381.478 cv
248.602 378.998 245.305 375.552 243.1 371.513 cv
240.644 367.067 239.425 361.727 239.575 356.065 cv
239.642 353.248 240.036 350.321 240.748 347.365 cv
241.482 344.289 242.527 341.344 243.854 338.61 cv
246.453 333.207 250.388 327.715 255.552 322.287 cv
264.611 312.815 276.783 303.826 292.766 294.803 cv
300.053 290.705 307.935 286.758 316.195 283.07 cv
319.603 281.54 323 280.042 326.596 278.456 cv
331.588 276.254 336.75 273.977 341.955 271.603 cv
352.475 266.81 361.088 262.616 369.063 258.401 cv
379.951 252.627 388.676 247.355 396.521 241.811 cv
401.516 238.267 405.801 234.841 409.619 231.338 cv
414.357 226.98 418.1 222.761 421.06 218.438 cv
424.629 213.254 426.988 207.796 428.072 202.217 cv
429.305 195.992 428.92 189.75 426.959 184.167 cv
cp
.403922 .6 .643137 rgb
f
148.71 258.515 mo
149.068 258.753 148.939 259.579 148.421 260.358 cv
148.421 260.358 li
147.903 261.139 147.192 261.575 146.833 261.337 cv
138.116 255.54 li
137.757 255.303 137.886 254.477 138.405 253.698 cv
138.405 253.698 li
138.922 252.918 139.633 252.48 139.992 252.719 cv
148.71 258.515 li
cp
.188235 .188235 .188235 rgb
f
147.016 258.05 mo
147.308 258.244 147.331 258.721 147.069 259.117 cv
147.069 259.117 li
146.807 259.51 146.357 259.672 146.065 259.478 cv
138.974 254.764 li
138.682 254.57 138.657 254.094 138.92 253.698 cv
138.92 253.698 li
139.182 253.303 139.632 253.142 139.923 253.336 cv
147.016 258.05 li
cp
.513726 .513726 .513726 rgb
f
143.774 255.895 mo
143.93 255.998 143.844 256.402 143.581 256.798 cv
143.581 256.798 li
143.319 257.192 142.979 257.427 142.824 257.324 cv
139.03 254.801 li
138.873 254.697 138.96 254.294 139.222 253.899 cv
139.222 253.899 li
139.485 253.504 139.824 253.269 139.98 253.373 cv
143.774 255.895 li
cp
.839216 .839216 .839216 rgb
f
173.946 217.336 mo
174.294 217.567 174.169 218.368 173.666 219.124 cv
173.666 219.124 li
173.164 219.881 172.475 220.305 172.126 220.073 cv
163.671 214.451 li
163.323 214.221 163.448 213.421 163.951 212.665 cv
163.951 212.665 li
164.454 211.908 165.143 211.483 165.491 211.715 cv
173.946 217.336 li
cp
.188235 .188235 .188235 rgb
f
172.304 216.886 mo
172.586 217.074 172.61 217.536 172.355 217.921 cv
172.355 217.921 li
172.101 218.302 171.665 218.459 171.382 218.271 cv
164.503 213.698 li
164.22 213.511 164.196 213.048 164.451 212.665 cv
164.451 212.665 li
164.706 212.281 165.142 212.125 165.424 212.314 cv
172.304 216.886 li
cp
.513726 .513726 .513726 rgb
f
169.159 214.796 mo
169.31 214.895 169.227 215.287 168.972 215.671 cv
168.972 215.671 li
168.718 216.054 168.389 216.281 168.237 216.182 cv
164.558 213.734 li
164.406 213.634 164.49 213.242 164.744 212.859 cv
164.744 212.859 li
164.999 212.477 165.328 212.248 165.479 212.35 cv
169.159 214.796 li
cp
.839216 .839216 .839216 rgb
f
202.132 178.407 mo
202.432 178.655 202.238 179.382 201.7 180.033 cv
201.7 180.033 li
201.163 180.683 200.485 181.008 200.186 180.761 cv
192.914 174.746 li
192.615 174.499 192.808 173.773 193.346 173.123 cv
193.346 173.123 li
193.884 172.472 194.561 172.146 194.861 172.393 cv
202.132 178.407 li
cp
.188235 .188235 .188235 rgb
f
200.658 177.831 mo
200.9 178.033 200.877 178.462 200.604 178.794 cv
200.604 178.794 li
200.333 179.121 199.915 179.224 199.671 179.023 cv
193.756 174.131 li
193.513 173.93 193.535 173.501 193.808 173.171 cv
193.808 173.171 li
194.08 172.84 194.498 172.738 194.741 172.94 cv
200.658 177.831 li
cp
.513726 .513726 .513726 rgb
f
197.953 175.596 mo
198.083 175.703 197.969 176.057 197.696 176.386 cv
197.696 176.386 li
197.423 176.716 197.097 176.894 196.967 176.788 cv
193.803 174.169 li
193.672 174.062 193.788 173.708 194.06 173.379 cv
194.06 173.379 li
194.332 173.049 194.658 172.871 194.789 172.979 cv
197.953 175.596 li
cp
.839216 .839216 .839216 rgb
f
235.465 139.901 mo
235.732 140.185 235.447 140.882 234.832 141.46 cv
234.832 141.46 li
234.219 142.04 233.507 142.278 233.241 141.996 cv
226.77 135.126 li
226.505 134.844 226.786 134.146 227.401 133.568 cv
227.401 133.568 li
228.016 132.989 228.727 132.75 228.994 133.032 cv
235.465 139.901 li
cp
.188235 .188235 .188235 rgb
f
234.072 139.148 mo
234.289 139.377 234.213 139.801 233.901 140.096 cv
233.901 140.096 li
233.59 140.387 233.162 140.437 232.945 140.208 cv
227.683 134.62 li
227.467 134.391 227.542 133.967 227.854 133.674 cv
227.854 133.674 li
228.164 133.379 228.593 133.33 228.808 133.56 cv
234.072 139.148 li
cp
.513726 .513726 .513726 rgb
f
231.666 136.594 mo
231.781 136.716 231.625 137.053 231.313 137.346 cv
231.313 137.346 li
231.001 137.64 230.655 137.775 230.54 137.655 cv
227.725 134.664 li
227.608 134.541 227.767 134.204 228.078 133.911 cv
228.078 133.911 li
228.389 133.618 228.734 133.481 228.85 133.604 cv
231.666 136.594 li
cp
.839216 .839216 .839216 rgb
f
266.805 106.074 mo
267.064 106.348 266.789 107.022 266.197 107.582 cv
266.197 107.582 li
265.605 108.144 264.918 108.376 264.662 108.104 cv
258.391 101.48 li
258.135 101.208 258.404 100.534 258.998 99.9736 cv
258.998 99.9736 li
259.59 99.4126 260.279 99.1797 260.535 99.4521 cv
266.805 106.074 li
cp
.188235 .188235 .188235 rgb
f
265.457 105.349 mo
265.668 105.571 265.596 105.98 265.293 106.266 cv
265.293 106.266 li
264.994 106.548 264.58 106.598 264.371 106.376 cv
259.273 100.989 li
259.063 100.768 259.135 100.358 259.435 100.074 cv
259.435 100.074 li
259.736 99.7891 260.148 99.7407 260.357 99.9624 cv
265.457 105.349 li
cp
.513726 .513726 .513726 rgb
f
263.127 102.887 mo
263.238 103.005 263.088 103.331 262.787 103.615 cv
262.787 103.615 li
262.486 103.899 262.152 104.031 262.039 103.915 cv
259.314 101.032 li
259.199 100.913 259.353 100.587 259.652 100.303 cv
259.652 100.303 li
259.953 100.02 260.287 99.8857 260.398 100.005 cv
263.127 102.887 li
cp
.839216 .839216 .839216 rgb
f
301.605 73.6333 mo
301.853 73.8999 301.648 74.4941 301.15 74.9619 cv
301.15 74.9619 li
300.652 75.4312 300.047 75.5942 299.801 75.3301 cv
293.744 68.8838 li
293.494 68.6196 293.697 68.0244 294.197 67.5571 cv
294.197 67.5571 li
294.695 67.0879 295.301 66.9238 295.551 67.189 cv
301.605 73.6333 li
cp
.188235 .188235 .188235 rgb
f
300.346 72.8823 mo
300.549 73.0981 300.51 73.4653 300.256 73.7041 cv
300.256 73.7041 li
300.002 73.9399 299.633 73.9565 299.43 73.7412 cv
294.508 68.498 li
294.305 68.2827 294.344 67.916 294.598 67.6782 cv
294.598 67.6782 li
294.85 67.4404 295.219 67.4243 295.422 67.6401 cv
300.346 72.8823 li
cp
.513726 .513726 .513726 rgb
f
298.096 70.4863 mo
298.203 70.6006 298.088 70.8872 297.834 71.1245 cv
297.834 71.1245 li
297.58 71.3618 297.287 71.459 297.18 71.3452 cv
294.547 68.54 li
294.438 68.4243 294.555 68.1382 294.809 67.9014 cv
294.809 67.9014 li
295.06 67.6641 295.352 67.5654 295.461 67.6812 cv
298.096 70.4863 li
cp
.839216 .839216 .839216 rgb
f
333.518 46.1738 mo
333.721 46.417 333.514 46.9214 333.06 47.3018 cv
333.06 47.3018 li
332.605 47.6836 332.072 47.7949 331.873 47.5542 cv
326.945 41.6782 li
326.742 41.4375 326.947 40.9321 327.402 40.5518 cv
327.402 40.5518 li
327.857 40.1699 328.391 40.0576 328.592 40.2998 cv
333.518 46.1738 li
cp
.188235 .188235 .188235 rgb
f
332.465 45.4624 mo
332.631 45.6592 332.578 45.9751 332.346 46.1694 cv
332.346 46.1694 li
332.115 46.3613 331.795 46.3574 331.631 46.1611 cv
327.625 41.3813 li
327.461 41.1855 327.512 40.8701 327.744 40.6763 cv
327.744 40.6763 li
327.975 40.4829 328.293 40.4873 328.459 40.6841 cv
332.465 45.4624 li
cp
.513726 .513726 .513726 rgb
f
330.635 43.2783 mo
330.721 43.3823 330.609 43.625 330.377 43.8179 cv
330.377 43.8179 li
330.146 44.0107 329.887 44.0811 329.799 43.9771 cv
327.658 41.4199 li
327.568 41.3145 327.685 41.0723 327.914 40.8799 cv
327.914 40.8799 li
328.145 40.6865 328.4 40.6157 328.49 40.7212 cv
330.635 43.2783 li
cp
.839216 .839216 .839216 rgb
f
370.664 19.748 mo
370.852 19.959 370.664 20.4253 370.248 20.7886 cv
370.248 20.7886 li
369.834 21.1533 369.35 21.2759 369.166 21.0659 cv
364.658 15.9424 li
364.473 15.7334 364.656 15.2656 365.072 14.9023 cv
365.072 14.9023 li
365.488 14.5381 365.971 14.4155 366.156 14.625 cv
370.664 19.748 li
cp
.188235 .188235 .188235 rgb
f
369.701 19.1455 mo
369.853 19.3174 369.805 19.606 369.596 19.791 cv
369.596 19.791 li
369.387 19.9741 369.094 19.9839 368.941 19.813 cv
365.279 15.645 li
365.125 15.4751 365.172 15.187 365.383 15.001 cv
365.383 15.001 li
365.594 14.8174 365.883 14.8086 366.037 14.9795 cv
369.701 19.1455 li
cp
.513726 .513726 .513726 rgb
f
368.027 17.2417 mo
368.107 17.332 368.004 17.5566 367.795 17.7412 cv
367.795 17.7412 li
367.584 17.9258 367.348 17.9995 367.268 17.9092 cv
365.307 15.6802 li
365.225 15.5869 365.33 15.3633 365.539 15.1797 cv
365.539 15.1797 li
365.748 14.9951 365.984 14.9199 366.064 15.0117 cv
368.027 17.2417 li
cp
.839216 .839216 .839216 rgb
f
301.605 73.6333 mo
301.853 73.8999 301.648 74.4941 301.15 74.9619 cv
301.15 74.9619 li
300.652 75.4312 300.047 75.5942 299.801 75.3301 cv
293.744 68.8838 li
293.494 68.6196 293.697 68.0244 294.197 67.5571 cv
294.197 67.5571 li
294.695 67.0879 295.301 66.9238 295.551 67.189 cv
301.605 73.6333 li
cp
.188235 .188235 .188235 rgb
f
300.346 72.8823 mo
300.549 73.0981 300.51 73.4653 300.256 73.7041 cv
300.256 73.7041 li
300.002 73.9399 299.633 73.9565 299.43 73.7412 cv
294.508 68.498 li
294.305 68.2827 294.344 67.916 294.598 67.6782 cv
294.598 67.6782 li
294.85 67.4404 295.219 67.4243 295.422 67.6401 cv
300.346 72.8823 li
cp
.513726 .513726 .513726 rgb
f
298.096 70.4863 mo
298.203 70.6006 298.088 70.8872 297.834 71.1245 cv
297.834 71.1245 li
297.58 71.3618 297.287 71.459 297.18 71.3452 cv
294.547 68.54 li
294.438 68.4243 294.555 68.1382 294.809 67.9014 cv
294.809 67.9014 li
295.06 67.6641 295.352 67.5654 295.461 67.6812 cv
298.096 70.4863 li
cp
.839216 .839216 .839216 rgb
f
138.985 311.094 mo
138.873 311.304 139.033 311.607 139.342 311.774 cv
139.653 311.941 145.006 314.322 145.006 314.322 cv
145.006 314.322 140.061 311.182 139.751 311.014 cv
139.44 310.849 139.097 310.883 138.985 311.094 cv
cp
.721569 .901961 .901961 rgb
f
136.18 316.254 mo
136.068 316.465 136.228 316.768 136.538 316.934 cv
136.849 317.1 142.202 319.479 142.202 319.479 cv
142.202 319.479 137.257 316.34 136.945 316.174 cv
136.635 316.007 136.292 316.043 136.18 316.254 cv
cp
f
136.917 315.015 mo
136.803 315.224 136.964 315.529 137.273 315.695 cv
137.583 315.862 142.938 318.241 142.938 318.241 cv
142.938 318.241 137.993 315.101 137.682 314.935 cv
137.372 314.769 137.028 314.802 136.917 315.015 cv
cp
f
138.264 312.43 mo
138.152 312.639 138.311 312.943 138.621 313.109 cv
138.931 313.276 144.284 315.654 144.284 315.654 cv
144.284 315.654 139.339 312.516 139.028 312.349 cv
138.718 312.184 138.376 312.219 138.264 312.43 cv
cp
f
137.528 313.668 mo
137.415 313.877 137.576 314.183 137.884 314.349 cv
138.195 314.514 143.549 316.896 143.549 316.896 cv
143.549 316.896 138.602 313.754 138.292 313.589 cv
137.982 313.421 137.639 313.456 137.528 313.668 cv
cp
f
119.755 337.162 mo
119.087 337.853 118.599 338.686 118.321 339.602 cv
117.685 339.05 117.155 338.368 116.731 337.556 cv
115.13 334.875 114.286 332.676 113.47 330.55 cv
112.556 328.168 111.692 325.919 109.91 323.402 cv
109.356 322.392 107.858 321.738 106.093 321.738 cv
104.17 321.738 102.091 322.49 100.078 323.892 cv
101.145 321.914 102.131 320.061 103.011 318.409 cv
103.551 317.395 104.049 316.461 104.498 315.622 cv
104.53 315.926 104.61 316.229 104.756 316.528 cv
105.227 317.492 106.316 318.24 108.084 318.815 cv
109.256 319.196 111.451 323.665 113.053 326.929 cv
114.607 330.093 115.949 332.825 116.981 333.742 cv
118.263 334.882 119.41 335.282 121.185 335.219 cv
122.364 335.179 123.103 334.592 123.995 333.683 cv
130.679 337.282 li
130.305 337.696 129.899 338.089 129.464 338.457 cv
129.171 337.922 128.802 337.438 128.362 337.012 cv
127.223 335.912 125.722 335.307 124.135 335.307 cv
122.466 335.307 120.911 335.966 119.755 337.162 cv
cp
81.6548 329.267 mo
81.6548 329.267 li
80.9033 328.853 80.9414 328.84 79.7349 328.21 cv
80.9292 326.175 92.1777 309.315 96.0322 303.049 cv
97.0967 303.36 97.4961 303.747 98.4014 304.318 cv
98.4014 304.318 li
101.042 305.984 101.945 306.581 103.797 307.785 cv
99.1533 315.546 92.7476 327.207 88.9355 333.71 cv
86.9341 332.581 85.0176 331.471 81.6548 329.267 cv
cp
131.462 337.136 mo
131.454 337.146 131.445 337.153 131.436 337.163 cv
129.962 336.383 128.752 335.739 128.36 335.517 cv
128.027 335.327 127.7 335.126 127.37 334.932 cv
126.179 334.228 124.998 333.504 123.808 332.801 cv
123.727 332.753 123.679 332.69 123.62 332.631 cv
123.538 332.717 li
122.484 333.819 121.992 334.19 121.151 334.219 cv
119.65 334.275 118.728 333.957 117.646 332.994 cv
116.76 332.208 115.332 329.3 113.951 326.487 cv
111.544 321.588 110.413 318.54 109.938 318.241 cv
109.031 317.672 105.995 316.787 105.654 316.09 cv
105.264 315.291 105.607 314.344 105.971 313.341 cv
106.104 312.973 106.236 312.608 106.322 312.29 cv
106.259 312.257 li
106.737 311.382 107.212 310.508 107.674 309.64 cv
101.936 305.997 100.917 305.2 95.2593 301.945 cv
88.7725 310.528 81.7837 322.463 78.4302 328.21 cv
82.8589 330.529 87.417 333.71 92.7261 336.737 cv
92.9863 336.268 94.1079 334.029 94.1211 334.005 cv
94.2456 333.757 94.3823 333.492 94.5171 333.23 cv
99.5532 326.856 105.604 324.947 107.694 328.734 cv
110.171 333.218 118.511 350.736 118.551 353.83 cv
118.571 355.242 117.573 358.883 122.786 359.662 cv
122.955 359.686 123.115 359.711 123.275 359.732 cv
122.012 346.553 li
121.375 346.291 120.777 345.914 120.255 345.409 cv
119.029 344.228 118.471 342.615 118.571 341.035 cv
118.613 341.065 li
118.629 340.954 118.645 340.844 118.661 340.734 cv
118.671 340.659 118.708 340.606 118.733 340.544 cv
118.965 339.449 119.384 338.328 120.123 337.503 cv
120.404 337.189 120.727 336.914 121.111 336.705 cv
125.891 334.105 128.684 338.088 129.342 339.407 cv
130.084 341.367 129.703 343.665 128.154 345.27 cv
127.825 345.61 127.46 345.894 127.075 346.133 cv
128.41 360.052 li
130.013 359.667 130.651 358.267 132.173 354.906 cv
133.944 350.997 133.944 350.997 136.14 347.153 cv
137.882 347.543 134.843 353.763 137.563 354.352 cv
138.377 354.516 138.939 349.52 139.165 341.478 cv
139.187 341.425 139.21 341.375 139.233 341.321 cv
138.808 341.071 137.377 340.308 135.684 339.409 cv
131.462 337.136 li
cp
0 0 0 rgb
f
127.377 334.935 mo
127.37 334.932 li
127.7 335.126 128.027 335.327 128.36 335.517 cv
128.03 335.329 127.705 335.129 127.377 334.935 cv
cp
.4 .4 .4 rgb
f
123.995 333.683 mo
123.103 334.592 122.364 335.179 121.185 335.219 cv
119.41 335.282 118.263 334.882 116.981 333.742 cv
115.949 332.825 114.607 330.093 113.053 326.929 cv
111.451 323.665 109.843 319.414 109.337 319.014 cv
107.879 317.859 105.227 317.492 104.756 316.528 cv
104.61 316.229 104.53 315.926 104.498 315.622 cv
104.049 316.461 103.551 317.395 103.011 318.409 cv
102.83 318.749 102.642 319.103 102.452 319.459 cv
103.796 318.585 105.627 318.314 107 319 cv
114 323 113 333 119 338 cv
119.024 338.008 119.053 338.014 119.077 338.022 cv
119.279 337.718 119.499 337.427 119.755 337.162 cv
120.911 335.966 122.466 335.307 124.135 335.307 cv
125.153 335.307 126.124 335.581 126.998 336.05 cv
127.134 335.878 127.254 335.691 127.365 335.498 cv
123.995 333.683 li
cp
.6 .6 .6 rgb
f
107 319 mo
105.627 318.314 103.796 318.585 102.452 319.459 cv
101.719 320.834 100.925 322.321 100.078 323.892 cv
102.091 322.49 104.17 321.738 106.093 321.738 cv
107.858 321.738 109.356 322.392 109.91 323.402 cv
111.692 325.919 112.556 328.168 113.47 330.55 cv
114.286 332.676 115.13 334.875 116.731 337.556 cv
117.155 338.368 117.685 339.05 118.321 339.602 cv
118.493 339.037 118.753 338.51 119.077 338.022 cv
119.053 338.014 119.024 338.008 119 338 cv
113 333 114 323 107 319 cv
cp
.4 .4 .4 rgb
f
127.365 335.498 mo
127.254 335.691 127.134 335.878 126.998 336.05 cv
127.487 336.311 127.954 336.618 128.362 337.012 cv
128.802 337.438 129.171 337.922 129.464 338.457 cv
129.899 338.089 130.305 337.696 130.679 337.282 cv
127.365 335.498 li
cp
f
131.462 337.136 mo
129.662 336.166 li
129.222 335.966 128.784 335.758 128.36 335.517 cv
128.752 335.739 129.962 336.383 131.436 337.163 cv
131.445 337.153 131.454 337.146 131.462 337.136 cv
cp
f
120.123 337.503 mo
120.142 337.485 120.163 337.472 120.182 337.453 cv
120.388 337.229 120.624 337.035 120.88 336.862 cv
120.952 336.81 121.025 336.762 121.099 336.714 cv
121.103 336.711 121.107 336.708 121.111 336.705 cv
120.727 336.914 120.404 337.189 120.123 337.503 cv
cp
f
123.803 338.639 mo
124.44 338.579 125.061 338.678 125.55 338.92 cv
126.106 339.194 126.452 339.639 126.499 340.139 cv
126.973 345.072 li
127.15 344.935 127.323 344.79 127.483 344.621 cv
129.267 342.776 129.214 339.823 127.368 338.04 cv
125.521 336.258 122.568 336.31 120.786 338.157 cv
119.003 340.004 119.054 342.957 120.901 344.739 cv
121.208 345.036 121.549 345.278 121.907 345.473 cv
121.442 340.624 li
121.404 340.218 121.563 339.809 121.891 339.468 cv
122.329 339.017 123.025 338.714 123.803 338.639 cv
cp
0 0 0 rgb
f
160.733 322.256 mo
159.438 321.008 159.29 321.159 157.489 323.025 cv
156.525 324.024 li
156.509 324.748 156.334 325.453 155.985 326.098 cv
153.199 331.271 li
152.77 332.066 li
151.732 333.996 li
152.204 333.608 152.81 333.054 153.583 332.253 cv
153.94 331.882 154.268 331.528 154.541 331.232 cv
154.743 331.018 154.916 330.83 155.052 330.69 cv
159.259 326.331 li
159.47 326.116 159.669 325.913 159.857 325.72 cv
160.686 324.859 161.231 324.223 161.38 323.696 cv
161.477 323.366 161.465 322.964 160.733 322.256 cv
cp
f
127.939 310.988 mo
128.007 310.859 128.083 310.739 128.164 310.617 cv
127.885 310.451 127.62 310.255 127.378 310.022 cv
126.972 309.629 126.664 309.177 126.444 308.691 cv
125.281 314.003 li
125.24 314.196 125.182 314.443 125.114 314.732 cv
124.892 315.682 124.712 316.514 124.575 317.228 cv
125.363 315.769 li
127.939 310.988 li
cp
f
128.348 369.144 mo
125.574 340.228 li
125.556 340.054 125.397 339.881 125.139 339.754 cv
124.807 339.59 124.352 339.522 123.892 339.565 cv
123.34 339.618 122.841 339.823 122.56 340.115 cv
122.464 340.215 122.353 340.369 122.37 340.536 cv
125.174 369.775 li
126.16 369.263 127.263 369.049 128.348 369.144 cv
cp
f
127.996 377.958 mo
126.258 378.087 124.745 376.784 124.614 375.046 cv
124.496 373.476 125.556 372.098 127.044 371.75 cv
127.198 371.706 127.359 371.678 127.525 371.665 cv
127.691 371.652 127.855 371.657 128.014 371.678 cv
129.538 371.799 130.79 373.004 130.908 374.576 cv
131.038 376.314 129.734 377.827 127.996 377.958 cv
cp
124.361 371.526 mo
122.506 373.447 122.561 376.518 124.481 378.371 cv
126.403 380.227 129.474 380.173 131.328 378.25 cv
133.182 376.33 133.127 373.26 131.206 371.405 cv
129.285 369.551 126.214 369.604 124.361 371.526 cv
cp
f
154.113 320.433 mo
150.225 327.825 li
150.151 328.093 146.203 335.468 146.203 335.468 cv
146.037 335.775 145.832 336.057 145.595 336.303 cv
144.585 337.349 143.141 337.638 142.005 337.022 cv
126.459 328.616 li
125.026 327.841 124.578 325.883 125.46 324.253 cv
132.341 310.775 li
131.306 311.294 130.109 311.374 129.022 311.011 cv
128.924 311.145 121.207 325.444 121.207 325.444 cv
120.032 327.627 121.355 330.632 124.155 332.142 cv
140.401 340.893 li
142.772 342.171 145.567 341.983 147.045 340.454 cv
147.271 340.217 147.464 339.955 147.617 339.67 cv
155.167 325.656 li
156.013 324.083 156.397 321.848 154.113 320.433 cv
cp
f
144.756 304.649 mo
143.718 304.375 143.055 304.332 143.055 304.332 cv
142.949 304.273 142.516 304.383 141.847 305.076 cv
141.631 305.298 141.42 305.556 141.217 305.839 cv
141.602 305.959 141.999 306.112 142.396 306.263 cv
143.186 305.577 143.973 305.039 144.756 304.649 cv
cp
.4 .4 .4 rgb
f
142.873 306.435 mo
144.697 305.978 146.19 305.88 147.891 305.892 cv
146.676 305.243 145.596 304.873 144.756 304.649 cv
143.973 305.039 143.186 305.577 142.396 306.263 cv
142.556 306.324 142.711 306.37 142.873 306.435 cv
cp
.74902 .74902 .74902 rgb
f
144.272 307.028 mo
146.162 306.522 148.016 306.649 149.816 307.204 cv
149.196 306.713 148.54 306.239 147.963 305.928 cv
147.939 305.914 147.915 305.905 147.891 305.892 cv
146.19 305.88 144.697 305.978 142.873 306.435 cv
143.337 306.619 143.804 306.815 144.272 307.028 cv
cp
.4 .4 .4 rgb
f
144.272 307.028 mo
145.063 307.389 145.854 307.786 146.617 308.229 cv
148.516 309.332 150.28 310.659 151.722 312.051 cv
152.422 310.453 152.372 309.369 152.151 309.251 cv
152.151 309.251 151.058 308.19 149.816 307.204 cv
148.016 306.649 146.162 306.522 144.272 307.028 cv
cp
0 0 0 rgb
f
139.342 311.774 mo
139.033 311.607 138.873 311.304 138.985 311.094 cv
139.097 310.883 139.44 310.849 139.751 311.014 cv
140.061 311.182 145.006 314.322 145.006 314.322 cv
145.006 314.322 139.653 311.941 139.342 311.774 cv
cp
144.284 315.654 mo
144.284 315.654 138.931 313.276 138.621 313.109 cv
138.311 312.943 138.152 312.639 138.264 312.43 cv
138.376 312.219 138.718 312.184 139.028 312.349 cv
139.339 312.516 144.284 315.654 144.284 315.654 cv
cp
143.549 316.896 mo
143.549 316.896 138.195 314.514 137.884 314.349 cv
137.576 314.183 137.415 313.877 137.528 313.668 cv
137.639 313.456 137.982 313.421 138.292 313.589 cv
138.602 313.754 143.549 316.896 143.549 316.896 cv
cp
142.938 318.241 mo
142.938 318.241 137.583 315.862 137.273 315.695 cv
136.964 315.529 136.803 315.224 136.917 315.015 cv
137.028 314.802 137.372 314.769 137.682 314.935 cv
137.993 315.101 142.938 318.241 142.938 318.241 cv
cp
142.202 319.479 mo
142.202 319.479 136.849 317.1 136.538 316.934 cv
136.228 316.768 136.068 316.465 136.18 316.254 cv
136.292 316.043 136.635 316.007 136.945 316.174 cv
137.257 316.34 142.202 319.479 142.202 319.479 cv
cp
138.829 310.061 mo
135.39 316.425 li
135.316 316.563 135.248 316.695 135.183 316.827 cv
144.686 321.98 li
144.552 321.902 144.419 321.823 144.292 321.746 cv
144.286 321.743 li
144.286 321.743 li
144.151 321.661 144.025 321.582 143.923 321.517 cv
143.086 320.979 141.179 320.075 139.876 319.365 cv
139.86 319.373 139.842 319.358 139.837 319.35 cv
139.842 319.358 139.86 319.373 139.876 319.365 cv
140.721 319.599 143.889 320.773 144.706 321.012 cv
144.706 321.012 li
143.576 320.048 141.328 318.525 140.242 317.696 cv
141.897 318.094 144.558 319.438 145.481 319.563 cv
144.264 318.667 142.194 317.275 140.665 316.086 cv
141.192 316.377 145.817 318.125 146.228 318.25 cv
144.96 317.419 142.382 315.522 141.574 314.94 cv
142.153 315.063 146.535 316.974 146.935 317.097 cv
146.935 317.097 li
146.035 316.188 143.272 314.408 142.567 313.766 cv
143.14 313.95 146.649 315.717 147.501 316.065 cv
147.513 316.042 147.526 316.018 147.539 315.994 cv
146.879 315.319 145.357 314.202 144.612 313.523 cv
144.333 313.361 144.056 313.201 143.813 313.06 cv
141.805 311.896 140.15 310.909 138.829 310.061 cv
cp
.321569 .470588 .501961 rgb
f
136.937 319.37 mo
136.137 318.968 li
134.986 318.454 133.929 317.985 133.845 317.939 cv
132.935 317.435 131.87 317.664 131.473 318.45 cv
127.718 325.839 li
127.384 326.495 127.626 327.332 128.246 327.882 cv
128.078 327.83 127.916 327.76 127.748 327.678 cv
126.369 327 126.251 325.997 126.668 325.174 cv
127.909 322.732 li
126.719 324.934 li
126.212 325.87 126.401 326.958 127.139 327.357 cv
131.294 329.604 li
134.607 326.835 136.192 323.353 136.937 319.37 cv
cp
f
140.174 320.996 mo
136.937 319.37 li
136.192 323.353 134.183 326.605 130.869 329.375 cv
134.078 331.109 li
136.823 330.294 140.884 323.681 140.174 320.996 cv
cp
.180392 .301961 .321569 rgb
f
127.139 327.357 mo
126.401 326.958 126.212 325.87 126.719 324.934 cv
127.909 322.732 li
130.6 317.438 li
131.016 316.615 132.18 316.402 133.192 316.965 cv
133.773 317.285 137.957 319.51 139.173 320.375 cv
139.095 320.297 137.546 319.598 136.137 318.968 cv
140.037 320.926 li
140.747 323.61 136.823 330.294 134.078 331.109 cv
127.139 327.357 li
cp
130.087 316.863 mo
129.877 317.077 129.694 317.326 129.545 317.603 cv
125.839 324.458 li
125.071 325.88 125.44 327.574 126.663 328.236 cv
142.208 336.643 li
142.536 336.82 142.895 336.91 143.277 336.91 cv
143.278 336.91 143.278 336.91 143.278 336.91 cv
143.995 336.91 144.726 336.579 145.284 336.002 cv
145.497 335.781 145.679 335.532 145.823 335.264 cv
149.53 328.41 li
150.299 326.987 149.93 325.291 148.706 324.629 cv
133.16 316.222 li
132.214 315.713 130.935 315.983 130.087 316.863 cv
cp
0 0 0 rgb
f
127.748 327.678 mo
127.916 327.76 128.078 327.83 128.246 327.882 cv
127.626 327.332 127.384 326.495 127.718 325.839 cv
131.473 318.45 li
131.87 317.664 132.935 317.435 133.845 317.939 cv
133.929 317.985 134.986 318.454 136.137 318.968 cv
137.546 319.598 145.578 323.797 145.656 323.875 cv
144.44 323.01 133.773 317.285 133.192 316.965 cv
132.18 316.402 131.016 316.615 130.6 317.438 cv
127.909 322.732 li
126.668 325.174 li
126.251 325.997 126.369 327 127.748 327.678 cv
cp
.776471 .921569 .921569 rgb
f
138.572 309.356 mo
140.205 308.522 142.015 308.052 143.92 307.877 cv
142.96 307.431 142.046 307.079 141.196 306.801 cv
139.576 306.96 138.006 307.411 136.643 308.171 cv
136.949 308.39 137.644 308.813 138.572 309.356 cv
cp
.4 .4 .4 rgb
f
136.059 307.707 mo
136.218 307.849 136.404 308 136.639 308.168 cv
136.639 308.169 136.642 308.17 136.643 308.171 cv
138.006 307.411 139.576 306.96 141.196 306.801 cv
139.697 306.31 138.412 306.065 137.456 305.997 cv
136.75 306.315 136.302 306.86 136.059 307.707 cv
cp
.74902 .74902 .74902 rgb
f
137.456 305.997 mo
136.561 305.935 135.954 306.026 135.755 306.23 cv
135.753 306.235 134.748 306.543 136.059 307.707 cv
136.302 306.86 136.75 306.315 137.456 305.997 cv
cp
.4 .4 .4 rgb
f
151.76 316.714 mo
154.238 318.021 153.733 316.676 153.736 316.673 cv
153.739 316.669 li
153.852 316.474 153.596 315.478 152.102 313.787 cv
151.221 312.791 149.278 310.851 146.149 309.034 cv
145.387 308.593 144.644 308.213 143.92 307.877 cv
142.015 308.052 140.205 308.522 138.572 309.356 cv
142.272 311.526 149.746 315.651 151.76 316.714 cv
cp
0 0 0 rgb
f
130.272 305.205 mo
131.205 305.135 132.016 305.834 132.085 306.766 cv
132.155 307.697 131.457 308.51 130.524 308.579 cv
129.593 308.648 128.782 307.95 128.712 307.019 cv
128.642 306.088 129.34 305.274 130.272 305.205 cv
cp
132.856 309.269 mo
134.165 307.911 134.127 305.741 132.771 304.434 cv
131.417 303.126 129.249 303.163 127.94 304.521 cv
126.632 305.874 126.67 308.044 128.025 309.35 cv
129.38 310.658 131.55 310.621 132.856 309.269 cv
cp
f
158.549 321.54 mo
149.893 316.596 li
149.393 317.473 li
157.848 322.267 li
158.549 321.54 li
cp
f
137.575 311.302 mo
137.623 311.19 137.668 311.079 137.727 310.973 cv
137.802 310.781 137.915 310.605 138.038 310.435 cv
133.974 308.114 li
133.868 308.43 133.729 308.735 133.55 309.021 cv
137.575 311.302 li
cp
f
128.014 371.678 mo
129.126 371.819 130.021 372.727 130.108 373.888 cv
130.208 375.215 129.212 376.371 127.885 376.471 cv
126.558 376.568 125.402 375.574 125.303 374.247 cv
125.216 373.086 125.966 372.056 127.044 371.75 cv
125.556 372.098 124.496 373.476 124.614 375.046 cv
124.745 376.784 126.258 378.087 127.996 377.958 cv
129.734 377.827 131.038 376.314 130.908 374.576 cv
130.79 373.004 129.538 371.799 128.014 371.678 cv
cp
.501961 .501961 .501961 rgb
f
125.303 374.247 mo
125.402 375.574 126.558 376.568 127.885 376.471 cv
129.212 376.371 130.208 375.215 130.108 373.888 cv
130.021 372.727 129.126 371.819 128.014 371.678 cv
127.855 371.657 127.691 371.652 127.525 371.665 cv
127.359 371.678 127.198 371.706 127.044 371.75 cv
125.966 372.056 125.216 373.086 125.303 374.247 cv
cp
1 1 1 rgb
f
147.539 315.994 mo
147.526 316.018 147.513 316.042 147.501 316.065 cv
146.649 315.717 143.14 313.95 142.567 313.766 cv
143.272 314.408 146.035 316.188 146.935 317.097 cv
146.935 317.097 li
146.535 316.974 142.153 315.063 141.574 314.94 cv
142.382 315.522 144.96 317.419 146.228 318.25 cv
145.817 318.125 141.192 316.377 140.665 316.086 cv
142.194 317.275 144.264 318.667 145.481 319.563 cv
144.558 319.438 141.897 318.094 140.242 317.696 cv
141.328 318.525 143.576 320.048 144.706 321.012 cv
144.706 321.012 li
143.889 320.773 140.721 319.599 139.876 319.365 cv
141.179 320.075 143.086 320.979 143.923 321.517 cv
144.025 321.582 144.151 321.661 144.286 321.743 cv
144.286 321.743 li
144.292 321.746 li
144.419 321.823 144.552 321.902 144.686 321.98 cv
145.034 322.183 145.371 322.365 145.515 322.413 cv
145.517 322.414 145.517 322.412 145.519 322.413 cv
146.004 322.677 li
146.08 322.549 146.156 322.421 146.229 322.287 cv
149.508 316.223 li
149.315 316.125 149.161 316.046 149.014 315.971 cv
149.001 315.963 148.994 315.955 148.977 315.949 cv
148.969 315.946 148.961 315.942 148.954 315.94 cv
148.65 315.782 148.37 315.632 147.88 315.361 cv
147.876 315.367 147.873 315.374 147.87 315.38 cv
147.693 315.271 147.534 315.169 147.425 315.111 cv
147.001 314.885 145.999 314.155 144.611 313.522 cv
144.612 313.522 144.612 313.523 144.612 313.523 cv
145.357 314.202 146.879 315.319 147.539 315.994 cv
cp
0 0 0 rgb
f
130.524 308.579 mo
131.457 308.51 132.155 307.697 132.085 306.766 cv
132.016 305.834 131.205 305.135 130.272 305.205 cv
130.984 305.151 131.604 305.685 131.657 306.397 cv
131.71 307.107 131.176 307.728 130.465 307.781 cv
129.753 307.835 129.134 307.301 129.081 306.589 cv
129.028 305.877 129.561 305.259 130.272 305.205 cv
129.34 305.274 128.642 306.088 128.712 307.019 cv
128.782 307.95 129.593 308.648 130.524 308.579 cv
cp
.501961 .501961 .501961 rgb
f
129.081 306.589 mo
129.134 307.301 129.753 307.835 130.465 307.781 cv
131.176 307.728 131.71 307.107 131.657 306.397 cv
131.604 305.685 130.984 305.151 130.272 305.205 cv
129.561 305.259 129.028 305.877 129.081 306.589 cv
cp
1 1 1 rgb
f
103.797 307.785 mo
101.945 306.581 101.042 305.984 98.4014 304.318 cv
93.625 312.466 87.7388 320.703 82.2793 329.604 cv
82.0127 329.462 81.8208 329.357 81.6548 329.267 cv
81.6548 329.267 li
85.0176 331.471 86.9341 332.581 88.9355 333.71 cv
92.7476 327.207 99.1533 315.546 103.797 307.785 cv
cp
.4 .4 .4 rgb
f
98.4014 304.318 mo
98.4014 304.318 li
97.4961 303.747 97.0967 303.36 96.0322 303.049 cv
92.1777 309.315 80.9292 326.175 79.7349 328.21 cv
80.9414 328.84 80.9033 328.853 81.6548 329.267 cv
81.8208 329.357 82.0127 329.462 82.2793 329.604 cv
87.7388 320.703 93.625 312.466 98.4014 304.318 cv
cp
.878431 .878431 .878431 rgb
f
271.673 309.21 mo
271.748 309.167 li
271.644 309.096 271.539 309.025 271.434 308.955 cv
271.514 309.04 271.595 309.124 271.673 309.21 cv
cp
.866667 .760784 .631373 rgb
f
277.044 306.164 mo
276.793 305.983 276.527 305.818 276.253 305.661 cv
275.887 305.887 li
276.086 306.086 276.284 306.284 276.482 306.482 cv
277.044 306.164 li
cp
.188235 .188235 .188235 rgb
f
275.887 305.887 mo
272.428 308.024 li
272.591 308.182 272.75 308.343 272.897 308.516 cv
276.482 306.482 li
276.284 306.284 276.086 306.086 275.887 305.887 cv
cp
.866667 .760784 .631373 rgb
f
277.357 305.986 mo
277.171 305.765 276.98 305.545 276.775 305.339 cv
276.253 305.661 li
276.527 305.818 276.793 305.983 277.044 306.164 cv
277.357 305.986 li
cp
.188235 .188235 .188235 rgb
f
293.75 296.56 mo
294.113 295.899 294.613 295.008 295.227 293.94 cv
276.775 305.339 li
276.98 305.545 277.171 305.765 277.357 305.986 cv
293.971 296.566 li
293.9 296.565 293.816 296.561 293.75 296.56 cv
cp
.666667 .0784314 .0784314 rgb
f
271.591 308.541 mo
257.531 317.228 li
272.252 309.082 li
272.113 308.929 271.738 308.69 271.591 308.541 cv
cp
f
385.209 244.616 mo
384.666 244.939 384.098 245.283 383.516 245.636 cv
384.08 245.298 384.645 244.953 385.209 244.616 cv
cp
.188235 .188235 .188235 rgb
f
383.516 245.636 mo
384.098 245.283 384.666 244.939 385.209 244.616 cv
384.895 244.071 384.42 243.676 383.773 243.402 cv
370.879 251.105 li
371.494 251.565 371.945 251.938 372.201 252.16 cv
372.223 252.281 372.246 252.447 372.271 252.634 cv
373.402 251.826 li
376.768 249.71 380.141 247.66 383.516 245.636 cv
cp
.933333 .0156863 .0156863 rgb
f
383.516 245.636 mo
380.141 247.66 376.768 249.71 373.402 251.826 cv
372.271 252.634 li
372.293 252.786 372.314 252.958 372.336 253.15 cv
372.355 253.236 372.369 253.324 372.367 253.405 cv
372.365 253.422 372.371 253.441 372.371 253.459 cv
372.381 253.554 372.389 253.656 372.398 253.758 cv
372.447 254.051 372.529 254.408 372.525 254.93 cv
385.705 246.72 li
386.012 245.828 385.525 245.16 385.209 244.616 cv
384.645 244.953 384.08 245.298 383.516 245.636 cv
cp
.666667 .0784314 .0784314 rgb
f
278.075 306.845 mo
277.868 306.549 277.661 306.242 277.454 305.932 cv
277.045 306.164 li
277.361 306.392 277.648 306.65 277.906 306.938 cv
278.075 306.845 li
cp
.188235 .188235 .188235 rgb
f
277.906 306.938 mo
277.648 306.65 277.361 306.392 277.045 306.164 cv
276.482 306.482 li
276.749 306.749 277.015 307.015 277.28 307.28 cv
277.906 306.938 li
cp
f
276.482 306.482 mo
272.897 308.516 li
273.12 308.774 273.322 309.054 273.518 309.341 cv
277.28 307.28 li
277.015 307.015 276.749 306.749 276.482 306.482 cv
cp
f
391.853 243.325 mo
391.617 242.602 391.277 241.917 390.859 241.26 cv
390.551 240.78 390.205 240.315 389.805 239.883 cv
406.57 230.09 li
406.773 230.225 407.432 231.036 407.883 231.648 cv
407.891 231.643 407.9 231.637 407.908 231.632 cv
408.047 231.827 407.908 231.632 408.051 231.881 cv
408.637 232.915 408.81 233.714 408.828 234.073 cv
391.853 243.325 li
cp
387.881 245.492 mo
387.691 244.775 387.4 244.122 387.031 243.527 cv
386.723 243.023 386.357 242.561 385.92 242.151 cv
387.666 241.131 li
388.182 241.528 388.58 241.963 388.91 242.415 cv
389.385 243.061 389.688 243.752 389.756 244.47 cv
387.881 245.492 li
cp
385.705 246.72 mo
372.525 254.93 li
372.529 254.408 372.447 254.051 372.398 253.758 cv
372.389 253.656 372.381 253.554 372.371 253.459 cv
372.371 253.441 372.365 253.422 372.367 253.405 cv
372.369 253.324 372.355 253.236 372.336 253.15 cv
372.314 252.958 372.293 252.786 372.271 252.634 cv
372.246 252.447 372.223 252.281 372.201 252.16 cv
371.945 251.938 371.494 251.565 370.879 251.105 cv
383.773 243.402 li
384.42 243.676 384.895 244.071 385.209 244.616 cv
385.525 245.16 386.012 245.828 385.705 246.72 cv
cp
370.627 258.455 mo
370.088 265.036 367.146 275.816 355.094 283.565 cv
355.092 283.566 355.092 283.568 355.09 283.569 cv
355.09 283.568 355.092 283.567 355.092 283.566 cv
354.438 283.986 353.762 284.399 353.053 284.802 cv
334.447 295.329 302.697 295.732 295.385 295.456 cv
295.51 295.225 295.658 294.962 295.816 294.679 cv
296.207 293.979 296.693 293.116 297.273 292.125 cv
303.006 282.269 317.586 259.311 333.885 250.084 cv
350.23 240.838 363.488 247.847 368.559 251.402 cv
369.525 252.079 370.197 252.633 370.533 252.923 cv
370.656 253.669 370.85 255.692 370.627 258.455 cv
cp
409.127 231.273 mo
408.17 229.574 406.873 228.487 406.244 228.847 cv
387.728 239.664 li
369.672 250.077 li
364.297 246.341 350.889 239.61 333.943 249.197 cv
316.873 258.86 301.603 282.956 295.658 293.191 cv
276.533 304.624 li
276.679 304.811 276.824 305.01 276.969 305.219 cv
295.227 293.94 li
294.613 295.008 294.113 295.899 293.75 296.56 cv
293.816 296.561 293.9 296.565 293.971 296.566 cv
277.454 305.932 li
277.661 306.242 277.868 306.549 278.075 306.845 cv
296.705 296.644 li
296.703 296.644 296.703 296.643 296.701 296.643 cv
307.91 296.862 337.514 296.412 355.049 286.49 cv
370.734 277.614 372.656 263.355 372.533 256.219 cv
388.047 247.476 li
392.256 245.126 li
409.719 234.997 li
410.355 234.638 410.094 232.972 409.127 231.273 cv
cp
f
272.897 308.516 mo
272.75 308.343 272.591 308.182 272.428 308.024 cv
271.591 308.541 li
271.655 308.606 271.527 308.475 271.591 308.541 cv
271.696 308.611 272.673 309.416 272.897 309.68 cv
273.518 309.341 li
273.322 309.054 273.12 308.774 272.897 308.516 cv
cp
f
271.77 307.472 mo
270.508 308.227 li
270.704 308.435 270.94 308.616 271.189 308.789 cv
272.427 308.024 li
272.222 307.827 272.004 307.641 271.77 307.472 cv
cp
f
276.253 305.661 mo
276.003 305.519 275.749 305.381 275.489 305.248 cv
275.338 305.338 li
275.521 305.522 275.704 305.704 275.887 305.887 cv
276.253 305.661 li
cp
f
275.338 305.338 mo
271.77 307.472 li
272.004 307.641 272.222 307.827 272.427 308.024 cv
275.887 305.887 li
275.704 305.704 275.521 305.522 275.338 305.338 cv
cp
f
276.969 305.219 mo
276.824 305.01 276.679 304.811 276.533 304.624 cv
275.489 305.248 li
275.749 305.381 276.003 305.519 276.253 305.661 cv
276.969 305.219 li
cp
f
257.531 317.228 mo
271.189 308.789 li
270.94 308.616 270.704 308.435 270.508 308.227 cv
264.689 311.705 li
263.299 312.958 239.448 327.723 265.646 313.651 cv
272.897 309.68 li
272.673 309.416 272.558 309.291 272.252 309.082 cv
257.531 317.228 li
cp
f
406.57 230.09 mo
389.805 239.883 li
390.205 240.315 390.551 240.78 390.859 241.26 cv
396.443 237.958 402.31 235.077 407.883 231.648 cv
407.432 231.036 406.773 230.225 406.57 230.09 cv
cp
.933333 .0156863 .0156863 rgb
f
407.908 231.632 mo
407.9 231.637 407.891 231.643 407.883 231.648 cv
402.31 235.077 396.443 237.958 390.859 241.26 cv
391.277 241.917 391.617 242.602 391.853 243.325 cv
408.828 234.073 li
408.81 233.714 408.637 232.915 408.051 231.881 cv
407.908 231.632 408.047 231.827 407.908 231.632 cv
cp
.666667 .0784314 .0784314 rgb
f
387.666 241.131 mo
385.92 242.151 li
386.357 242.561 386.723 243.023 387.031 243.527 cv
387.66 243.155 388.285 242.785 388.91 242.415 cv
388.58 241.963 388.182 241.528 387.666 241.131 cv
cp
.866667 .760784 .631373 rgb
f
387.031 243.527 mo
387.4 244.122 387.691 244.775 387.881 245.492 cv
389.756 244.47 li
389.688 243.752 389.385 243.061 388.91 242.415 cv
388.285 242.785 387.66 243.155 387.031 243.527 cv
cp
.584314 .501961 .439216 rgb
f
328.639 254.913 mo
328.635 254.912 328.633 254.912 328.631 254.913 cv
328.633 254.91 328.639 254.91 328.645 254.91 cv
330.52 253.477 332.422 252.186 334.342 251.099 cv
334.951 250.758 335.566 250.445 336.176 250.142 cv
336.17 250.143 336.162 250.141 336.158 250.142 cv
336.164 250.142 336.172 250.141 336.178 250.141 cv
348.336 244.179 360.902 246.822 367.695 251.383 cv
367.984 251.393 368.271 251.387 368.559 251.402 cv
363.488 247.847 350.23 240.838 333.885 250.084 cv
317.586 259.311 303.006 282.269 297.273 292.125 cv
297.648 291.778 298.021 291.419 298.395 291.052 cv
302.828 283.77 314.955 265.37 328.639 254.913 cv
cp
.572549 .101961 .101961 rgb
f
345.574 254.327 mo
344.853 253.691 344.084 253.085 343.258 252.546 cv
341.603 253.153 340.103 253.828 338.809 254.513 cv
338.063 254.898 337.338 255.3 336.613 255.698 cv
337.563 256.04 338.488 256.508 339.398 257.094 cv
339.299 256.896 339.23 256.71 339.213 256.543 cv
340.498 254.099 342.969 253.914 345.574 254.327 cv
cp
f
299.949 289.457 mo
303.553 285.627 307.051 281.01 310.713 276.582 cv
307.252 280.374 303.721 284.62 299.949 289.457 cv
cp
f
338.555 260.435 mo
337.303 259.212 335.842 258.013 334.264 257.041 cv
331.053 258.94 328.049 260.968 325.15 263.176 cv
329.15 260.917 333.555 259.771 338.555 260.435 cv
cp
f
345.99 251.648 mo
347.105 252.21 348.193 252.93 349.246 253.807 cv
349.213 253.552 349.1 253.294 348.803 253.053 cv
354.127 252.496 359.875 251.436 365.613 251.356 cv
358.689 249.283 351.685 249.987 345.99 251.648 cv
cp
f
355.818 277.274 mo
355.684 272.609 354.299 266.712 350.768 260.658 cv
349.738 258.896 347.955 256.43 345.574 254.327 cv
342.969 253.914 340.498 254.099 339.213 256.543 cv
339.23 256.71 339.299 256.896 339.398 257.094 cv
341.34 258.343 343.191 260.182 344.926 262.864 cv
347.283 266.514 348.969 271.262 349.457 275.814 cv
350.439 277.744 347.373 283.465 348.803 285.192 cv
350.152 283.942 356.645 282.511 355.818 277.274 cv
cp
.698039 .0705882 .0705882 rgb
f
368.559 251.402 mo
368.271 251.387 367.984 251.393 367.695 251.383 cv
368.424 251.871 369.084 252.38 369.672 252.903 cv
368.33 252.268 366.973 251.764 365.613 251.356 cv
355.803 250.093 352.127 251.942 348.803 253.053 cv
349.1 253.294 349.213 253.552 349.246 253.807 cv
350.852 255.146 352.377 256.865 353.777 259.039 cv
355.506 261.722 356.656 265.234 357.197 268.841 cv
358.146 270.942 358.627 275.723 358.809 277.463 cv
364.613 273.762 368.709 264.768 370.627 258.455 cv
370.85 255.692 370.656 253.669 370.533 252.923 cv
370.197 252.633 369.525 252.079 368.559 251.402 cv
cp
f
346.475 273.388 mo
345.25 270.02 343.467 266.834 341.658 264.105 cv
340.928 263.003 339.853 261.705 338.555 260.435 cv
333.555 259.771 329.15 260.917 325.15 263.176 cv
320.162 266.979 315.5 271.342 310.713 276.582 cv
307.051 281.01 303.553 285.627 299.949 289.457 cv
299.074 290.579 298.189 291.726 297.287 292.911 cv
297.572 292.42 297.943 291.793 298.395 291.052 cv
298.021 291.419 297.648 291.778 297.273 292.125 cv
296.693 293.116 296.207 293.979 295.816 294.679 cv
313.412 293.008 343.199 293.71 346.475 273.388 cv
cp
f
358.809 275.942 mo
358.627 274.202 358.146 270.942 357.197 268.841 cv
358.037 274.435 357.398 280.252 355.094 283.565 cv
367.146 275.816 370.088 265.036 370.627 258.455 cv
368.709 264.768 364.613 272.241 358.809 275.942 cv
cp
.572549 .101961 .101961 rgb
f
355.818 277.274 mo
356.047 281.833 352.127 282.245 351.117 281.851 cv
350.047 281.484 350.439 277.744 349.457 275.814 cv
349.918 280.111 349.313 284.233 347.162 287.078 cv
348.736 282.602 348.092 277.833 346.475 273.388 cv
343.199 293.71 313.412 293.008 295.816 294.679 cv
295.658 294.962 295.51 295.225 295.385 295.456 cv
302.697 295.732 334.447 295.329 353.053 284.802 cv
353.762 284.399 354.438 283.986 355.092 283.566 cv
355.609 281.944 355.893 279.785 355.818 277.274 cv
cp
f
346.02 253.063 mo
348.555 254.489 350.813 256.724 352.736 259.709 cv
354.68 262.726 355.865 266.886 356.215 270.973 cv
355.412 267.484 354 263.744 351.836 260.035 cv
351.051 258.684 349.084 255.65 346.02 253.063 cv
cp
342.77 251.406 mo
341.145 252.007 339.617 252.685 338.23 253.42 cv
337.578 253.757 336.934 254.109 336.293 254.463 cv
333.613 255.929 li
333.676 255.951 li
333.633 255.976 li
326.432 260.232 320.109 265.15 313.471 271.885 cv
318.078 266.242 323.418 260.532 329.025 256.177 cv
329.398 255.894 li
331.314 254.427 333.182 253.179 334.951 252.177 cv
335.539 251.846 336.135 251.543 336.727 251.249 cv
340.185 249.553 343.857 248.494 347.641 248.099 cv
351.65 247.68 355.461 248.049 358.809 248.895 cv
356.865 248.776 354.871 248.822 352.834 249.037 cv
350.449 249.285 348.031 249.764 345.645 250.458 cv
342.635 251.336 li
342.77 251.406 li
cp
343.887 263.535 mo
345.752 266.425 347.178 270.06 347.879 273.689 cv
346.781 270.42 345.047 266.98 342.691 263.423 cv
341.502 261.629 339.182 258.986 336.258 256.886 cv
339.197 257.967 341.695 260.143 343.887 263.535 cv
cp
357.197 268.841 mo
356.656 265.234 355.506 261.722 353.777 259.039 cv
352.377 256.865 350.852 255.146 349.246 253.807 cv
348.193 252.93 347.105 252.21 345.99 251.648 cv
351.685 249.987 358.689 249.283 365.613 251.356 cv
366.973 251.764 368.33 252.268 369.672 252.903 cv
369.084 252.38 368.424 251.871 367.695 251.383 cv
360.902 246.822 348.336 244.179 336.178 250.141 cv
336.172 250.141 336.164 250.142 336.158 250.142 cv
336.162 250.141 336.17 250.143 336.176 250.142 cv
335.566 250.445 334.951 250.758 334.342 251.099 cv
332.422 252.186 330.52 253.477 328.645 254.91 cv
328.639 254.91 328.633 254.91 328.631 254.913 cv
328.633 254.912 328.635 254.912 328.639 254.913 cv
314.955 265.37 302.828 283.77 298.395 291.052 cv
297.943 291.793 297.572 292.42 297.287 292.911 cv
298.189 291.726 299.074 290.579 299.949 289.457 cv
303.721 284.62 307.252 280.374 310.713 276.582 cv
315.5 271.342 320.162 266.979 325.15 263.176 cv
328.049 260.968 331.053 258.94 334.264 257.041 cv
335.842 258.013 337.303 259.212 338.555 260.435 cv
339.853 261.705 340.928 263.003 341.658 264.105 cv
343.467 266.834 345.25 270.02 346.475 273.388 cv
348.092 277.833 348.736 282.602 347.162 287.078 cv
349.313 284.233 349.918 280.111 349.457 275.814 cv
348.969 271.262 347.283 266.514 344.926 262.864 cv
343.191 260.182 341.34 258.343 339.398 257.094 cv
338.488 256.508 337.563 256.04 336.613 255.698 cv
337.338 255.3 338.063 254.898 338.809 254.513 cv
340.103 253.828 341.603 253.153 343.258 252.546 cv
344.084 253.085 344.853 253.691 345.574 254.327 cv
347.955 256.43 349.738 258.896 350.768 260.658 cv
354.299 266.712 355.684 272.609 355.818 277.274 cv
355.893 279.785 355.609 281.944 355.092 283.566 cv
355.092 283.567 355.09 283.568 355.09 283.569 cv
355.092 283.568 355.092 283.566 355.094 283.565 cv
357.398 280.252 358.037 274.435 357.197 268.841 cv
cp
.933333 .0156863 .0156863 rgb
f
342.691 263.423 mo
345.047 266.98 346.781 270.42 347.879 273.689 cv
347.178 270.06 345.752 266.425 343.887 263.535 cv
341.695 260.143 339.197 257.967 336.258 256.886 cv
339.182 258.986 341.502 261.629 342.691 263.423 cv
cp
1 .909804 .733333 rgb
f
352.834 249.037 mo
354.871 248.822 356.865 248.776 358.809 248.895 cv
355.461 248.049 351.65 247.68 347.641 248.099 cv
343.857 248.494 340.185 249.553 336.727 251.249 cv
336.135 251.543 335.539 251.846 334.951 252.177 cv
333.182 253.179 331.314 254.427 329.398 255.894 cv
329.025 256.177 li
323.418 260.532 318.078 266.242 313.471 271.885 cv
320.109 265.15 326.432 260.232 333.633 255.976 cv
333.676 255.951 li
333.613 255.929 li
336.293 254.463 li
336.934 254.109 337.578 253.757 338.23 253.42 cv
339.617 252.685 341.145 252.007 342.77 251.406 cv
342.635 251.336 li
345.645 250.458 li
348.031 249.764 350.449 249.285 352.834 249.037 cv
cp
f
352.736 259.709 mo
350.813 256.724 348.555 254.489 346.02 253.063 cv
349.084 255.65 351.051 258.684 351.836 260.035 cv
354 263.744 355.412 267.484 356.215 270.973 cv
355.865 266.886 354.68 262.726 352.736 259.709 cv
cp
f
324.873 266.359 mo
314.254 274.158 305.33 289.832 305.33 289.832 cv
305.33 289.832 331.945 280.688 336.258 277.463 cv
340.572 274.238 342.197 270.424 341.094 267.693 cv
339.342 263.352 332.916 260.453 324.873 266.359 cv
cp
.933333 .0156863 .0156863 rgb
f
368.84 253.807 mo
368.84 253.807 358.57 267.067 357.756 263.772 cv
356.75 259.694 355.365 257.041 352.59 254.925 cv
349.209 252.349 362.648 249.465 368.84 253.807 cv
cp
f
343.172 256.359 mo
342.012 258.419 347.373 262.587 348.49 264.29 cv
350.188 266.876 351.33 270.994 351.66 274.021 cv
352.998 270.835 351.154 265.695 349.984 262.804 cv
349.492 261.59 344.685 252.823 343.172 256.359 cv
343.172 256.359 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1508.m00.i121.n002.S.c12.257617198 Vector fishing rods.eps)
%%CreationDate: 8/3/2015 3:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KCKh_1de<Q`?e>8fjK)3MYLR8CM'/7SQtY!fS..fc6j1A8B!OW`^\t:HC39UcddB]8i:+rHZa"iL3nC<P<StETYBOaC9'nTF
%s(a?!AJQ9;b2?XmhuC93ms/IlC0fPf:bQt:U0;oU=YE4GenVm%DmgE;X$;NMbcB_X4Xju,7+H&NcV2&V/=k3N\IJ:@]i'j@lclbF
%46'm(#20=[o%Oqn731<qJT'%1eP8-YVY?kV`YgpXnItqQs4E=bD42N*W\C3=BDLE+@*87Wk0m(I>\UU8`HJ(aq_F),\ID==h2N=A
%GsIot5P3814j4V7ULL.TQJ#f[XlsDE2M3XE10Y2Q>5X[V""F5i1B5F&.S'R0577huhedQ,(Ok\/ST/21mHjtpd*f_I):2l1?;MFB
%!+^g3M*9XPc5P5B45rWWg<I3s"o4eI5N9\)3o"\jf3-GC/9m2E%D@_$q+hab0@R@f!7;mRkg.5lo;GcORc^,]c1Z&:5BNJ$Baf6a
%;iR5aCR$epRq>bN#P"g#NiI,]k4SC^&P(Tf3W*75@^"EHNnT/_okF`pYa>`upt=uYfk0bee83)EL'LqBW4#cW`tM`t4PE$?_>2`7
%SI)\E+-^Qi^+,\D@!=_TJCihAI2pNj@Gt7nEa5Rq/h!>Me((V;ctCTq\Vm,pc33\[mP>gSr#<ZUR]4`Pg[1pTcX#dfeQ:Ru/1^U4
%(LsZ!b,b1kS,b1\]f[H`NUX\d5;l<LJ+,8ZU=1fS@DK_F3k\@hU#UY&la8h_%^rDYHMFREmkcq;8+hB3CF3,c+%DZB;5mi>d[?CW
%>DM,#O4h_c?c1)oZWNqckjP<A[TI7fNp)SUfo.]WPhtLdj8VjF52B'[,i&q5\lS\QWn&+P*D="$4VFHf'q6(iOEA!8q1G7QBqMtB
%U1)Q#T;k](Q3M16pVLdmom]PcSk!LLg8rdVFMY1jZi+OMH&;\S8&[(e:=JIqC"+c+SF>#os%^Vh`V'VCL8\-j-$pebG4ul$0<d8r
%Xqn(gb&Oc?32r,tq.?OIP1cnfX%Da^SgPcU53#.X1Z^CG;7!]2PP&0#eMK6M+Ak+DB8f>RhAS3`4e/<Fif.(k=,96R\Vc`^g&86J
%358TV9SJG;5L0i*eOo-Yl+In=9fJtJW^aTb>O<gRD;$T3j9G!Ks.a+s%/<H,oXdW0YoQhZ,U[,G4-b!=]pn]$#/nd1mRaYqnIEMi
%GIq.l#K55?q:<F"8<0PuH+<b>)%if*,a:g@n'!!Sp&<M(CD&l,GG.od1f8)g*:[\k1\94$[71ZCBEO]g_bN9;68hUKF3S=eI%/PU
%V-7b+2/]*DO#Dfb,S0F;p.m6/*mRm^Ai#KkWQX"8J!3*SeW+A8F%DKunP!-5cp))"j19oY;Cpe1lW\tHdOaD(9"BA5@NhW)GVA2)
%WZ7Y<;lh<`G[8LlZi&LOSrR.3&RTb54Am`7YP!%?1:M7bX#<_1#AWo%.chAF6DO?u1EJKDf^:R,8Th,"U="<2DiNP3V"8A+d-.;_
%UK4:]k!m?"YDqIQ/U-i-%Z@H&]c$e4cp=Pf@-?6NfA^Q<h0+K?^X3F*EB@9"dSQ@Gf%7;h4aL,9cIl6t?2PqtU3[cV,W<OeXtH4=
%BSmo!N?T9(o=fVLYN9;<l^_W:H6t[e$5QH2_ZFT5:@]mB@2R\4%Xia5)7n9[bG[@oAs&>!'Plqk^#o4/3`q<JZ4tpP2pHq#YL+#.
%</?Pi92ei./=%tiji2-l;cR]t<B4]larN?t,Tg&of.3u&1,j/,f<<DpYW,=!\ae/1;G`^Z/iV>BVRkP^Q^d8\=2gC-I06jeFGgu[
%IEoApqHU&>9T2/*RSH'C,HC1''[-/6Vlm(fos=L=!uV&H[53c9:SOkQ6=Oi?bD#/@$A\YY;?V<8?aCI9XOq6p.`GS?po07^gmel1
%`r=Q=O,dC@qiXmfTm*E)7Zo0,UF;7:%;A5Ao$;*dlW]<X'7%d%OBE.>=5q/X5>R%"/U`<JB/PZcd'Oa1N]HeY%"[VHSRM:NM=aGD
%.<(5Hh5M0ZCO\5,[A]C'=VkGU[KWO8heKjUC)=(\^@!N'[D!=e8$,PXW*"q#9>u"KU9FBG.NAi=UAp^1;h^]U'k;-^=O?:Bj$+uY
%nXjT`0t-D5>'i&r.:W;N9k2e:TM6Xi9Vg%!R\>bTBQ-BJa$89*0]&c%hoK]!j5h+:$?4IaJleUY@o!2abt@lo/8D(CR#.O@eOl<p
%R;\642gR'RG)CF8d<2Q7Knst7bZNE)#%tU#0^Pn;etC#%QdQGK;gi_Sj!6+j=0]8BKs=tIJ\I#1`t<K8,,Lk&N9=fEa)@Nf1s4u_
%fkXK>@uS+c/B&OIgi0.?1rs=^C9BY>k9#npZ!+>4o?A][:C;=,1lc:5C_c%=MW3GGh*/fo9T2lA#0F#ej0"1(B2`?m2iHci-Oiq3
%)d^#'>AlDp:g#K+&2],VaHUq/.Iju@)0BS5A#@1[9"]TX?B%&:3_WskSXbW;M\@)5alY=;JfTKeI01/C;dGHh-Wk*Xi1po8.h,RP
%k4XjCDL[OOf>!O(5INN:=.@`h(ZUqQ!X8T@8j*3[7u,!6<@3jeUfkpo9?=XX0#?)%@]^DGGG?X;"=&n]nA6^-[D&1Gm_Z$.n)>kL
%[D!>7fLhVWEi%QQho0F>Pu[uo7De4p?54Cma`>[ae6NF5iFHU_Buo)^o?S,*JB;4^^UVkOor)ZJ=1p@*I]C,SUDM*<e#3Ij_eZ,h
%nm/KCLr=Pe[o<Vmp*:f8hDmSA+iRp1Sg:,RlMVfh//bqOG*FaUkGV:\VMd^>?JcXPlEq=!.@*SsZd'l"i8+Y12SQ>*<@bJUQm*ZB
%7-kOM#ao.)h58f3W"bT#pWVX5?h5I2+'X6llWRg+_V))i&^ouT9fS3&os6KnJX]r79K5_#la>Y@a/MH7e*af5;QTk#r0_"S,WN/h
%c'0E,[(Ni:P%$H51tB+3eTEI=)6nT5"[OZ*/,2AD)HrF`]iNCP=K@sgigKDQCBc_k0\[&`D+Z`9&gbe3`a6,W#c<_4@rSts?mJ@E
%lS8)9lXiS[9KsCSR@u$C$Kk,g/4uAC22t%mdct1s:ZEOT;S#H)-tsGQp+l1q(1jd];,X>Pdo_k7oqC0>=HlcqDX@2^9o;A2Z^A"1
%4<jo(VQhOZ9]&_ki7O6HRhUdDAhddk'#l14AJ2X4P8I5^$:h9b26QO%-bFV0WlVU48PEIhONBM=h`?\]SAC2b?^TS--ua<rK3rH\
%RRI-tdgE26aLXTM%*UZBb06*Q?%oG,;n=l`CD/tb;W-f(Y"e07`kbiB+B*:Ik)m%W#CF@eg/M7F;RJ#O[AgAgV.pZ/eY]Y+PcCRS
%C:t[^K4!upT1%\)@LN04%`%<d])";TVq3?9(/1pZoG[D]N,*"['TlG%kab\h<]t<'9+q-BHs13qnlJfHXqlL.r8PZ>8Ygj\kc?s)
%Km[(:ALr_JZl1@M14!@B<P2lWFe&BP/LmN][$=K@rR]3=^J"3grca2?A:@=Im^+IdZms4D/51+I'2TI@;Cb7-Q.k_g.earZ,:^,0
%W>=%5p:?PJXnXZ;nV0!gZ\sU<50,lA62]u51\P8T;tInOdt!Zr2XZq3b+>iBc]0*Yjces8/(MraobNBC>Ff3ppM\LElQcV6n`hHa
%$=)t7-A3;5(2V!^()37'p;pIe:.*_^Q6tC_MKpZ%E]Pc,WHT@rFDY'>'PeQJU[;9<1YumaG#j$,:udO.BdhW5^,\l-&fhQcUik-[
%^M0S&eGhW's'Bi5IK&,>-p0J,\30HaNkbVg7Xi#1k50Xr9u$k4Xeh75A*W[!#4'+Tk<&A4?3B)UqKssRqaiK$Nk(j-lLQ#>Ytoe^
%^\[LsID4`^q9,%uUJ@8]LeQ%k:VEL--NPZ2b-a:T,8(Q2dh\bICOU,PB*tnB%WSm_,9aU`#44%UEF#XB)-*a15=[B3=uec\;hKc:
%C=f=biV=;0q"TLHUrCKjeg^FC\?U[cKktKI];A#n+=!(g-53DjFPMhLg(MM6d1WGWQ/h_h+-h.0C+hH>nl!/(X:9;[:$lRlqq3Xb
%K/_jiZ;^YRe:.*U^,\Id01YOsQ*X54fGFD\:*a_&?"iAs=ADhl^J\6MHJ2]3RANehD/'_N`jNg`'L]Xh1t'Z;UAYNU)7:A[M'VoZ
%D[SkG->oElg1"*sp/cl'Uf:r_Mm$C?!`KZ0Gd^\X]3K_pXA<dJm:E*Jr,9eN;o?f.nFAZ,2)W$?Y2R?e=iBf=X>"I?R2TD/L6nmu
%ASQIX)I=a\"0Gn(a%qk2Htkp8)N_*]O^4`[::(2h8u@r[2^I4d%.bE>D;r$/qQ?#;9m3duS+bBaoMKtq:BtcRV28r`]j7]J2%*3S
%ffr2NK5$I)Ym;g!q]Z\fcJbBrA7EdIeCaB3.n]_<hK[khEE[p-arI;oR/T0PqPQ'g8bBK!J^-uj028K#>o/t/A*OcqSeTB@5GoU&
%R:bQA[4%H;Lt4DRI2\UQ\&nWs;(HDA'UhlZ,q54K4-\`7T&jC.XtT##YOPpdMD*t0UMIU8>E!@t6lk4#\Rd]u)&TiHq2K:.aZ5Tb
%L,K>Vg4FA6NQ0=%]\quGZ*SP18Ag[qOXD["9!O1:/*0aHFJdm%/]LPlR$/q(5[)V*g'$,ZQlT[?CjBd9(hXl5S(]U:=ob/J0uj5'
%"ZO5WO_,&$43!Y/g8Q*&>flcjN\RqO9Sa_LT;/*fMlFSeDRt:?e1?p>`Tlc8,u)+*]JjjqP4#Mb8Yoc6c#Z%+87=TI(`D#LVPn*J
%=DUFlc0.YFWg2!<S*/L4f@k!4h0,W#)J2\0;l.lZY>S(p257;IFY,4?RAF*MCl:j*+/r;kgN]6lekIOhdm?Eg05+O&k]`H%;Gd22
%Y;9^#;ge,2>u)\;e]41s+#W@sBda*C]<7FS^q)h\Z9]_\B3I4WpDJI`;E!`_)1M9?c,3;AfZ7SA"]J!dj0#4RMk41bQG,c4lSR-u
%/]hdC-qtj(h4+1YY;AlhpL#Z?-3\am>0JhUX2jEX(9W=n+EB.eJ,CC!=_a!1b9kK)J-FaW>J)gN`_WBb5"1^]hm(.-VgLPa\m.9/
%1"GE`g>#YsRqd"CD/QAu9sqP'$QMNN/qogCe$Z_*(`mk\oXPZ9#c?nBpo/<`NbtfANA6-SWcM*]DQ;!AV)l)YDLb'?D@tp3d^_;.
%V+\4`WCf*e.c#Qe?9W6Be*rEfY0Yq20<O$6Jda(Arl=tqFt$C[BjHR0?&?>@^i"0uM>Ce;$uQn:)#F@PdmB\e5dl]Q,fn(DaqkSh
%`R=!K7R6W9YuGH;>YJ]:D7+jodo`SD]B_eoPTOA,(j_Kg4hk/#s'=5i*JcY:[j^W0gdLT1&%?RSbW/B+<GQTJa46YJgEufEGrJ.%
%8c9+OM7G/$^PY,@.SYf9OB/9)<%LJMV.)JoZ`j1IXXcj!*-6q:oieD%*;WOT5+Um7)qVL/5>P0g)-:73VZmNq#thl=4TE88T:V-p
%Zq/m%3[IQ?2f?Edo8=!j>Z3*@'ND"*T?::aPq+G#H!Tb+;NqrSWq9@b$ZStsCDNNL'de$ll.gg\^N1SmGrH1\RS%YQW$bj3bJt8@
%dA89&(9`,QY=?2@V32ZJ^,!\Z24j.L,bg4#9Ej++(%inS.%8:H;jljA-PPkcg,m\Kd?UMaZ'UHIEQVd/_>io>ldXScp[6>OM<@NM
%,9D=q:i'1d-YH;V1@l/J&#togG-Nf%eX8g"2ML(33iohemlJg/SC]GG5,N6-c<)UPVo.6\X[.s@3M[g)Vg?K*s$q0Gm.oWU-2o?3
%SFX]".8?E)`pm0K\F[]s\F`SWNK\$ASpkMFT-a,'c?]?==\L)1gqXgl2s[O(,KloWU=;.S1Wt+!jOGRQh;<Ul:0'./Ko+*4e6Rqe
%%22%FY<qp%SqK>'[p,2Pa@mc]<uK3Z1[%mA)80MYR>+VX%Bj'DX4EcD0"YoZ9dXbDFEBl+a/1^L`qpDI524)b/8+8qB43FJKGkL3
%.J0HNObn(@jDO%TT)e'5N=2tC.flQTpY/;=hZu`o"J!`hPD%fSUe$E6(_K$0q,[/fTUmpi?Zq@a+%=HI9(OuEHm[5igb'YF3SfOr
%:?kL[1H7&_?!?Pp?gDL)-L74+BkJX3aA#",XIlaQ2]^/7:!r==d7iAD@[=d[i"/q/OK-%H/CmupBtgAsL,aZ?WFkLNZn(</9ar2r
%JT5^(f.0Eg9co!_LI9p=e`p,Oq/>eG)IiMh67dW8%'K@;UjKW]AK@l&b/q\c)!1mAn@Dr\VI$c9aF]!+UZ4tKpW:2Mot%uc!dV4[
%mEg?lpqnX>Tj5-W(hN9_:?s1sW`Ubm8'T7YZV5E[oe7Ud=,YUDj]FL8Bt@BL=!,h>4/J,ANuuVYZ=ZG1M#QZ:L8>?I+'((3L9i3^
%76;Au=o9rPd1VK1l_biIZWsiMMh9k=\rJFZofm6i([gA.-UNS4;7/'13Ni`^pr`#*c5P4]Bk1e`n=M[r#62=h!jY2nabEDL^6>h-
%Ic,S,V&u99".Q[8D!3sPDr,i5_]*S$cMO7/lNR7`:9Zrs-Shk\T>"Eqo"XGJ%P@hm;Pq!D4?*n\(NVt17F.u'DpNU3)R\=^XCM.s
%$59'-ZpPk@g.aK%dQV(Sn,J$Rl[SEmIr1P9hgBW/ae2]sVG6?_mq=>V=do8T=@)\Q+7B+j402N2ec4s3#Nqbt7PL#Ye4Z>g;B?1a
%2W;TfK1@WrR"IX#\/PHp=PnYL_\ib<:0>X<Wgd?PatS^&n).*(IICS+I][b^8$U`N)Tf.]0cl9QJ!8QmqZ!)\Xf@KnRqA"ep!RP2
%Z8`QE,]5Y-((37+eF9THd4pR/Q>gFpC;8o]Uf_;Ko3[=gIt(BL'oME"Ut^b6loh=c7[fOTG!ri$;-<`@4]t&)nN_?#Zd`]slXs]m
%rdHAT0"-Y!\A1Jr*i@!-s2D\)*?>O\^Ricr]#q.M5K<c=-\.AhWg2#W+l`rjCLnRS7)eF;9-+s+aV4G0-5:h!H:GoZb33?@ShqgZ
%lLVbQL[GCt-Y$`P^'2`EkkQ.dorj>\9tjrKCh8Cp2@1+fd8>7k=ZIO?kN'`iHtdEX#:>C=g>st3O,!^$Hu1FsE>Gs?AWj-D_.:Et
%4deBC@ie3qF$6Z&$#I<o7:kE:]:R=.XibL6R:<LN=>)SUR;T9BIU-h\DF:Bsgiqnf7XAsce'8pll^^M(]BAXbD-<b9EheeWl%fAf
%..JFg(Jh>6/=4\DHrb'SSqe&]Q.GcCgM56mh0m@]A9+5a4gS('[A.?q5LIFRKpbE8&N)AHb#tXrNI'qh$T)S8_qc_!Ob$6-Xd#g\
%T[%k-Vp_SDIo1qg:Y*9TCX7-?GNaco'QkKDGVcXF1GL\ECjO_sE*#+^(uA<fF??dBmrV&Xm[8^um(cBM`l>dD@dT4cCU^pdWc)sf
%Ro(\NrXi`8U;,EM[;r*L4KML4m@P1I&iWT[MBr(C)OY_/O*4Kt_rcF%R3'77E^MPL=&J9/_&:7LbYCRHg$(e`^)+4=m0;C!dBAr!
%?C]b^Z$+nO*_2XcH=Q_U\cA,&ZF3dp#VAia<c>cHcW3sh-hOLep8LVjUY`n`<a';#q4SU$_k'n7CnN:i^OH,BkJ,SsDVNM5q`D"[
%*HsTsID3D+X#ZMg]2C\Lilg`/]Ci7/5:fiZU.2'7)R,W'TD%Q0?LlVGE!I#n\]=6C>+)/HLmrc-$\(R@2PD1O=lcCE$TGNgSPllD
%+C'Umr>4:@A")<Z!d!dp7Z<K&5GD`lQL<=S6+idJMR@UR6_pbBW*sVr6s6RU>*Na/S+Y5YD<j+9N,qB&(i""3kP:uR`0JG\7XmhV
%q!_:F<S:[liG!1>]i2&QB_j>rik4JhI%ioI0&-$"62Op_,C2hdnUQ[6mB:]"s'3thbc%`47ATC=L3B?Wo4"3O[95-tX16"uDD519
%8m9\=7*U]X?eaH#Ha")ik^cj&B-FDom?[7S<,\(tnpl!u*ke_cqk(q,A<RQ\B*dNe@3Dk+D#m:M^lg>9kf#iI7]X>V<J.J:kOCFD
%(#3os4F1>tCs*sJmSJ#kCUVj6Z[Nh+[_8/N@aatuR@,B(VrkVSegTVRd6"o0q4Um(^XJd.o_'\m0'dQ-JTpS2UTT:Mk^37^)tQL]
%.ZVi=Z1DghF[D$(dAfc^\_2l*ljE4=kjqMQVj57FXlFLk4$Jj;25Ur&=4;[9^1Sae3fI.t@qd^B*?NrOotudC;*EBX'mhP<Nb-T)
%R/-A(.T\ZD4ad"ICnEu.891+00^;&]mJ^OjI9$Iu(a:0r[Vm.XSRrBu;sHkC=]#Z=&T2:ZZXWO5FeSc,NUH8Ldu&sg0a2>=gXP8o
%+*=;D\;7VfB4hDXeS80lAa,,62Sm&BrM$i:f;#EPd^E":,K6N`90\>(H"=,<([/:IFJOmce$Q`'UT'@n2eI*(9>]>s1ShIm<h-s&
%fl1WJ5,62,*26K!1V.b_.WNdV/_fqfWd.5&B$V/DT<5Kh_oiq70VYZ1bi-lATh13W3<[n%IVjTDhM7-S2fErAd2OI(eP2e3W:%s?
%]7:"=N-3#MjLH8<.`\q_g>tRDH"`-kQhJNQlUR6*.,H(g[j=FW,W5$TO,HZ62RBoZ,FXk^2*1Fh[.2>jJYn:^9MDF-H<K9?3EpE&
%85^uK:o_gM4<bBuUu)#F<rj2kN$D=mODGg03.!XiRRXOu'JWcYRW1Z%dbDitIuIKDX44)6IU5@@Uf",B\eLL1;4D[lKV&`],op*q
%fLW7fVVu(o@"&j@+FINgP0p@b#c:6,R%"EHm^X1$ZmCZL=5)I\Ph#1u-;;o1!ol:EF9r0neYptkB_'M.&?[K.%uk>Ulj5*[3A/hQ
%_d]rpf`CdS&gR3G?gDn(\jeRFAMkn^TUqRIB\f4NMT3=c)0Cq"C@,iJ3eI3"UIOjR?FuHoTj=^?R+t8[ctTn$\QpM0TGZ*$kn=-a
%AV]-betV1K<:7q6_=U#kChj.`Tcp\4g5+Uc$N1^'"V.DNe?F'n,der0Cq%b@C;\b&U\T',@pjfLRe_SLs'Lb%^J1YBVEWV5GsST7
%mZ=<dK2d@e%1RZ#pZ^%k1_^VMLo/,[/ftgoVddEh1o+]r;7__GE/W:Ya3Q?[SP+VVC=2<'(u=u)Q,uH8TuW_i@t_?Y3d*"WHf8R,
%SQb85b`YFbI8$k\nBACZYuXMf&XP<nWG7[CH:>!)(WAkKQ<=rd\n1-MlfcY14#)J(FCuj$p.C3pc@[$$2lkF\_as2e%%a<%T9fn#
%h3Ra-8YR-slh\0%IBU(D>)sKKbQr!5@PMi6VY9E"?Vtr-C*#gcBWCCFN\(C[R`.%XbY59B2QhT%f=Ha'`G]V1QBZ1->O7rkn5fQk
%ZAL.C-Ej6_mE48iea!pMe[lUa9Voa0EKelu7+L`b^V-QfB!rTp^6Rr&hu#DKPtLGNg1h;cldXYOct9%rRR)W&&F7\\nW2lK.HHa`
%29MJr1*rt_Dh-]H-!J]kHmP@uDKg55,B+#IgG1-8giK')h>]=@]`7cC;Xs_`$iBqS6@Pd,m-J9Q\9@2WqQ9R]#HO,![WU2Kqg?Z#
%ZafT"fooL_e&BSX%pl@p4!fB)9tq&'.EAu/=foR8_XY9]G@g#Sp>O0bI&"*tHDr"60Ioec\!h<;([_.jo/E-hb>,FV>'^%A<6/Yn
%*+'OuZi#@YoF(!Z(B'<?g4f!&o$5:0q:o,$ZUMLS5+-cWh<D!WS@e[on'q[?1eclLH>tpK\%@*6jM-'5l#U`\2>_:dW4hR6^T8uY
%Y('SWCh:rT$M4!QlSHl07l1YCfD;t/X\Rj=bJ'UPY#O:3*p$2OX!dm:e[Hd\mMAK1o>f#Edg,cu&P]jEqXsW!SUTDp;:m:8gr_8Q
%hs]]N([fd`'(:b?%Lj)#T:%43Q/";SX!c3/dW4cII=EmLHN)[Sb3FVgl`3nGiKJI=m[Phn9#Xa,Wm%RcD4\hqb'I%ZS!CVC(+Wa!
%Pk3FP:EM,Ek<=*1S%JEE?idSa9.s%V)TH!-pLPXP.m5k]Hi.XCOam*#EQ.Yo[>sTYZa?Fg:)?pYAZ>0noo=4@Ih;GQ[T-Y8X?J,^
%+fe\*B,9X)I+@+<P;Ra?]XP2XZ$^26D*E'(PZ$0/jP>+@YL^J6/\`fc>1A=O^2Uh_CA2C5:V;I,E%IWoIIBl>>P07k3pS@7"FXA.
%[+(F(Y6p>JbP0V,c$aD;(_7.kE\H4$L9V5,D`I[8glqDBo4rW$mA70sSR;7@^$-&RK/!)62>?1Rg:T%#4aq3.g4-cJ<;umn/"^E/
%A*Rt_n&E7AX8Ild$=CAC:c"/Vcmj&Qk2+5s%X>Sn;<t4AIIt7?EdNN/F+pAZ07U&<M\#7<]u.<t_X2^=hr_@Jo@ntoh9(eD+(#eE
%BpcR)@IHH>oV5Le\9=P-hW:=&\ZPPAp\f`pb'3=%da?a]j7UrtLPkfpaZ&,7.G)06#.m+F?KS[S+21u5ba)VYm_jH(<raYqDIhYK
%4agE0+\R.@"iZb'^%UjKhMZR?io87#DU2(rL[i*(/+./=DU?ra&p2\gQL>j[Dp(oaf)"PES+0n^g[]ZAE9-!U>eV8.4b$f:S(i;"
%nR2_"4?[D$Gb;4/hQ;+/q(-aZ68@=JcS_$&Xj8!#biZ"g]oRL5mal$<8cOfqSXhH<T=NjH>s7_$:=nVdZg1nEV0h^*cGX==XUIU'
%U"a^5T,)W`G4kW@XlV4$hX9J&O*^j(3G^p`^?b+_p9V/\q870uZ%T%&b>fH-\+cmb8&XO]=NGE03#sh_DVES-fa%P50$fupoJ>[\
%7J(;4YKq)fQduQ47m6V-ff,]\FdGS`.NPXp'jNul/Sr+1g65O_hp(bkKh(#=&+e]5jg0?Bp9("A4*c=BqKP#eFO4-ZYJ8ZSpD<a'
%\XfLZ#P?`:qg!*to>Ha9ftu-hk8qmWINg%WmG7[&0h%uP?@LS6f2mtS^B_IP<]G1rp2b0@Q!4.RmcSce5#m7(eV.S3DI'u,@Ccp5
%0<F:5ktIkX^AL[LoT8p13tI7_gHrQLLNG'4Yd67Zpr@iMo:1.7KUuoTa#(VGpHjMjgYC4Hl\ObKl&M67Sa*-.m^F"5k%U4[[^,gY
%2+pZX]d%j-GsAJrFq/Q)SNWnJPT,7P&`dc)=^&Hk8(N#a++77?]!Y`5rKkJber07"($ju*fc'geS@;h)E__(sq!^8=?gjTuXLQ[d
%;oa04"2jah/XeV*c5a%-DgnTkZf/@*A6t<eOH--G`]CMS\jO6H(Sln%gb?Vk'1AnXNd-qt_YHBAVOtNkij;rEducY!G2*I"JqoJR
%EgN0ECjoGnVDhft%tiK[mntq*o:p1US)'e;A2U!Np:UC!]sUP9hEIe9I*2-M-BCC_FX>ncjYo>l+C"^4_<\UtYIX)`@[R/D)LT8#
%4cFG0d2b^6H5>rc:"?WNoH`:n^)`>Zh*2'W(k"+1`CUJB9q#SN29;u29CoOZ:Z)GLbn0NW"?/O$g?`*H(LJf_(I-hd#47a.QT$/G
%Oe,RJn\BQa"R0'sfu*6TSR4@iA-Pa(katVrD3Y9SHI=`%qNFe65EU<A4gP'^Q0gr*d[i@,d$6=E'<g@9oV*grp"c,I)I.Es7j8E2
%qKl@M&#LYNhgJ)aj72DaKoCC1B#1ceI&A^qXLArEi[&"VZIT8QqdmX"\\32?C[3J]U-6p,NcZrS#]hl_T#[>dhd1_5>efqc$asY9
%LPnGL!A*"PH)>PlZ@D')nS71O_9,sGoZ)C=D*9Y/gYO!Sme"XGF8N',5[3R+G^-6Bj+Z0a+qnj4b^St8]fpkg]!Ltq_+_@bdb4Fu
%Gkpo#^3<0EK.+3-.r;?SIVg,m\?2p(WW$>g=LD7YD,h+4(V[$'cTci"HhJ+%Wp^jAV>7epH#I"BoVe'*Is>4S*j.ZpMHh\t^$(.*
%]eRsgk?t>\]Bb_58:Q<p**1\W7j>BIkhs-AY:\6G^"W:P_o*Z_OY#sMr&`%o$I+8.W5#=EUsN@UEA0]."Y<C_lTPdRlY0FQ$*)\@
%F)qh0n!tB%l2?N&9=Wf[l?7=1'G&d(@u]gMkJGETpOG`#4j:ZDq=HB@k2)F_MosV/B?D=#<P>C>A,d52A[\i5h(Nqq%Z1KLcQ#6R
%p=t.!h;$1j]mWIc:Y/QbZoaI[3eqP9'@2#mgk088Wd"AtFTWPZWubN9C:$ucG'Yg9HhM%hk)U/RRVtE+gcc.a\L$E]J%qI?FI;.p
%L=eW3m8d<Nkk3sXWjMA>9<Z"A'cM4<mpSW]Fm=o>%d8tOG?.L'hccfn*ur3In0L^8c@QDa:LDA/U9]4.,St#(HGeA4WIB5qq]N_#
%CU&7f[;](uqD;n>^V7AS3Lf[#YCHNAnBUl6Xb5r=mtGD*i7In_8"Tjt[.tpGAp\)nc[Ij#D5Q%_E%gtJp$Oo?jRIm$n$^p3qL-OO
%m2U"JRuM7W=_fO&Sf9`)T'&TCeO.e>$"g?D1n,k2S]+\-:O.U>lflhV."JAL;7O3be+m#hs#falns5_ogUbpZ%\LJt_PNS,ab)b>
%8%+QoD/F-=V0VsWoC[mFo+$ncI8YUXb;Ea146u2;ZaW]6<dSERn7ulPs39?t`KRjg$?<uQ4/7-5XhJ3.GeR"!d<t`6@+n&^\[D-!
%RO0u(YIAW*=F7UUbS&T@1[6=A>s%00f=5H?\Ak<rerNi^Xbt0]LP8ML<36%#4kF6PCHt\1Df-.CO0>gjSuo`.Eg&p,gj0DZ0`,:j
%SU:/uQ/sP=^O0<>Pg@5B(^4PiP</`n.]bhK,KskqId9R+$jL0XgOJQB7c3W(AuhMA5K['64,Q)TXg'ED_oS4KhZdH=%_gfs7+4B7
%[IPRBFXCO*-OKJY%JK5HUWj''^k7[!%Ng,#oLh)9^H\u\Dcles0a&nSs&ER<T:\bTJ(\.df"Q#B*g"=G"PRoR]2kB,53JH(n-tMs
%rBTEG1VS9MAbkTFqh:$9b,;oLmX7"fk2H#RDJ*m**V\^QZS-e,<0`rd!fSh#a,^QHT/IcX!nlNZ7&uYu#>IG8]75$KrSZ!"%tu7^
%Z@"O>4(!4e1HWJu:R;EmG]A-"PV=>p]l\@?pLM(<%^FQTf%SnHn#2T1iOg'6q6)=;m^Clld$o.$a1&_TjuSaD]XsM9k^3$]QF68I
%fs9ie@C^4+IJ*R&BX.-dbq"tMk&]jB&'l=->$PDrGE.D\qGR@cq6F&i*r<'593^SJ/4EoY:YG0Eq"f67Z8Q(iW/+-Y._"`HIsH4g
%IeWp1^*gk]!\W;C&T;r;,3$jGn,9TCf;nA3SjO(Lqe4j_6mD;b*BNGM+$F).l,q/s%e$0s&Go6-S3rSpl:]HM]`-seEhU)/Fp2Dt
%OC.J3.NIi)X05QAhfT7?SZQ/aa[U[i,4X=dpU9@`7el94OihMmY.\(Cau=XcE\k2dR?co$fE$\4an];dY7!kZ[mt3UU\=Y->8hs/
%51h)_i9Q/'rFG4;2Q\'4&h/_<r7mi,:$_%5&#qa;m+I#q,Ws>RmH+7bLZQX1_U4hgR'][!1Z.A>elQp"Nn7?6Nd%)PIB5>IiM4lW
%i$Q!ihcJ\%D%tTg$gjPM&7*"kHY%1]3aN+2bl]k8%N&ePcT^F],$`hc8\8#cs8%(FITCl>2YY.>p)O"ma2b"ea_BEr2:l"cn\64e
%q0mhTh9fQ,Vt2:mMbYG-;dNR/I/X#N7rkO-m!6(lCTGHtPMFn73=T%Xrf$V\h[quL5!"P7IZ(ZsEdDrjq,XE_r+i?5Qp4h_>FrNT
%mk%u/LEH>uXXEO*Uj7$Nf\,LZ(8-uC$kYYc*m&AJNs\C(:!s9KUU-Pm\C(0DmFf2G>;''HGJ:Kn8+gJ;!8`IK7uq<A*.#B6HM#_T
%?DCW;J]-KaHn1rCqVCo'/!b?S:C>F>gl"_k#X,HJQJR%+-2fHucYSj?Tn%Rr[<Q&7QG5bKkfe0l`5GA\5Fe,Ngud$K#trUYkI+@H
%->i\Fl,rR\`gtsZ),!KlX8Jo/,H]Pp8+4Q(B.`:!]R0gET`tqCXa$jQfCduc-?XZ`ZaNnTCGbZMG':ZM4imH2YL_qX5&BEI\YGQ9
%_pIhd%#4F06UI&\]_H6e-Jl=Xs&Q-MgP>aiCkc5G`,9M$krS:`EgD0cre=88S$c;ncu]XGcPo+.`q+<YHCeNnZO\QdG!Etja5#\k
%+(+YV&@%o^q5V2MQSf64&G=tLn/lg=3d)8TNg?0V>'k*$YFa'Dq.d>-m@9d*K5!KMr,D&M>(4gKhjZ5]H'#'B,PX+`^tE5ZG3YRa
%_YhuGE\'JHG*6S6nJ`P3r`\QppOtGp>KuiK@-@?2$09.uSP<._Q]BAZh^@gj]@Rd[#"Sp$LjlO=q7n`/-%a.brn?/YK/qZ'Y7$])
%Hh*'^j3,%koQk]-cnnEOqYnWXFa^]"5X4/\mdLU?]DQ13oih-M)9gm"f#P!f-p]o!WlHo6Aj8P5H2X[^B5uVG\oFeDKBa\B#c:[/
%n_YFljaq-I2B:rhlSC10hQ<feB<A"DnbsE.H=s[1kU/U?=M//OrNm:3PKloU3,BT/E!Rf*+5[d)P7Uj*QB""'o/n2!5:eq^GpDi6
%1ZlKqnO&#B,`M2pYHJoZZL;u1b+mA:A'LBb!a<Gk_P)BP6H\l"h!Y(IS^$]B>2M#mUMH^Om=SZJOM)*#d6!+o`1LdAhDm0S]m"D0
%]F4Y8X3XjC5*^%R"hVIRr5S_>GklCUG2d^0ru0t*p#>qXQ)--P8L!ibbZT8k7u<'$a&?Hb7uc;!e_T[=ai4!)XkEHX$SPl>K`-,c
%NBu&O%Kb;^kjKO6C,"E0hH>833-N!ibO_:N(%98*LMN\44oDS!]O!?aRF%se9Z?)7d'T+d3O\D&4^RYs(H<7_B(BN`h_!HH+f[Kh
%IU2/@6l4&.db^]N52=Fb(Y%<JpE/;Ek\SuKY5M.b]`*60=o\2lF+O[X#HU$>eE6KF5)e>#\%!'HSB0*QKmc#\[kkSKiGgBAF+%>C
%eS!)@Hf?s[qL(kSmFMj8iJ2bJinedg:CX2gkP!d/Hen&s:KP8Kdc/UHqokS_l#6I;ZPljpB.^l9oGCJO^[_o$pBhE]O%RUe+(")N
%_>FN6]3iBhpspd4d]hPg&'0QUCF!EO9=_0kcf'(2rd^QdI<0^URs7BoBrSULrsfe<dG">AlYBqBZM*tia]kK&$QfS[s5q#NqXiST
%S'CWP6T\YID(jGk9&?Y=Il0;lnS9(^k#c%VDoR5nZG<O6#DCWO5HZSc#`eN%^:hmG!gTt\a18lMl_4(5Ab#"pd\(5Dqc[&!""(]D
%I#NDn\9Rk[n>5^7:(Oo^*O5H:4QpT`+822SPEk]*@ACEFIngEVoUF0Nen8=O".[X0a8(&-(A(bV]nAjSTVK)6LO3fSQV@)^r=Qob
%o.jO]@q3[%ONfG[8_[:Vh`eBV<rDZ>5$*)WCO?$7bSQ73n[\/KereLR@,1Rof;4J/k<%P[qmV?fRV:NuNeDA+DS32]+GTeQ9-\iP
%[I\a'GJ9l1>&qN5\[>L[+l0lCH+HXqXgQT@kLA&:qi/5HgU0h$_rH/YdPSGrYj#f8k4VPBD9VSNSoeK7qBH"K>WsH6,iHnENG>l=
%.1Gl]k.f#8*#RjeKrP-*!a`.+mDA^N'R2kQH*+b3Z*Y?n]3_UERX0Ub7D']YY39"5W`RQa<f7Ed@8TSti!5%3a'HBYfBT2rB)O81
%eGlUA!PkDFT7b_#f.8fu8N?@dh?cn.;f"pkp.:K'.?0`reAgiYR6OKA>,G<t"(tH3A[$\fIP3l7lp[f(_F(;@9k,GK:pQLu/af#*
%gQM=-3rW:NA/]OqR<gFuabK:AUsn@5V3\+1jLn75hT]\Hi1u!/6qGh1USC_OWGoLb0iK[HHTtB$L/ptq-$;4OW3K&1hP_/K/[*os
%N,6Ka<\kbbFoA7#Th6iaWL]apG'4.#`d:BBQ^X1/Dt*3A-aMJZf#ktoAJ+4tl)ta%mmi0%.aak;cq_a^<,+RYg)&f'q\sb.CG+pt
%eRXQuR[9lTol[rLDkuSW.0krD1\R9&ZWG6)8^V]/3^2/;`,p5"P=[F\MJBhmn&qRH:'QTrd7.J$f8*#Z8*,(rCPNMIUj6=9U=)!^
%9;omm<1WZHDOa@T#6jFR^4?FHggN?;:3'5E^X[5)d`Y7bHj(FY.lHXJ`V*p6B9XCi_!J9.,rlK\SOOoIs0LQEh&MQ02Y=tZ;7UR3
%hoq-4'JT10^&KFe-D<@ih&+8>(f:t)1+(Om9U?Dg;]bu%kcnT#972@HZ&]t;6,=.%F0t7=Z7^ONF,sEh:Q!'OCQ\M">-F2A.G6L3
%9[8[OlV5A>25e:"@3gnkpFYL+@\eS<Gr_qh,;q]'?,"kehRU>6FE0@g@QW:*l'rdFMNqp#:6"1AZib_F`.fQ=TBA94^#]IJV)$eC
%k7DjC?>K";^XM[t_9orf_K0GdMq$@om.U8_>7SV1,Kt&T8gIZ4^Hkpfm>WmCH^1AKV$1PlGPQ2Z3P"[p)YJ\-IefAqMgV@t)#Zn6
%7U;ISlY3A;`E,;8;-F1Z[gS/cE[K]Do#5.H;-.]"S4?o>+fs?;.TE4C[s.XCSKfm+[L.`Q$L>RG<YORLArBs.79Z?85[@@Ao+cq)
%[G(_,LXhp<[;-Il]c#Ulk,ROCe_LLpl`%C<;-!&[QHctDW8,:7=>9$THbSUYJrY3r8!snPi4j`.;*)d3f;1]:5W95RrN@)VSPc_]
%bo3YM1q,acYhs=48<&te#LlqaJ*VWR^J1_s@A4#%F:Nf<kP_$?7':OOLOi?Qjp(r7(W&@'6iOJB?#Ig&j@B.7khlF*n5L<-q=kNG
%b4_BB?s>+e?oqfJ$+7dG$rqjgTRh#o(o2eo@:6X6F02D(bUVJW;36nZqH5lcHtoUcg2\(l;D3p=o7F(,#$O:GG8u'uTT0fk#-+Xm
%J@%hZPX-d@jB]sZ^&aoDIQ+'6qV7j0<PB2W@r.bSSum9u2XQ:%GrEB2o-]XF.ShJtfriL@Q$#5n;b>gT")3Qu1e.rppnjVF=Rl<:
%:O9@SEb."4edH=NXJKV0Rf`7g5EN=&k_0n)!p)EDE^Rk`OR!jIUM,+DN9=goLCRe0[_lnm=ErGqXqgZHp9TYU,`nMgAZ'C32TbW'
%2D36DhBf,\L>:,`Gf:(H!'^\Od$?U23[W*id]ls_%C&812cNr'GA'KP5H@.82?MRI0[/1WZS#_m!Snlk6(K.!PcLXi:]iRgH^(F.
%Hp3i)9+?0]WF6o^BtI-k<\c4ck(K-515+gN]NgNeKr/e#RX,Hl=bdf,0CoY_l*4agaL'3PN?-AKg+ijE^<hrEU)?U2N`Mii!.c[b
%15<B;Q/WHiOCpg<H34NQGk2p41?T<s4rQJ(mRdsD`%;"CY)aqY(!qAle$e@sH!>lN-V"i208sNI3!m1K<lg'uP]6j!*2#fP;/(5n
%U;/lmAK@79(I3m2%taoo7n[(PC1+MdAHTum@U2b`L6nU>.'P2Qgp4d^E1'JJ%UHX-52A=j>g&8a9/g5,61\+LKLDJu(<iGP)L@j!
%`:7;ZF9CcngG0&.#=3I_Z[#YH$b)>!$_TO7:_/r:+B^B`JJJf7Vgs0+6E<H'[%jm[KHraTA-TupP-]8J/;^oXTm_t<7f2N+nO3`I
%G.PCE%(oF,oa>'Eh%<X`[`^)`JPJ7VdLI.Z"N"WjfV$Ru(aD=*!ko%ao)]l__oJipX;G/Zq3jmVlS/]d5qjlXR-8XZrmAiA$HmC"
%LDFj/1_W)0J?Z44T,>fFAh5tjU+^DF8<D0\9#Q7(l?stX@^\c_YjB.MSjN&Mbf7$r[l"&&I,>1!7L+ZTr5"?4_l7o`"DE`_D!F\B
%Q%]tCm\08+A!J^F7_?MBNLcD_Kc?[PF&W%5*R;oPUg8#*ZGuqKHijZhg'4U.VK.0#=r(C;6#f3t_*EtG/&P6JhT2s3*8bfSMmUh&
%Ptm/B!Ogn4As][$UHCOr3_nS<jVg1?-[aH6EGIa!a0ML&6g=u)2+B9eDei.lV/`%;a%fhW`j^l9V%Rr>\0s2M#D*iU@FtWI4_AsB
%;T^m,h9_MclY>&9!L3e]Kk,>\dA?AE-IdkfT&@s*QjX@\N#D6#Abq'C!2\C+:rbFT6`;5Oa.*eSg;<5)O;eNU!dZ7J-:Q's@\SMG
%+GLTL,h+%Yo/oBQSPXt?)tJoB\q#/]_=]ONP2KQ;/NY<#8om?iL_EX&5'<aM+<o$.6H_rFU\:+r'@_5B1Dtdj[c'G7bq5Mr$migl
%+T_;H5o9l#&nX[f_KXh?#K2#>V1sA]]+'VcBpfP2Eki*>U`&/],D:gA'2$r2mUe5gCJKC68`iak.d-pSV%"pi%LGr[>nY^:D)99+
%733RJi48A36Ju[4%n(H&&NGS;iiY%p&n-oGg3&5Z)AJ#S'A=6F+*/[;,@K%?pP\a!G0kd'7*WI@a]u%m+>l((%q?/l+9I5t$\0t1
%,`'s8#7RZ=A'P/7,[du+eC3s]Boq+P-;quW;q.!OT6mLVK-MWQ#-l*:A5UN>3$H49!YK4*;3'"_;(`-]OUGle]EC0I)\^_E!tiu*
%?%`n:J(otq'n+h4&2O`)+WC)i;b1/$=f/Y.JrbJ;+p=P@(N^gZaXH$[m:Jb@Q;NmfAZJ;+L'VQA_nmtH#D!J5GuNVB12P,gd^j@b
%IIWM@4d!S*Cm5n?TFaneT(u'J$)E,Cck14#"[Y0fbN_Pn"l4h$NJ.?W0a/a/K<cCZ#q62Id:b'skda#u)/hHf<\%TTTYb+=$k6nt
%C!Gbq+aRQI:Zr\FHus%TCDZ'Yd!d+:AN5aK=QU*'R?ir\&HVD'>84OE&GdF?jTe28k_C?>$!`f6'^[gWYip$.k^!792VK&<6eF$T
%W\@PF$iMhsf+sVR'-Xe-CtGtX0L*u1KltP/nTY*rB"NW=fS4RC,A21[S,Qi<3t][[ah"/n6D$/`gp1aYl"O'5S%'L1Nui#fF$r/1
%Y`<'?hCqS8Q%ish(g<XM6OFNr9fUH+?D:s'h%.EdN"-LW[2=f"ALK(["L24P8959ITSnI&g;Q)1KlU<=(D4^(iooBh@rlT/&<COM
%9?ojk:fjALadEa+F?tjdKbQVcapcH0%\Odbln#6B@\uJ#*N]/W#%.RQ,*5j`LVbKV/bIHB7(rlLpQt<g_mdBW/1)OXB(=ItFr+[k
%m%kp86prqbYkCYA`2+c#6%k#3VA4p&]3tNSmdR=j*/`ju`X7=/9O03*InCh5_#@SdF`h)IS%hu+E/FS##2lIGO_,"NcLX;mI-'Ba
%D:=?:!Njf?Z!_-o(@cuJ?B"R"J7].2N>ASt-UtW`8gk7oOb%-j7a$f<Z@F2N9CWIbkp5^YU'.5QUT=]l-tsMWE*-3O88?/">#o2m
%JVZo$Ab+%Y'UDLe&CUE*3HrTOaqPZn!`1upmYI2`!mnIiAV=eDk<0X_*+KW>>OQl11a9ebdKpd`jH)4l%,X0ZZc%L/^a=lG@lXNU
%;9X"o6'YrE.>L;Og,C4Y0F9A9c@Us:*-ogSfg&4npM(#45V`KNYlRO\3!7l<QT8U7'#PnsNICGHQ>H[o[r-QrCn_1XACG?4+B!Re
%NL-Hi+br#7PX?r].F9pb,Dl6C,ai9J>nPba4Ua\0R)Gj]=sV@^)-oK?Y[]c-Dao9bHIPDq`A2M-Lj7>H.UmXC=p2*=bom95CLdQW
%Go!SudU^;OL5$`P:i47-2&aAP?u+5"<f9<&e#$S$3*2i4=t$0WR7Ia%Noq9taLf;E\Xf+3Pi]sH2KX2O0(]^B)dQM#6U<fF;dj8<
%-46&C^i1tf.kl\c'tUiH.02:67[O3i[MYKD"q@C;+Q3;ODhPD0OFi02_?:1@!6E64&9&e6^^b%5:>AGF3o1/HUPLa[;BpLXH.@O=
%FRZ5]VKZGTk81^E(+RH[6c$SVUuN8bPqkns?4>7k_ZeP1buD'1pV^/I>Yu*$`s!Xg\mcm>9+@(0Aq_'E_`J1cqF"`E>j=B?<3QtI
%`O=\Ub>5hU3s!h_hhd%ICc:Uf*g6u?k8FQLVFuKO!lZpRbnbW=bm9](ETpa5nQsngA-i?@#ich;j'%B96NXddbH$2'P2p'#Cc?f#
%&=jk?TZtC&%igg)JJRUTK21W$)#E-$:Mc(m,(u(@9B7nKo@Tr!(^mM6-\fdrH3)!H05.GtRSto,faWoT46U&VT:cu>F^\Vc61\e!
%UJSiB$d"im'g`9?)d(7MP:4p%'H('[>6BJ%Jq<J5*nPFXG6qegp*I6r@Ocm/*Nfc6"d-cT-#@220o*KJNNs_'AG/gB%ASo:DBcOU
%`1Y+"&Dg-WI5Z'8krZ.;!B@p!dNZW<N8>\&%lb[lr;i__9RI31Bd@e@_/1Bl6KiQdcM15]N$h/3&Mf$d>FMus&cO9'&9-bb6RY)T
%e7.2W.-!,gZ/t0N--@c6KRFCo't2VVA06cEl=1Abh*@H`YH\*7(PC:Sp(4-tbiS/A]&J2oNW@CcY;>M+gs@f-5u;>>mf<<aD'kq\
%5#i!I+P\sS,lXcJ&Tt_t19TCT%K7G)pB&GL!=t^H&ZLXE4XLBkI$VTFP3Z?a$;GSBY'5o!B__IldK4?\&s0UD)g$W7$3ZSYNZG1X
%)FBfO6UO*F9A'`7W>IPp'N"9Zbh8+=)pC*.k]rJf1LU:/X9.B]/tWrBld1nucRnnCC2KbuBj%A^S&DoFHS,t<\j*o\foA>;0E^VN
%P:3dN+icO#B2q"2)588dq9T08;$dLl>?a(@/WS^p9<>7*q1YplfQJ5-M(hE/&A7bSP^fqZCWGu^q@?hPdHr!]Zg.h4Fpo70KL#(P
%P'[ZRgPM>F@S)<D%"t)j]j;+eN-#\gj3Y3GZ65h1&>Gp",5_eWM"$Hk7\I_+ZP/0>k+1ka&Q\(NF,cJN45sfUXS(35V4IBn4coM*
%e5)g#`$@Ks>3s1]p+Bkl105#8"t;8s6^WHZb<#dGZ4]"$CmIg/G:d)=1"$ZT\>`"BZ&/&uYDQ&-kT5p*[RqLL.hK>hJ1:M-(Dg?\
%OUGR%\"L4@Sd!j'6hG?pRH2a_gIK$cdluND:R^^JEc$r%l$@K#=_uU.7ImZJ+ZQ:Mau1+L^_3EI&KcDZ]7DA-bVLNcJ?X]UGg+Q?
%@n`VP`3Vi5#g>j?_-C';N0lUbi]:[cd^U29EJbU<do^MhAUX[W]s(srBEginH8,=/\0M/0;f"_,`Sen6>02J@/a:NiF9(l&`]#\3
%!]m!QjGh^0IVn,2isc8]1HEY03Yo%gnRH"MJLdHmm+\:B$;r7HZ!j?")ohNscsa.%kYjHWZO#\GcmUMU`NR6_p;X[pUDPRgQphlm
%A,-o(.qW:S"-jI?cS+HT0&VF`&(mAfS*7mn!J7U.bOVOO:C,ugBmp=lTf4MaAh3?`0nh=O%'C3>#9:N4UkHld'N/./p1FGL,T$eN
%C;-Ug:RItk/<u)0XX/_oTGp:nr5>Op^^0EOa:I;*@bRZ)"\P(VFWru;(aKs7g#52:L5DcO,iWdBTi-e!@8a>R>7`n381-L:fEMke
%rl*EJ%hVfZ]PkNMfGHdY:J;qU*$bZ?etncH5T!uMR5-6-9:6bp'lSr]3p:h,m0D=in1H]E[2sW,(Jek_YmrsI33$GM2Zsr;dR%C*
%Lcl,3V(Soo%#Dei3Llp@#V%097d^=Dll]>%*!_7nmDP$Y7$rj#GdBc'6kDXF[7+I*Tk(5M%>iop49BkEq-@@/s!$)#4>'a*;$bg@
%2GiOHND&nLcbtQO\7&lIJqF=6lPsDT't!M,M6%16b3'<L6Gs;<E2qT5AIN5@-##"jR)5O&Q,W*F-(uA6YAcIbp=[V<,_W#V+bqc0
%Zj*&bi5<%CXXhoFa$n@Z<!5[6$n[9](YAMA$+pp5T-87WOj=G8r0-X"#.Bn:bp%*uI8TM:O&^SGhSdT8>*d7518D1@1*RM`>RF>a
%0HiN\CJ=#B.%<fQZj6f1p=jD3<d*hR7L0f^*<o2^$n-`A`.BLm3>ebuq=8#/B33V-SNnk?Z@j$=IARrb2UlDIL(q6*Rt,)Oo8o+2
%N;J*t*X$VGSVL[f;F]goOjKI@"3$!Eg..;iKRU/9\0N,]d"IUFGj[R]?Sp>(f>P1^Q=beE\nanuG&/6V'F@Ha.2#<d&uXi:#*0nf
%)A=Jq*>8eb/&(dW!-GV>jfpS%=2D-Hl8Sm2T`HXl@,5RJ&p@,N)lD#^DK(2g80j"28`Tku`7_*RLdn/uns%ZO-OtGF&tkdt?YIG3
%gf$QsT)gFi!(CXaC^k8ig]=dWIMah?1U4Mn5Dus;bTh3\^,A(<F!N,a`)MJq'H#PYOk0t?p`cCQ7-%a<Ep]7.0Y(ReOZ'S#WPDn/
%';.f5oke1FJnu[dM%t[J1e971-pJ.PZ3JDuJ3%`)1i0*YNmSJm`R-HL]W1%kI9\ZD84?>](BTRa/0[I*nsuk<B7ib45T4p1Oq+7s
%k6UZ%l91NY4%=RNi=^^X!jTto;91q/:b3oI6'*c+bICh0+U.?Ug(O#=,K:e*kP6$7.N=Q(58hJ'C@FC(gT`3q=[OZepn:DqV1fHg
%nZ$'P7/Yt)B59972jI#@V1V%GMd7trqp&K(537M?H:2tK0>:JSlQ)C&]^_ZuH^d#6B5o%&F&RT9a;_idhkWNqQmB])a22ZG0jg_d
%+6ESM\r_cInYPQ7#bA]J>7sa9n:9aW3BE='>Sq'=OLuEa(j1cn,.?DRH\L8\JTq3AKNKU\7f`-9#h'G_mmrbfVEg+f"fQ2\;%[P[
%/C+H1<tJj'K37`!F(PF4*$6p,,%EMc#T#Jq!'WV\?"iF>X0<hB_&T;@ps:S;4;_OfFi5dT-3q%_L!a,EpF(cQJ\o>Yh9W,]4bd&L
%Ou+9U0%lA^&g&+'"RD6R8I'+9.i^*8)$*GG-[roFL([TuFohOPN.Ms(:1$=RI^]L=mD&Z9AnGX2n+Sh6NT1kh0S%Ukq("@nj1nKS
%GCYu#M),p&3!OrBh#T_cNmTZ>4G>I`K;T9C+Rpm_UO]1WZj)fti^$1eP/2u/GgBGdS0'$u"*j;LkP2QA?78Q1P(Y9RD2?=HM`f&f
%Hibkt^a9^[E8i,a:^`8E+ktYQ9^oRa?p\o[iYTFKg6FoL)%f0A#XcrYG)FgPe0e4""P4d4$<Ef'"j7HIaab7\&h-pHi=I8>,\D]p
%(WDdk*ZIQ`pl'ua:)1Q%9C3j6#7.?V(:)R`#"B[mib'#`k&!RfLdU,H2iY=20Se"%lGDo2ng$htfIj4a-6#Y^o>$OU2\,[o</&BA
%Qb4L"/.ip+j(KI2*>l8"Lm)67Tb3>]B;.An$7DJiq%Hn-a<lRL6IS9bJC!f!JeW-U`R%IKTiW,nK._eqW6g_"*0Qp>Z>r6V&qP_l
%<=fcF7KaVe,[.A`.)?f-EG],B)Y*DBj,h54E!^juI)F;S0KI3o6uT.^&7tLMcT)b=KI,QCa[&162i"j*d("RmIbInS0H!>V%MYcT
%&Rq4HG0`.EEVVV4"u7e91..)m>Y1N,/TUs0cq[p.YRIBRS5>(3I]u[7PU.,9A94&ir8^"tYm/S6'IZbI@fY`>]Z4ne5V+j>O$*^J
%E\rm](X&lcm:6G"f=>u`#pKjLs.>m9.gH-\KRDDlP=bDskI>5#_CG.E=p]4Z8Hgs)/mT7"!PJfH\=4cZPSO:G'51lTE\()4JgA3c
%n<'KD0>9pa$_V*H'B,sI<X0b#?J'=A=Ce^32?o*4\.c)%1SM5snY+E4_.fW_!s6kI'^)J_@Ku+<*#gL61*^0DVQ5`h5\Qo(4N:]V
%Kc<R)QS*uQi*P>+U+EZbWZ&nn3fGbsm5Y4'$BgY,5<t3]?t_qDJ?$tuY_AJ&?0"8&&qrr@$!>J`Tc=gj&*ZJM5U6pTNdsq?+Z,Ci
%?gp^\c:&u#L"@&S%d_V]*5\O'=2]&)O@ViKN(4^M83<`+_.h1H<,q2[[O`T6FAkLD'UqMR5`<VPBr=3XFi_Ll-nJ:5`E*db&=RqC
%(5,KodNBO&$`07N3^,XG<?S9+(\'b8loF3A1<BJZJ#%pU(;`0R&/@1O#[_Rt/drag$]VCmi>+7Ga"`^80^QZ$920(q/R*=L$UBkt
%Q.\b2,'/G4&57T/]='#0S,V"LGS2Js'Fj8di_eigDjS@>Hna0fUc<?(,[CE)%SYRd.iO.VEIJAE-q9C.0^:0]4/H&ak"mNoXO,n2
%A8O[=6AVgX;GoL?CN\!i>oG?/J?W@H'`0D6L0JKb7+_uH$-q(O#s."g84PBp,39eA\PV0'hs(MC1T,!`]]ZZ0%P1bEH9rmBgAm\p
%?c31*RQC6*EQg5U;Air#FFdr8!2Kd6<p`V"I%R*U=ib-l.>AC1nKKc3#Q2FO@3+mVP/%GI1rKqcf/T,?(=.o2jR0pc"%a\%CfM<"
%Sm14"]*Q?sH:c,b01oONT;5u"'h:q_N"U1<,0%"NcWo87?[]:L8GQee^p?#;TD1-#,]b#n:Y&UoZhgs-\nV>&OFifYi:,[`3*?pd
%9>FAGGK=<b/F$nMoH5/H/d4PJ=G<,gSd00(EK`Z+-]8C6O5H3B9*aH)-^_`sV>72E0i,p5P(Ml?L#O@k3S>P#gC%[aYcrph"dV=b
%90l2QpAVsrm$_Ft!8J:Fl@juEEG/sWis6\C8J-+_=@paA45kr22sjZgWtd,:K.U2X/Q%g$fSkn6'8#(C^jh#r-;#E0=HXJ'9*pTr
%m>u]9U/Ct-f0GQXT;n2&#$=#k*5W-u6R\[&",?Tmk$8+qR0=tXHXMLdgp@X"Pg>H71E]s?#B+l#QR.FPE_s-\\8%Kh-(8?3Q\N$^
%Z%uGN'FJ%b_XD@!jGpN"K"`i;d90P&U!$%B"BXK#UbY:c.?K@s%"4>cR&'LafX,"4WkBrBY*_PB2rK&l,%4Z19TVh;!G/]%mBJM3
%&Gab%d.l4DChSX1-i"5`UD-;7b\FO1KgM$ML-\&aBZjpP-tr"dA290#iR9&ii@9^iO(4A1C]t.&,6TCVCSL21MaKJR0WqqeOKV>h
%J2$[R1DE^B,Y1LK)+/B=8D+Q<'Hf\L1t!K\]-u/P3Zt.#YQM0o#P7Ed3+&m,cK\;4#Xrkl)`\@5_=[eBRe6Z@!J/fnRXrT5@t=Yb
%@Y\A/-h3&rKnV0\FqFJc->E]:!$RF[QJ&0f4a,gI#_^(#JR3m`YZ2EPi>cr5Z;B+1\RQ8S"P(i'@\]N),$/G<U:G3"2ok&sE!>bf
%Y^I0!c\`#XN#Z9&9TD"gKR>5WpJ>UW&.j*m>-93"i[jA.*2t</:%<_=C?jduQ#1nH)F5>if+1\4:260rTnsYf02k5i+q`Ji4=Ka4
%C7BoGQa9pZ,jZ)`Ca=')?Q9Uc1u&uE;F[cYq%TWRkg2&=.a?S2`9\%o4UaaBA[<GrlqeSWYQfr=J:`_!.=%R,9<?(#%tSp)@]q"O
%1RL4^L4UsKL[\Il@+r9Z80kA3j3f*>%0`>:kfD<91bCb"U/jf<6K'$2^%i:FUliO?.3AQcascK?(346=Q$B0po+I]M$V1A11/?'*
%J\:<Aeq[9-AU=DX`0mnnA[Vk1iKD804LC7?J9SCEVS((fMTOdQ6^O,Id0o5sk($nXoe`3"NZZ7FM3*pZBfUiqD!p8&+cbKBLPGRi
%1*#.NYk*R*g(oF%#Y<eB\XC]s;P5Yog0oU=MgK7NYshfK_BcAuYU$L7K]-cFQpP?FA&_]"idB8nKmBr3BS]KY5k\nnJ?-1g"B(Cb
%Y;N,&6QOjW_O;EMA\-r<+`b@M8J>%$FThH9k3PpA/;Sb4%6#]5+Z"l(#-D1K=3.\FEfL&JR)8;Y=iE$`8(p+$e5aRNLIDPA@I,jN
%NiD[Rn!_Lp!/f6H[($k/Y2d_25^c;\H@ZfU!c`'I_U0[5(*FfR6>p]ec5u2FF?;k3HK$HOTX_cZagpb3#%7B"4VO%DH6u0X6,O4<
%W@PpHQm/MuSX/Wc')hmkS\YUlEl@/MCDP<>)C$qb5ZZtan\@R]IT22g9R+Qb6;e.^_6j@T!`gUr1'Q9.8-G-%)HacVC[_?TjktPb
%i$3c#K+8Un;)5V.?`jGU=tU0aO#F9Z9>Xk$hShp[K0^a(^ZPr$`!7FDZ;V5i`tKWt!B3d0#7Ud5%?0UJM9^`fL0WI7[hDLLk.K&8
%Kr@j]KY("=I8fL$U)@(9nVf!F7l):3$,/-QBqPk%%0V=f&9:mClnH]j;d)<WHlQI/<7W8@iII_##b$=GEfM6"^<26Jb]6EX-lFb$
%>^D6k^]B+c\q%`Z.heJp[^a+@7=_[/5%Dp8@FZ]M%Ah(3Rh<TH`E'go`n9g5W&H4`ji9@?J0:rA1W5TK%dbDg>fQ"r!1GZI^@CbD
%0(($>H6i.nNbI(i<lJmr_9)`jmrIH?)A4t6AQ4H=PY2*SL""DS`<[nV:UX-q.PZ8?M%D;F6]0n`=SgGOO*%2i$hI2b5>dUu0#bfd
%ClPZ"g^Z!ZO\g$)V/KW285HM-fJR%Li'V"FFlKc&W1sA]+ttouY_),MVQ:*(Bs=cXeN3iZ'UT[S#os[9a8t+e.LHIO6_Pp"\R\7l
%\!74P8QUJ`_6dTM:r$Jrp'jb>@"TtmE%/LtHkm@FiOC5'`muK^_(k)&Op#BQk7+[S>"LM!bJ<pWE-$RQZ/bp<l#pFpTFq7XBFY;D
%e9DHh*lYXEX[,*!6Sh/;L<E@:X@7S(:ll%n[&pD<DmNl;UIQlQ)HbW'?'p75ZmEo3"Z.p<d;`/Pb=R4Xi>eU])'IBmhJ!L_7=]>r
%2!QTr@4fbc7>W:2Z91/*/lt1<fgbEM+qNIJPsgF$9fEk\B:Sj58Tgp7aMBLl)MKL<#_$C8hEdfmPWs7QWP;Pu&/MO`HQ6lFELN&'
%#'28lr'2oDU5,f2Qlp_%!fj/I/JCgRCm/'oN.hOtP&LTM&nWe-+;E'-9aX'6X*H7j"pQB$>>4pa2XWg["N35D_@"Kq(3(B8"@2n)
%$^>?@+=tF9:!tMYRl2);dd`,sC>=AeZRS<B$gGl'S](tmdTqDP%tnMK&>D.\L+jI]aF\2X\rS8GKM6Q]SPZ7;K,\\RBrTO8!#jM]
%@S*$!/a05e&J+rbmdobINe%hiNKD"BMDCi#63B`*7pmGDaFo0^#/:]l,)TlOTr2p'4)6Aq3MX"'?j)^'J%d-_!(49!-Cf2I4u7k5
%g_">]l7d[LrD%ft-t[QCQ_FmbgQKhUT#A/j5S5deWh;1>XV`IKMGB$7ZdD`[$7BDG,^^7YZ@G4Ls'sGLW4@VWEC/4ZUeD2r[%`@#
%k?iUf0_Ei%'d4<M@h4-rR'`Vp!;&_A$OC/J`7[Gt*J)SSAV6YgMUI>\Ih3)6,:9u@+BLp4oLrCR9S>%-N68tdig"ZU>dLlt=j2CM
%A'5XL1*Bd,_lEJu@Y]Xhi=5j-M,X]4clp%]HB(ED7uEd&G7b14N?Ze%qATdHM5A">a]GiOL9`$>:_2*-(rUV0+:`eKSkqs6(UH*U
%,SXZ5gp9`_QN<lop'qWagC/,(G_UAm79_)^d*+pf`ct^]E<F]R2\"*@p0ngu5^Y?,F^uaE$d'>,$D&JqP=8<nWb%:9R?_S9GuonE
%JE/,E06q%rS5@5N`@I),LVVnQM4UZ*Dp&nTWqHi9,S4]n_!]@5h2DWDb69)o6@0-*186cVR;0[M">!ob/V,=*k#uV("VQn+:P:f&
%KN;ahCpIKOP8Q/l%]Gj)?!,01lQMs!'-5h,\Q,S8CZ-<pQ=SN"aFTD6olmo3q->X1G7\X/02YLb%r.GhY$IGfi*[;._bM8@>UVEJ
%5UN&'Z*4K>-&t\g%&3-t)'hZJ=Kh6(^;Q$QhLlFK)YaAGc/fM0n8LNc!tEpYW-AWB:f86XPI?%j:%;_l:`diF'FuRGU+-\Wd:1?5
%@0j;mE1'gY>c9m"A#.0LEPR9-nl76.Kf1k8Fl0-QJ`fUK>Uks?#=t`@n[k=@:JbE*,+_=JTc(eu4nb&,16Mdg,,VUh*?$:g$J9n<
%^lH22OKA7ud%c>Re)>@\$!KHa>/fJY\-ZFkYp-DlO+SK:pd?:(BpS:Op0qu;=ctU4:g_?G_fe;H_\Q()/^pAJ+eLJ=_1]h`!6W/L
%mJH8@,s#o("$fs'VliH9jAB2YZJ=DtPrM,r\^6OPQHaaXN^_Y?#Aar`BN^!A3WahJc!m=JH%oUg!QQ5(EY3675hO+g'[UCP#h1g+
%jj5pXS-3T6,a?&@Tbg(E0ahrs)FU6O^:Y^\9u8TC/J^@c(3"8G"3Qn!`QSY9"X*M)_CFQ<:(AD*9l0T8B7<F<83bcolACLZ9p$Tk
%-VE^?o.@Sl">@-To/cER#,O[gC(9a<+kt!Z-@p#CB0s'(_g:QlXtB*_+ISPR+;Pk0o6H?S:b\1+#2#Yl/HDQu.`(R'EI0?P%^R?&
%L?+[PYX9pN%DpUP-gh("V:I%qaGFX>Ck@80Q]:82S(XHH_H)?G+jHD!?%Jq%r2qf>OeH_m@BYYB&"4gW'*J@?XE\\/7k>TO$6!V7
%#)U;:@"W#>JZsP>7Ob;uM#">G%KoJTDRRa!;TM[#C.:5f6]"Jl]7uH?fd6(o@CI=Gm3%@],W%3ndt*&mP__V%o*rcL)@@n7K6I0m
%G2j(?JV?S&;&nrIAmLcUPgoV1Z#J%$iR,Lu!(f`j=T$hK#`r/1`"m4:dc[]S:[F>IP2?8&8r+CZo<@pD#l"X_+"%8\=%+>6"6%U>
%N5</rc,i.%UuDM<YnB,2F,"lNdHC%K,I!JG#B"DMRj]tG#\Hn,g-.&'Xop>r*JJ`8(fWJBN%H*D[pJ9eLbd9R!*,=Q&qILg(Z%T"
%9uu)PRP6WrFGK1>15Ich%%@b07O*$<RTEc.E"='D]L!Bk[`f:8lBVFGRA4_7>@;=N\;P:^A.,]#$gKDKG&9K\(-$P=d-Q9":7P:;
%*T2OW3,T!'9WS5:D(/T10eHiL7TgWS\,e)UX6*;8U#7eh`bgk*&8HtJi3<G+<Ym1EJ/I<)9R0CG&$]Uc-@D:3+?%)H_ue,t/?rEF
%_c)439Sk?TGq*?)kR247_lI$:I"As@,l5ZfJpj=E<M<'kN^3"F&O$Z][KK-@#W`#;@31(%@7s=(LpWl*08<k$g(q?OQHL/<fE*tE
%BS!G_Q3A;JeZqG(TpDrK'!f\#+A9RF=`i)^gl25+2-ud[$$k<,9<f3qpqSeOB%G%M'f$X8:$AP/(s^CaD,?0rSe9)#=pR;G>2"AI
%"-XV@YB%.MP0LHZF/([6pu.$2;WRGr?79I.T-l=*l.^T(?r_grU"GIeqLTRjLZe77(oL5Fh\T'+@uu@[,,[+/-[$$/_3F)<-Qd1O
%`giabM[k:&:b^am>Jo&:A6&c2h"Ki!=dJF\Lpc1Y#t(S-TFh`rYsO`b!T=RlhAI?$7WBRSgio6-Q1OlMfo`$jTmJR$_MhqASnU3O
%*=h12LikulA\AVmL]_^/Bo%XJgkdCh5tIQ4HE%ABDK,NP@dBpOVa<*K1M:)>J[IMtEafA+U]Y4K3/85M_psM*##)0+h/)4&+O7+r
%'Ejm5R>>j;XHHXBU6Ctoq\k[[N$u_k/a5n(afm1R`6<k`"c"%3JHUdc;bZI&W=l;R$H9"HW:(*970olW-cXo7mi"+.C<*1XAG0lX
%[WG&V%iej@<<*UgQC)%:o9;qg$H:-*,(X>$!bHE`$P%2j!.bFZ8<3G'f?Nm1S&"Mq^0pU>DJ'.5Su`EqFc^@*On+Gke!T5?9/91O
%FYF3@NQ1rcE+ufo+\Aq)N[6.3W8s&W>Yc3G,o0U=CI,a&&km'bR/*sg)$u<,*$bCoX7Sj1K=-N2C*r'%f*gMJ"iq9[\L#pd7O!'H
%N=?XWl+1VI8G(=G0pM/d@$sr&`H]:JALF8LJIu]Y-(F!r`VO+QM;\da@j1A:9`cOdPMha[9nX];9782=/&6.-KOopp%r6_1oOA3^
%@9jaC"B&>\NIIO'bN*RgM"R+4BKJ]ZJPF#@!+)G]YTnlI6mWP;V*gpXctPIRN$i:Ij.Q,`aVt75]Vi8I/9Ui@I&_g+ohA720N6cB
%a8lrU;BUf73;Q`U"8[\"m#Q:+.u:SV8"?cfc@h)&E:5"8csqhYN*/aj4jk$*+K-mCE[[H\'q"Un5''S8!J$lbeSuk:mB^fX[7%6/
%V-Tf`i#LqD5_-dAl'QKJV-(?B"9L6/^D7sf^^R/).KX[iY.0B00`1W6EJq."1f2uMB$lm'&O&N$i%2*<"4E"u2\lRn=CpVW>-Y/<
%$nle(ZKqR<"G["+p+E,e/*n*^2fuPHZWTMWTeLZX@Z>?b90<p7(u]irT7fns'Rpb:/;&QW=@M@M:,">Oo9h"O/c-&gNX6$OZ@]7S
%ZB:O:M_+s0l>6iMjti;0Z2n$C"_M1HRrE-g@sMnf6[aD*-#4Z7MOP)6*8:i\m"'GB\;OXTd,6T:DIo&/E/jOO'CFEdL&bL;=:/qu
%p3L>O4S]HnS(9Q^?,m*d$"TOH$876(Ju-c&],8]9!&j(u3RE/(M"<,`$^USKX"%r=7@]#K<XRU`C4TctoYH\D%$']F84([3Y2mh^
%[TM:/Y*"t,Mj]BbZU+ce_U',S>uMVt9q.pmMp5<P@kMq0=B&ZGp.R;($;JYOI74#PA#EhqRR3+A_q<TJ#nh4aneDK_Qu-DNi!+tp
%CMG$'&]5gI<>%E]RWq^Af/;;lCL^@GL;RIMm"C$G.'Ye:.Wb#-%.YsQ_][::+^=MS;[!fh#]]!q)%`ST..D&+%HHs8!8ASW%ck50
%LtI<0+OW//!ZSR&KeSgt+`CO6W>-s+6X[rfCRRQ?J9`6R*V\X#K>Y)+'o%^%_l,P^S/i>@q/J^Q"X&g;M)"!#$\^Wbh+2Q%/$FtQ
%h#t_lc8?YB!qaE"V>*tFll>#J[-UbDCE\Xh8MF['qZg2dKLP_!,7DjQ`7)dfpbld89&36^fbc*&,75<Sbm?@KLN*J!`6WE3*.kpB
%*Umd2d%o`)ED[VSTa#Lk/o0dWEks72Lh)&=!eIL"!G4[,iEUH7fS+7L92K@9=[>*/amqDA7,2lFk&%UXr#HG=SV-4e'0H+p1'GL7
%fWklN`=tpp@@+me>a+O_k:J3,pnUFt87\8*kM_<:TcLam,r?Aq&M?&9bZt7;jP5&H3!gP,<nD`,L4N_Xa=.LUZWN)=35u3CIBt:&
%c>YEhXe9-q[[RE=ZT"=c%iuNXr&?&N0Pb++3S+qp=`GpdAjRp6E5?h?:^Q1[2VqqG]0%Nh+B_m8)BtHV%[NN`D,(KOe*LQ)THIGg
%nOX:ej-fAQfJ1r%8rBua#q3"d5DaFjq;VXmnQ(i%(eBVrp1?S9N$h5E/sR'BSfqPE;-*%qF>u,2k/[d+,6;tU^jNdg`O16'ka6PQ
%N^:2s0"oBVOp,5tP"SC[UEM%a[1m00Y8"6;(<G]!&p5Dg"C1Q@o&:K"XrWFV%k.VJ`=tm`MNpFP<ua4\Y,UsL);bN$T"k[SJ"20D
%IEHq28K`T&YXjEM+KUDS`8D,U>ddLtNtt?)LVS#n\=WL?RUt3kV7JdQ+2ad/^i&b;.H<AWi\),%`j$IaO$^:YL`*@_,dA5<Pq[U>
%"!BY[XISgA<)G7bc`roc5)H(:+XWlrkNO-1!)s6t@u9#]71sUu;D`sL/4Gg8r?QO?Z1ka4N`$MfLgrhT'[fD1Ao#[Up*JA6O2"Bl
%c%9H2\t>RVE"3"kn^k_k7)NAN.@JOtrfW6CZ'a\!;.6tG/k;8]**jn'?N.U3p_/ee+X&DNq:lI8A97MLf7S9%"j[;\1*b9q+Bt6b
%(1gX3p4atLOWh7b4u1cYNA*[I],PW&.cYbD\h:<,.BgNLS.2BfI&kL7'8WW+_Yer]+tk*5,inD5"c5'OMr)IGbN#B8`U^$6gpkFW
%i`^`,bbUJFB3U_^;R^P6fa:NC(KV`ac$/CPoc]B58p#gJZEF^E"l`/PE9KqW2k0N676hS"$'L2n(_<&OQ_>"<X"Q6-&\)+BS.IAf
%QjcfP.i='jXP$guOm60^#=>ue1?'LF'B)&MB8hq0E[\(f@5Ua%Z$up'.5f`%ZV>8G&">:8`Z3#%]!@$HeLcI'nmW1F$Vr@]F=oVh
%T\2-h$cllq(&LL;YF@',8CF.D0,_A%Zq3dMY<]B*JFg*U?V"]\%M!,U3=a;Dn".LQ7J<`rZW9@\c9V"AUGR6C/rGo&YW_oG)?C,2
%Kl%(jR7nMZKK1r+Z.2t?0YT$WhEq4C?"i5n3O97de80n]!\"[WOrt)Fo8_I;$/(>'",A&0p)kV]abo5rh)L<ULfqE'0'bJ0.P?SL
%3-5Z'"[1iQb=Ygn3o0QM/.CrgrX+?NrSh[7q)_@X'OhrLh8-g9Jal5t*(f%pR%Z6H]1+u:VC^i4&YBbp]aGe&_GU4S2420A58KtU
%j'u_cON"W*:#[fRNNu7l6!2!!J10b5=HtR)f&RY*<T=XY9p:nTLr2uW;G7?U(Y6KlWY.j9P`GfN1(uoAQV0q9Y^m#+X&@#=*/_0=
%cK=SJ88\UL0>m#8];KI?EVM&i@3">0WS7K"j(KCGZ+^Nn.nM_*,Ws!*^mTHB/;I)@\G-+<8OAV_a13M$\d><l\D_CT80LejUc252
%"tYUR>=hI"facE<;A-mC[&=BgRm[;=MG&U2%Y'=&llL_N\7%EbA70>/p4N-KdJ/*Qo"h;JY,%>u"sf3V:5972H?^W23'&`J&T#Vu
%2+*VTFso8Bcief_A,8GQ87)gO$tF%==DFHU,,Yc/Tj0l<n3kB<!I8(!#9G0/e4^um8HFU0KK1/0UEo;,?rR.]QloSd17u#8gEX\,
%fgNj3S_8OUiPN*p&nbS@Vq?Tg]!FDK56hJU8k*2iQCC:dZAio+Ua/4j([(G['nEk+<L.F4LnbP:>'?!,.M`VHGtD799TDL#KIfVc
%'tOT[$8n-Fg52aT)Yo#I&>3&q,d7d&nU[VEg-O>M^K$5''-kP$g4URKIAM#hQ^6(D[A6KJXUXtX"]Z1#\%m^Lfnp#'6uae)NZLL6
%V)Y\Zd[ihr=efd:=+6?Okh0-;*dgIAT+)gjFW!R[Zmi)oncoj,:_Zdu+TRirIc<-ZSn)bkQC<jDEj7RD%-to%FJ*f0VQ`#0<"EJK
%/b9AAm/ar_5n`*drVuT*Xi6Ue3qM1#s);9Ip+T!sHUc:CakIjRf\g1UTI84<FDD"3ag@lcr9l#J94ZSuLu%Id;\FD<L#c^6bhSV+
%=g9U:qNa18orRX*MeGKZf?IYT#TB0ApA,QWK$EbU2bc_DLjV`NY]12Z*LQVm&7pZ@\%b\mfn^PEkb!Mf0Bj9l.o%C6B+e?LJ*UH8
%l1mTI(:A-++'UZ6Kd(Xk3[Em:bR&G8C2840L8A(7P&Wg^XALNFh/ok.gk>2->_q.V2;d.[-GWH>-n!%_0X3)WP\sMe_Wo(`fte\>
%pa5R@C>mP\-R'VVXd:fhE5W2#8n@CID*)6fCc3]IY$J;('7Zd5])p?3I%2VNOQ_P,is@OmfgL"Z8Y@8Ia(%M%>,/#o=d%NZ+FarR
%/^`q]1pjKAZW[m1OLH??&\CXs\&"W1[[u,S8.]12=7u"_I]I"m1!.[C]%gO9ai^lW?)rq5"U^5lpWlYf$n3r#?J-k:-U`0Ol`Kn/
%C.0<_:)c;j+mZWAqGi(MRP;Q`YCUDf,A0^j%=2cgrsJmMC^goE_O-;MXr,Z*qp<#1SOfoA^Kob*>!aiAl7oW(W9lY=+\G;*,6leM
%=F8g9CfmXB"KL8H*B&?m:c6XMJdY.Vl-4I'L?=Q`p;uS$BRhi>98E@?6R/`j<$M"_.Y@nNKWjjhOTirRIt6]^2#f1jM?oomc]YKP
%X<isa.*3&ZMcdQl\.i1A<@kpt,J^mh#_d/0,,ktK8NG[%f]><p8HnZmZ>lC:dS%'?V/t;J382pD#rs-*6[A-na!Y,,B,so04!P0B
%XaZ`)K3qa,r.g>Er*VRSPR3]eAu&`Vh+&2kmEu]Y;!!M[(J"ct;M7S,SNp2skX'Ss*h5BR4u6OGJ2BZ6VbmIM:@.Pm.Qsq9"G="+
%8O\c0dTh>&/3Lm`qMN4G1]V3"KP;Bl:m$XPSL#\(&*#tndY60V%Im"%&JR;uX]jjK@qB.i7(*Cp?D\/+h3MRG""b2\@ni9amjAf/
%F;EldJEV-kWo*bp/=3K<>MpW]\GW%7hM+tMY",5B,s!1T`m@]d:/R&N(:lK<[gf8H@Ji&KnPOTK5")Xf/ec/0,'j'S<t7<%a&)h(
%&^+TG01:\H<^+Zf,,jEp=*(`nVPnC(Bc82.QeU[adhh9)J/UX,O0sV>Na<@:IWDHPB&DJ8D)mUu4Oo4d'1LiBaT;YrOFhd2p::^o
%N9I#=g%>kM2<&i6WDu*9?6p=^26gH!i%K`ddL'WhPCR,i@(-S<m\X2AdRR,8ogU8LBA3kkTl3CC<FYnH0K.#Y`(]?fCBCK74k!*S
%;G&0g'BfTC-lXqN8K0>kF6VjnUn237LJZ./!HZ)+SLdB*cEenTSZinTpn<n!@;kuJ/WQ%*.,\rEeuK?8LFH[,-F8sK*M0AF0DX7&
%T5\]^(6:b"NT_Y#9;htI"&Og('DJgB6k@U#L_q>/LeK=D?lNo.Lij<2J!ZB?&1FBu*o!XV`js6U,dIVA5he]ZTHEqWjR_kWiJODs
%rQ%[;67]5!@[o\k,o"'`UEAYRr3Ol3TZd[H^0h.fk:.[]qEX;NdZ*IN0^qI]`oXnaJ7o!UDgpVsn1Gl".'uI*Es8;<[:0^fK"-et
%"JVm(kXd3NPj=mWAKE4D8qg8UrJ_"#c(]d&CL.g<Z[<MaH!@4:O!d6K%+uGi*7uluLBP7bigRJ28+=i"Ij9nQ#I8\tCE3KM@PIG4
%3f/[[ZjjN)dH5,u-M0G/l93=soI_S,P;j6X_mV@i$F%)Gf#.h.0jm3-\^GGQmNF]9?Po!L#Ui-4`t#1]`+V,WAK]R840(!0Ic@MA
%S5b'`J6psLg]OM/Wkm\^kH_RJEPDqAT=G:V7Z@<a!F^NP^.Kko4@*D`W'Eft00k0sWrfXn:g+HkYY(9!d^u;Ai'Z5pTc!l7dm4l)
%Vm<@d7T]s`+.Ke.&@("8UR;DS,2RF.Zpe!eRl_4V:;[]JFbB[NMOPoK@T#=8+h^Mu,dYc4<k4S#PTmsri?YnjMt4%!T#ED_^r.>_
%l!``R$+2`#Qg3^".+1Jq9$00t@0@1:&t!VP"Wa@;-u,Fa!9A#+gFU$29(rMTK]Ee?9Gqr^$ZREH--;sk>t(rg(=<lE@*$n9HWL&6
%[8<NETh+]o`r(H9qTsF]"2pmcAgs?S:3m0[Vnol5?A">^L^5nI!E"]NGhM]fp<er=pq\cbjf0;>,3;%u.]0@M@8916mU-DN!F\,n
%+%T*/j&es_=,TW+Hd`'M;HK6NPRV(JE=kT,q^=U[dNk&m3Jl,t_`t%FH1/ab[>Q<R`WAF+KUV%kpLlpLc:K0<2C6Rfh)qBl;GZm=
%KN6G#4p6[F*OIsMN'Eiph?VTan-\>5r6T0W,A;+0e;H-Da.DDocHM-'D-?"tXE5n\$['Q$1f3lq^MW7O4:CV\U(ttW,dGfPOVsTV
%Bg^/_Th9/B`9_ZPZ67dgL^19d;+`dP9*nAp#0d\b`H>JNs.U2BZHNa2#tlss_Ii%<+CaG!!#T9Q"%4\;U^2[Km'Is5Bg/!e/r&j#
%-N2:l-3"6kr\)m_Ck\Gh#\JM>X(Ol2F/30ObqNSr&?rQRd&cRPY+g(IqWLLsQaCq@8srA1V9sm>OM>l^[+XR@J8L"BN`g(JSS*+'
%niRF2'Vn.P5ZA&W^an@#&e!8Z(6q=cjTf+fT&tS3`h)),eE&aMm,e;lPKP60&lHDo`@-3)7";HSB.8$\2O_R^YHH8R&OX"Lj`T'm
%8C\<kJ4O`$,+:MN(R73W?#%[-dE'&k]C>N)*N"Yg8E)UdYGpWR'6=t!Op=+7a^[Vc$<s4n3e'Xs6Bq@GW+X=9Eb79!g./+ifq\k?
%qT-g10%6F:_RqVD9MY,PTtRVhpRsD@8'p.3`:Ld"DcrAcdo=;ZC%aDmMG9R'CaM2/ZI4CK"Lr1kc;Fb_#6P53!*Mu1-JSTm\Vd=P
%c+S@!O;j,9UTecJ5RDaE2,tEg.1!5_l=45KC<e"VA4@HF+JPuegk4t]Zs^AI&6REd,'5bG(_Tu$\-<i8gN*(<E5K*`VmX=08`PX#
%#N>6SVh8_=OFFbS^n_)N$""r3cG'[bH..2&6C.iM=9HeVkn`56bLRu5m\]i6Hnq(^T(&V.:RgQIJkf$9LXKd&'7p[EEHb3f1G'$5
%kN])b$M"i`;Ep;&EgSsAA+Gm=57C*iRUG6tG.(s3j+AFDmt9ftb>n6T9+>Va\"rg?jJ_">$"Q*ui'=fO^gd_04:U"9?rgc#M0(Au
%];1.r!OC\NKJ4YpVSn/jj?>uJPoFI\jseDeblL!3Qp%#R1,s%6A(Do<*P'h=+K]#i`P3#'*98JRUjf&?kMSgJgrB7-(?/??ZC#lV
%&Otok)T3/Wk)\-KW0r`2h6IZ;Y7eugfpEZ0=^'cn$Q!YI@TLUFL>Y#HpaEee:kOB/hN1EOYqUF@Wp)io>Bu<h^.:Ku.D/*n[LFT,
%gia'>Su!+V#.ukqNdL<DJ]:>j-03OX_RkI&LQQXt;\;deS"K`u*<TE06\GnF_YsDZa'nk]Gs4q#5@rIdA*b,,,WFsf68:=7V$(j"
%-,D]Vj<Mbtd&`t,@g1jd2a.R3YmcmPYQ;frM`m7F`mP&^6nq/Cqj>AsLtrcTf"I-$:j*qce"-\6'k&K[s+6Gk!>ZseKA1&PqI).Y
%:r.[>#PL-Nj%$s\n9"&M\/7/jE.6s0TRH=:I^td$9t18!46k3p#ta5Mp,ce.GSuc'9>FENL4ZKXg:N_E4c?](bO1PX`'pu+75<Lf
%pMJp;'jKOtg+F!cNeu\c7aYKZe"@Tdig2[h`UsiDMNZAHW1C)jg<JJ.$i./,)Me]871C'PPK<`<<RY3Gols1QbO%?$+$-BN"J)(-
%KZomY:!OE!4fIA>&N$Geo&c+2B_WoEW4;3_VY_EgY,@HZ.`Q5/_MUN'Wf;R!AJ*N@!U8'O,.Wr]Mum8Q[[]gZ40kKhGH7]qK,=Z1
%)Dp'E26QK9N;Y0;9.5T@=bbTuG1c3DCk=fp0&a=$mYB8irP163B1Di`Ag54?>.TXMP5:&G.R^XI<BWo_=8J*HQ<`JIg:!l'j3>NF
%%mj'nH5H`Ld\>Lj&m\1%$*(>gW*OD<**>*AB,+Yc9=^re]BKk6QculsCeuq7`pf(87K]-9,%s4-;<XpGAl`F+p@6gf9c`A!r'6i5
%T01SqIIOUmYt?@(/6rV0V4]=(omucoRh#.fRq;&*n]qgg$;=#*Ch/^b,nn]I6n:e2ZPP-SX)-1?C*g<^l$A,5gYV(WiF6Us\#/*u
%Wg(qr&\O':.lMYrF6t;<-;F)F]PnVVC#+JaS?c0QLJ5f(19k_[Yl,ZjV(&;3ToXj"U!rj.:s(b$'sQGLOaWM=U]NVtLMn!&@PYcg
%g4K)I!FtRJLnA3/K\U\aKD19EMNPMO"\f[[SOgaH+B9a0e]s+=<Bmk&KL4=D!)=i/XO,+S\6?1u(h-?F-D,GrhBa_QX":!%?t2tg
%/qAXC9a4TZMW-4S!*oirLJH[c#i!h#;B6k>WKs[IU(QHZXh(i2/9BUbmI&=0JAI3H7l[a;9V?isGtQo5!"gFM9PkU:NY:hjTc/&T
%\L@=*T<hp'$8e<P@hKLT7,GXm%`mhWNg-J4DUm9E;07,5dY#b>;C<qZ,4pGhd8V@4dEC'V+TeRt<l=UH'DggJR/S0PL)UabRjRce
%,a("n]IJ`87MpRi0_:)g?+uko=m0m;Q#m'&;cT<gG0Q*kM[tZ#dNKJkE%hklGXf/on4]3/[jjqbb?Vc\<p6&*`BgM?DEmMckbi:c
%;R#Ur+hN)<#gg\-D/O2_MMg/'couPTrt;U39>ogC&W=Cl/H-9eq"'GH4T#!dD[lSalmVZ>>Q^7^qEFEd5^`_'=)P;-5D\8!"J+I1
%'QaQBJ)@KqXRQLhPb<2"(<3<L4^nC^+pHA;W)M-pjkZGaOO@Y`@AXAa;3?MudU*$1*mCmL$]2PB]0ZrBOc/6],Mh$f2j<[UY]^%t
%."Y1#p_&i+OYjbXK4B#Ff;k^@D7cV9>9QUbn\Nq:S1]XP1YKXqc3mOa`TKq#`kAVg+K6_6>*?]5qj#<K`*gckkN'.s,Zh4+_2n'W
%`'uX_8-;+0I$pPELCf"@G5dN2%m6'n0<OLGi",0?'*e%SlZ5J<%1tV6pki:aW!seIG,rl:@W*fh!&e]$D^O\f?V$na?:\0UZhI`m
%;8Cr<oS&c[o,ujgRXhJ[pT!E[@aAC:5-_`[!_Nm#ot=%o)Kl0Gc*Ai4H"[@-;`1>A-F(c/9J=5Pa]L1^bfmMITUI7e0PDIa(8*GY
%Pu\tgDX`K6`D_?.eg8I@$K(*)>O3tp,bke*AugA"*YOAa)4u/4\VDCc<Vn7Sd1ucMZ-'lI`WBD,L]dXNb-3XE=#';*gSInC)1H+m
%$[\IS!>/l@.p!jUYCZ=I22eGXX?F@?%_KYXGT?%]UafXmR\P3@=^sIAL-G&jYcR<^Tr.PD4P8"CFR*/+D/n33Sb<<*:)gRknK4_X
%5f3;cUC$k!V,_qd2gI@sBjX.oqJ:sC(DB3]jS7qKm3agf>Z$^hXA#h_=9)39_'8T6`gEW3JO:ouAd$J4g;=85"pmB'Z3rA.Q[(*)
%4%G2,+i%r`atI#t53d@-I7"PX4%f`74c&0cD3h2*OaJ*o>#Jj'MVR1FEQXd=[/siB.e,aCPh_Q-5CH3S4ug.GO"=LKQ,_*nQ&J]F
%N/+lnDd>4U7=<?&4ku2bKG=##PUKf1ACrVD34*GN#:JLi5`DWd"l8rU[0;!jG%4$QR\<4-8Y.I1Aod]"fFghf\T4K?_"N,9q?_A?
%o28V'o&f4"J0!Qk8^4TE+F(Lkf62<.KTo`%;P:Y*UPGk?L'doCNO8TL"][Zr!I[#OcpEQX&3`C+B^.'tQ\^N,D_5]/9c,JbXajs4
%',JB$`e>47Qia2qS!3CGUrc8!7.s(o]3TT^!89>Co6%BJLpHL3iF[-m=KnUFB91*-hW<Ytg8"k'[^>lVDQ<[g/[9<+H>G?'bRMQM
%eRYlcS-rs<pfR<48;tJ_VuogHB$^IVj"<Uc78f6'IMFJ8fY%(%`;p:7$rR_fe-9/+KnL.b3lYqg$KG#^YbkhH`bgsK]1E$*]W)`S
%'A\bIQ`I29/&DnS\M+4+N6<p]iiVC;a95^4bn<jH:YZ7FPtS<Ll\Y@ZOTL$XUu"V\#bi9l59PrI7KO]b?No5;H!2=j>rng<iF79e
%MZD-/C3YQ_7QZD;(g"?r0JnYVXGJ<XMBIrN#o)W+ilP_;T/6B0'o<Q;CE[/n@-[hJUl]?lT[u^mCCUEUo^H&\>]O-nA=[;X6YamX
%80'^cPU5K8kM)]f.:UXB,(ateC-9a45Wbj=Mh$U]->09BoZM2YRe7B:Sfg)fq`\=uD`fF^BC]*A"$,a.^f/i-Y^V4[$&cSY,OBqD
%:7Y.^*Xi(p\W$VP'WLj>8<muYs&?sE-B/Cg+6O$<.K!KJ=?*I"A$\D0X-:pRQV82d%=mXNf83rc]Cu:H7Li'd)r!^L=$^oH"iI3/
%eFQ3P8O0:'#_H_=aHE/p5fe$J4-bGVbXk(68^(nM<*1Q9!:Gk^_?,7],Itq4eZo_RE1@\4$ncF/ZkVI6Gchc'lo3TA?(8K_EmL\%
%D`>*jTII`W)1In.S.-]?IA#M%k+$5eamB?FOd]!Y?c7.'gcGVJ'!aJ)Q+8H*k<s-t1M--?Y[:;PUJfhO4#8fmL::Ka"BDE'X=c7S
%:%dqRSh)"pQiY2@=P>:-*h8l?ldqEk\>'9b'L7ke.gdO1BN"uqKWMQ9k\o0;W1bWIA45'j:N"L86\\<65b"@/\N\Y0#3lqpOW$2i
%R8PHnf[UQXMl(t_6O"K'j=%82/A19[,Ng'X0pjRUen"7NDhum]gUQW5Sj?3#V/4f"O<4t)#;Lt(9k6!(BQJM;)f4%UF+ktU^3_\l
%@ZD7#mr1g.8O_$/cf9D:,u:-4>!-BChQKtIm)fG[6_MqhCsbKp(+OFUUo*)K::m#WC*`d$AR.Jf;88\mWAEn/Co`qfDnHfsl0`W"
%;bb0SWP_U:#mng.Z$Q#g/iJ7<mo9-%`5(EEW!4WA_37Dj,IK\sXi]t-DmHu1Ij-33kJC*M/'i:@_6NJY1pnHN'@CtQVB121@1ooH
%$kHks"nb:K*C&<QGhP2NEoLCS?WPC-GLc3f![OOG^]&DLJ[3!";_`oIM'0jemAr,=_sVu\@GrCWD%a-cV]fW_JQ1;R;5UZ0k"@IH
%1X6:=%B<iJZHO%J965f1@FU!:9lAYNY8:EPUtDqpS,C31"im"(@KY?I!%O(+6YCUe8h:$aP&nVF]9P')3LgEt&m/"db@a=rck.A.
%LC7m)U!jp>q`#S2aP65"M,8k=d;U23*^n`dIgJ:ID&<n-!R"8R'%#OY6tb[F(K9=$Z.$&D2gbTG8g-dKrd?a6$!6dSg3&@Sb7@"[
%>9a14*PG6?9,LgOOo.$?)!)+E5uJKK'Fnb$)s?]P83;_3I7qs3-B[<@=S<GS$qb=2iPM6k"?inf%I$<>fTZ;AE2&D-0+@CmeiNZ0
%"OIM6EY(VrFC%'TkC;_hdkT\F\P_>!%dAVXHC+9heh2@-k>(S3^0*qejq_ZW)CK'A)(AAP(Sfb-iQN>!$pKJQFP*rH1@N`<s6@e)
%p$sTsF^6R7hf=u7QLek=YBS#r)_Eu&H<3kR2seG`M56T$']gl!FB=Qg\mQ1',P;<mba5>@Xb2q^C8'(AWc(dt$UqYX\/6<VG-K3<
%nggM%I0PB0mPTgQ%9*F;Sf43mXlrO,r6]^]RjI,_nF,&OkEuMP.*(h@>\=e#ad3n!JR(epWnQ?9K1s\$%I6-E'*8Wo[r1lC7Gl9L
%E@DJ4`@Nt>C=fY2_choH@Fr.tfZ7Wum7<-@CQ$`_n2tACgpFV%*nrrn^7`bBNXV%rnK\dk;0:YUm5/%B5=H`T$$t,V36g>Caih(G
%\EV\R)Za<a2c@&o5TBWh\Zi:g(=pO[9Ng"(ZdH*9NYY[F_UMbYA.../2Xm#Ui5/f*=I![n'=h(ZL0]$;qU-S_7&Mt!@6NEgX,SrQ
%[s,ISgnJ<-^>$ceprIb`R6JY,.sP7\cSbo9NKfS2*2:-h)/E]lIV&j:/;Ajan\kF:g*mDFAi>!RX"h+GMm*VW-V'<o26lt9hq]%9
%SbD;_Cder8(S;f?;oj=rXKNl<:I=`4JH"SaN7jgI0s?o.jM3U&FHiLXp46m8+B!*79r:EQ!0tU\K<F8'&@LR:ACq6PhDGd;.C#S_
%lPN`E2Su1rf,[;,>*P-]e2*6K[+W9j3:)he6?eNuE@W6oF6L[u4N3\ROf6Gg%28'JA73iY:nWl,A.OI-N0Gm%5PYr.&D`'obP$mO
%i"h*q#](EIOPhNW6uWkRX*#'*d4B(n#R.^XU76$8mk\EQ`';sVNJ._DfTbIb+Rp4852Snk76sSokHFi-"t\GFR\D2fZFb`>\(W_s
%=;e"iS'5jVOu<Z9C2IJZCFOoK`au#fH]+DK&V_RH9hM]NElo(g$Ef]X(M#I!9Mt131]Sf8@LnRV!F+Q)REGo+@sl4]hK1Dbd1m3M
%k8AqV2?;siHGK]Q_kBIj5[p<kP$r9ISm:QHL.DClT1cq7SM-:ie"%W2=.ft$ZIM'6XQAe0<-9t#,A+/Q:XUJpZ9:n,Y#CSpP43lB
%gJ6;XH_)m79*9qs'uKA];%P]eW;uR]1ia]rF\Lfd%ejCuh?C&`7EF]D+DqL.\nV//B_Dh2^ihL=Tqd%Wc:o_KK*Gmq[n*T"@..$s
%*GI7W(.5["_3QZs""]#i'2B0Ef^9;NjbNAdUL>:W#pm>HK2rODZ&Z71ClVf%RX%`Zp>Adfh30Q/3P0DiGq?i="+o_p1>L'jMae,q
%E?C_&E.t&bgR)Y4?XoEJqBZU>)C88T=Z+7IEN`l5G=JiH;4>l8S>%o8]Akp`X%`udjYRVber;u6[BK:!K-2&JYEMLZj$_LerY=Su
%6u?mp,'Mh.;@hc(M_)jR^5uJ1Ha`oZRR&U)l='nF/[?K3lrreU@.]Eod@\t,at7Y]_m%T<Mb&4AZ-GVWk,UlO..C*ioE-:[$AU$A
%hg;er`)Q*7&4,J-04U4?!7-aM=oootfrflc9qpIZ'8^tq]gQnr=+b@:"Qfep[fj[&"lRqrF3BSm1E5a8Wg.FSbNN;l+58`DW8_@+
%(C>.J[*Ud+!?mTql,nI2E_X97bf\F)HQ#tRE#[51JlSCZ]d.(KpW#N3YD8.6k]W]mf1HnfZoH4D<J&;@j3a7DqFZUBgu90l\8eeT
%fH-TEZ,,'J#L^OQ##&6T*WSig\%NX0gEXpo?VgYTnrfnO2"9_7.-g[\Frl'uC%#2j`PYu$NNK75h^eKk?q:eMeAdMLmD]mrOV25h
%k@aoYgmdS"o[rFQ4+0r"LXk"$NDt,TMFmLDTRajD,TOj@]L1J'%GE&I3#@Fm$b#i]Qa[q@Q_kB+,c8&_d+mCjn&`(%G<fR`N"f/4
%RS7VY6b`<Q<Xp)k5;33#he_T)ImYa!IFG9O_C`$tO6H)GG?UGOU"9ttbNr-#^(J*.-Q.aicbuCN7o0K81\D@92bH!=-m=oKmU>fF
%=:V'4h2+H*^S$Gc<`deUYW'(b2XL:;eW'/fn.Eka^%/P"('UJd#6s=1JDUEn3-Yqrf%rE6Ie&lH$=Xi\j<O,V)K<QRBM%R56D)]N
%Ja#J]i2CsppH]2pP*_'O%>qDWH4,Y:q;roKac&In_,>ePWCIAFY0=oF8H8kGs!cK,I^8/HY=H$F/$4mMV80!nd&f5ACoASP?U\h.
%1Tq_`_8="O"6J#4fL"l#c5mpr*<OiGs4Ck[b3L<L12J1(bC266<0e_HKS2oPGD\+l.?'K3%ktOB:4WRg75O:0Po!6eXmd"&!":+"
%Ics[DJ""\A?O;_Mkd,7fg%6/J!P(&!.cXR@H^p0lr2NejA5u)cHJ%.D4@$hp==UnmDgJPPn'5i]eW_XLB;Ar@dRn97&:l.NG1#oe
%]`%I^<af')T%[j:^6_,W/HSfs1(b<fWsBo6.EOnQ_VeM*3#"Y5fa9Yf;sHhLCkZ(O-U>T%SuD#k\d>(eSLr]\RcZpE<_;R$]_O%c
%*PV>U_>]NoXh&YAcNX)A2!@lKGET_nOhcG1ZmA9i!tE%L7W)/;?7(+"1alje&'G^]/7q!'</*#5@LhPK(5Q)M(lc0,IuUo5kOG*8
%*fU)s[@gYm5ZUt,HK*TLfdMKk.^C94l<=t,1q-rP-l/?GAPhFFjmd-PcWP_k@W[p2R"hk5(`6!elllVHaHmQ^lf6$7feQ9*63c;\
%lJmr%k*N-qFQ!$,?@GV@b0G.73O>;^\,iR2Nc?5SZ/FJBK%CQ<lEW?8bFXJPD;3_:Z5:E/)*nn9#B#:tn9hsIM-WgT@cYVqY1*bA
%/UG.BT`sl'2@n;5M4:S:)_hu:)MaQ1@m%9d&<W!7$W;9[m;:Z:O[H2#92#?%"iFXR5!B*qJg7:_*a4!.?Fn5j<BZ3Z(]%n1@ii\>
%BVhG)>1N1r'<!oT*lr5qI$[C"l+@l4[pEuV22elM*nki%?iZju!cheJ$KO@DWnQgD/[AEe9,\;<'OXK4+<O2oHJ7bM;6^Zg>h(/l
%M5jM`?`Ib=]a64m;(;\>:II<Z,^VF[PW$k43_,3I<-+>:m0e3iN5?j>NY;4KIcsG/nWbaOdBK7084P+C:?-n@WTOUOmm.B_Ob5:i
%aX1``1_LU;kSC'mQba;61CDAK2n_uuoLj&_SVUdKRJ+ekp?ImJK)sDaaluB[FA\9l5m]*$IdsOu$g4E^5<<Q,.:lFgmb'e\GLMrd
%de)Zf*[R!Xl!5N!$Wis)Hu'GYVd*/p72]'9.Hp9Xni/Q)5%)BFcG:suU\7&&I2s@ChV!&&S4Z0K]<H<0Q\7#GLV<Lr`C2F2E]m4a
%6X+i,b!`AaKa*Bq'#'mt/+gLPMn=`]+C%;TE#8mA`u:&<l*$S,c:,EmI6bIHVb#*f?P"A%b@*Z4#8(`65-#HrD*pa!V"\<+O5&@[
%/<Wps+ChXVGFa>o*)Vc))EJq?3^a,`=$%Gf)$M4=j[b\L%:1Ra&o_8is)-ad9+T4`W<aC=k&uMJLfsJ-FS4Yt<h2d,oDkoo"O<_`
%om0?8H)Q@,\eG`U',_:7%rP78q5?;>M)L]@*2OFEHFI:IWQuEM(m5@N5mKih&Rds4IA,kBn(cd1,\^3]?##_g+t&^&c,EM;MQ+-3
%BjJ<WW,K6]6LiX;@VT%Loo1Qd8&W.mB!.t'F,cAJE%6TGQV:*g8^#PYAV&=,'$BrT9;\#_<SpnW4]^p.ZDU?0cWgS5MOd2@cs0Ch
%Xk.hrf/$G,9P$OD5?l\P/IRWR)2Hs6`Ke4,>+.>#E4OtC;=(\=$(EHJSs3h]"^G!&QOgE<8_C=lll0=/==!\lku:BfW4?/u1bNPc
%QPG[M;Tb>u/Scuj`L2W6cM:,IH].K'TB'jZjWP+FK;rpnCNb!#buI68#J7)Pj1](975m)YW0\*D5!Ier7-p.!+ALOGii_3SFR^u)
%a4i!P.QAt!I'Z23lj#UkD6/5-7nX$YN=Vn[Sba`i@1"-KJG=[Efpktao8`0s9uTm*e^?$Y8C#%N)VpK)Ufe]k''c$uJaTa:1dNu@
%+(Y*k"nN`hhW!sR#PGR&.1VFG)5%\[%F0%^[2U9o3tB2-bmF4lk:AX1l=k>0'+/=_$H2SZ-p\!L>4f<5L?l2e##q=dHC-OrmuO6U
%O\Ogp"aUoQ7)6tG!oZa_)u=TR_?cLGDT0B*Y1DFblgFUY<e,REdOVPQ]]W[8JEE`4%,6;X;pkAk?2<P$*0MPE]j:q7.!CcChJi%'
%IT5]E(k?U>c'IsOEi:E7]-20rm%[)XGWYQOAAhQC2XH9^cHK"Lg-PqSp+q/s3ghh;BgrG^6^k@j[2tU>6cY^*%&]5J`W9H'Jq5e?
%!\a7HV_c'='<i%2/\ckITubLcRJj#khhusFaGYU_kCr#'@@;I%\p_!'_W*QTQoUq^C]f>o(cah]\KEY"qq=tTFac=2@9=et@:D1u
%f4e;Q)N[e8Mfq%T_ltK^P8q;mHY[Z8jcSsSo[4cf1;U5cVJU@(hBmAf5]pBUQaFeED`dE-eH&<3ER?2\[1CC-_Pr[,3b$a%#/H(-
%.2[tnPcl&9q=*qOa>r[m.%N!ECp%Wtrm:G=16=u_7A*/Zd<GHB]f6q24hJ'[Ppk6>0_2%2=<(!-1IG3O3=,/$\+a#p%U/O'$Y;#-
%NSAIXmdC_Ba-qT_9t#cniMD[=i@oI6Ou/]9%I\DsI$bcI2OumeZY=iD9kW;Q4M2Z("31"YaEljDds,kEY7LA]'sOnWVV/;pHC\XN
%EDOgA`l1cE-P-].4.YH+mZ7n<i`[nLoibWPlG_2Dp;m!"k*M9]SE?#hnD8b!=W'F]:eXCrh,tn)S^0Re%4\$t7l1`FV:ECJQ38]"
%'HA+ZgDT=#(a@o8K/7=T";-9NF_$0oP9R9JYtOf3*c^aVeU"Z*nM%bVl!BZ<Js<#X'0T$L0A6m-h&`!<Eec9^Hh"?_Pc%n5P+FQ5
%]3uZ@8s5*`iK9hjgr(=jDGRf)p5>;m^SKu]-#@P":QB:JpAO5(/;EIOUeaKegfI0>"HRtfa['8,\>;PqlhgO!^[^G;!,D_4Ej-e4
%hQ03h#NuP9)tR9YZtg$oV1@#.Tj6W(nHFc`-(qF5ZC%s(5"ZsBAOrq^]ZJh!+Kn#gaerI"@l8!c3lcbaIgbtNM76u8]sn^U6^0hb
%!_m9c<-5E=U6^SU)/2]uVbVWk?.(?i/$p;VIR(%&c2K=GA=5Z,F8Xi6*q,I9^.lAh52V,]7gN-l'_/DgG&>*XbA!p:^3SC5i;q*5
%%@iZ'HD5C+br"aijka'_WFR*=BG.s5_t<Zji=4+Cs)LE`T_t^rO\\82kZ&+I98h3\?Mb>Q#+H90A27Zl-tU@pF`S0+JK7e%`U'V+
%j2kK9=^YkEZ$+qpN2lhNqHqO9'jL=AXp_2&b,sZ+3$\0:Nr"P`OMV_#;-aMCKVi%&m!DqNL=4.L-_QjOi\DjVWknp8)+gX(=q4)V
%f0G?.dGT$2$Ca;8L2B2sXZ()?Jq&AAF>-2;T;17;K\1j":oJRM@Vh&V6_pFZ*)Ei3W;"3Q)=$[m5!Ou?4G"dKa1d>HoFVBSDKg2t
%n,(0Y<B%pL1g@Nt`64^]$,@[fUMIK>ViFr2mDSH^0oA%Xg&qdR#`)/-&2a]9F;CX;8XqSm2@g'JU5U7AhW6cZbrllR']`>j_..[k
%qFnTbm.TU)SW6u+F7IU.Xa>s^2FlLPH!P=@Tcc!IBSSDYo^m:$'^7ULo>VJRDt&YR#9YsVJRfDPeIc6"rZO(EJl14m4tHouXi-Zl
%M=CF2e/-.u80(SaJD[XogloW@iG<Y0"S^ku!Eum"D;F%d'&T-Mbe8.i?33BqFb)SHi9CHeV&]+WN"b_cWGEs&7#F+Z!VA^C"eo9+
%AjE@.+L4D8/HBVqf\830g]XEW_!Mo9YnaidJO+Va<kDhp(:^h"5`TSOs,$Z7(;Vi%7]oKR^R1\e9[6SN=;Xh8ct0%*QK.mc7Lia5
%JkIZR&p(Ru-8#jg&'N!$Dd$_q[5]hn+-3dr13]pf/lI(<*cR5p>U1($l,RF^asj$p8:1?GXQbsk?)2))j`%,.mij'j80#t/jZ*FV
%c;ZGpg2l-J=ak`jUbC0`cgpX*!e6?ps)BH<$"P_W&_<%t),IM(?**!&1Q5h#osfN=^)oW2J2OTNJOrue<uqr+[`UrY/7;("_GFm?
%2cdZ$C':*o![-Q$*o_PBTpD#>kpf:meDK0Lh'"[q8D@`g1e:1e$Rtn,ktF(XPFSW5$6LQ<I66D'U'arb28.[KYr^1*Q+sBqL=HL%
%OtOD6ar-3]U`hd#]Jnm0e0pA%6!:hr5"JXX$P-t+du^;mK;)J&-l%U"]g?i/nieJtTWcF;;#4RBJAX]9DqPi]VhfR#@jAX8X-ob3
%Z-"3=R"Fk0lm<B6jR+7lcLNA4ifO=CQi^)jQ"!+69#_\'lYotR3Jf3Bokm5>$W@X59Z<KY32HMDF90,NQ$p\'8n3G6=FiY"`eL"s
%O-@-Fd7[WP1=(?>X)G@aTGG6Hc)!V>Q;f0?[1*CQlO8a)3)G]G[fq;R1iYM,;0cn)[h2GG)(L)#SR7%YN+_OtLnJQV(rBh*g"2>m
%SN-<a#"EQ>#h#,aVn9O^Q5^oAK#I>[0&3^se+V"tS(tg4=^69<:FsTOgP-Y%&&MnReg%aEqW.j^BC\+DMe2Eh9J8cJS=Y!EIki[q
%`8a:@L]ubhPne,[.&JU\$pYPl\b?Pd%0lir26SAdni/G^2_nM?'e-D6s&^opB4WdW(Y-]l")L]I2Y2^K*+Lc:fgJk!o9l_+cT(]T
%c9oDl4Go@0P`;pL>)cM1TaVMcT)ZSObTlr[KUZhplS`h!/Lf[+-FoO]mKk2q,B)CigMWI2(J`.rp?!6!/qdrP9M9-2n@i%IeMqB:
%bYoeUM.:us(t_p"GA/9Ci](mb,bkn<@@gk6TZH0'L*Z`i`0,apU6^FJ.uoZY\IH3sOj[MToan)AM;fp+[7@?)*`3g/-TBk^L3:.*
%QQ=i5!k>J`CQ'#&jo)0fe"&lE8h9nZj!<FOf]j>m!)32keq,'#.#F/k9$Rmp%Q3Jl>eI;%nZgF"@fa7JE-i\'!;m5!dZ]`$rcMGZ
%ir.YO?TPmLbOXt-aDSF*7Vt5_`6p'0"u$i]8i32)oJj?'YQGVF5B,)l?TuY#ZM=E5PbpD;d(-X9`bBT(MJX;[]82NcjhuMn+ebj#
%U=j#_*C\XalG\qUQS-k7Fb*8nHs=>ER/=cPA;rWZ'`/A5!X'b`=AO1aT(Oe%D0T!flpc&D9\L(Ng7'"!TL95m%@nmC@@XWs76<r6
%7ptp##&<[ei=RW\_I#G8g1"`n&%q-9eOb_gB\ih`fg8H^;V<cpeKGPoM&sB+lU=EW/Do`@?=As,nhAXbH_lY-(Ac+3=LR;\U$;]3
%)YKaY?S%g62:q^Iq67hap]DXg4hcgq8>DH53uZg3#rs#f0Re>(Ldk!l.(b]KU'>M)(YpQBQ5?9aO&%!m,p.oZSbZ>_o+Sq`&:?1G
%!*CX\)?5KRG5P`dDh$saVAJb]9Q*%Cf(D1D]!LkcIE?O<&N^mPU9)ihIT>S=L^#@F>P-<+9/VS;)1@$S5gb.;PSO',WO40C`(_Jt
%83$Pk9#=NsM9-`sO<tgl'JY^T&aS='@]Bm3AeHSJ\CpBd5LPaQI2U@CbHQYY+D)k.Fu[;[`Xf7#pBq_SZ\b-#I<rg,6cRJ8Ie;IE
%4\Njo1e?-;*?kXN.ERk(Pgtl=cT;Qe.Ojn='G6u>&ITR)g6+k!`a@.TUo74eL]JfZ@-q5fDQ3tN%t9oR`X%Ft-5"'X'X7[$6tE^r
%]j(Pm[&?q6U?Vbun5c8e,U/uOVQDL<b@<8`kleoUS"b\.UlK+60(eP-C10<^37C?(W.V!@lN<1(5"NG>=o^P*8+4OF220X)C'oa4
%8c\0'7&KDsc6B\U/#cdT,T\Tj%TEb(DrHOh!6<O()Kb]@@?d)G7SGDjna</_]%esRGjaSC0<b2b(=G)nh0aYUKfOecK#gr[_11:,
%D`D'OqB6f*(UK)cO0!gbWdtG'Ltk?!7jE0W6u&p,1qq=!Mq@N99^b2oj2qRTO)udl$F&s?Pa"0(A`/_8-Nk!BRjaX]mPo`0nQ4Z^
%U3_U\<gpK6U)Sn`-W^,2ZV)Z-GT9pB#l<m'WW[Wg/+RJl*T*[paQF2cE1?MD</YSC#L*q&qk3H\r)E@G6P2fQd!&3T^sok/G"a_?
%%kU<eE1e9MD0_MK%qXeZ&VR*\&YgJYOChV\UY\,U)."/#UPIdXi`k&hZ[qef%U3%N(UMD&jg(Ml<YcX(;@h4tjkI/90_Zp/oKK)H
%^%<dH6c?ljLbO$@cNHmDk=(h$\ucMuQ%12#U8L`!M;e%pVM;D#r$Ge`T]_";9eGZZU[%"VVqTFA3mJN8Qc,<8/3$\hDX&\8Glcm/
%/]:>O!+Xim?qUpgW'j&X12.<!gM?pl(/0GRQ?ie6@DcF)2#tT&:'73Dntfr93-7,[5AE5r=:H5]r=f_TB07K"Vt@Xk:"1`rZ][b(
%54<nImIS$G/CHjP$O1bDK9X*)\i9*i4V#8djUI>#6m3`S"d>=s359\/9P;]WmmBK2/cUfuGkUU,/WS)QcBR%+:j_Z>\bh;*IsDD:
%D<r&jg8#aQQ,r!kA1E6N!_5<K)TouePY9KGfN6uT6'qsJ31QMmAPMQ$*b@tk]l@&=&)<$L"!A8<o`b=Q(^%f><OZTl7&j"(Lol=T
%_UbL4pYq4R2IVd,4]j6"="<epFc+1R5Ls47q_61+/SZ%BOES4h?.UPIgNbqsYqF7r<uG<\PNk?-PO5c^d+5)Lb2uo1L._np@;.@\
%d7;)sgq0e0(O#<%@%Iemg%`8ukr+l00$M2[=a3=Bf4j2O9qL!30$)"I]?>/agq/7R\8YW<[dhdt^9"#t(Y:!#3*o7$o2eKeD8B"&
%"p0q`gd;cA>RlnMK&NgL$$qa4^1eFHX[dCD+pC=Hi>tjVn*Vhe@>7Jl431:t-LNoF`5`*3X)&rZ[d'W.`";_i.uD6UI$]9F/\I!j
%(epX$/3tje'.',DSKbN+gN$\4C*)N?WCHB-S<R*+<7FP8H.Ij=UtRB6j=qa%2d%=N,](@km_R_;Tp7OgPRo-:=&;^8DlI4>6k2Gh
%'8#=I2qXm^AP?PeL=D+iW@01W_NFp0,*?9Rb(iN9clm-mh>sH`Mifj\?<]N'*F%/?l?S8]hr[&O;8<7gg#>>)V=,]ZB4.#5;Ee9^
%pG#U#`<FcBbi@bi,2uN6CP@Go=NnijL!Up-DLe:1.EK+,"CE@m[oLLdA."iXmcp%UlPq!8:G99_Ma/2!2$6ZV\fO*6Q5D$!Q15Hj
%i3c/n?A^n9Kf_(N4k$XJS0>kRm06XUnsSMQ#1/!M3mHf':q(.eA*,_)6+RuYn:i<RogZ^QGCOfLYQ#;t2kbCKGS)-P<WZJkCEP;!
%32_WL@;@5V8H5Xh0(RRIm-LiS*I*[14sJ\<\T&*)kA=IZ^[@6t'W1%>qCD4Y(&tZOpoaech^j9BFZD6!Z"\HKK6S:$mn)grhgb0]
%QZp*5hY>&Ko=-HD\:q!XkS!_D+(o)rjCQaT1V6Co9eY^=T*+6tp<3%"d\#+dE]773%:5\B2&m>=!)u+QGSm3YJ;l<s&h+-uM][5G
%_CoW"R4k;biCQi1_(0"r,IJ#8!HWb5$J_67%t88@HuV]jl>40SBQkJOf9:-$5$e^sSc_]/]uLe?Kg+iR;d6&&($p0ol:o=ZiXhYE
%jS$PYl,<u)3i(5m]/Z33+2ajqqW`?>SdjXpZRcQTbB`Eks)L$T/Y*FBq4qA#"DcKF#7ZXH#A'$1C\1X#p;Lund!E!:(O#:Y0V:h<
%/CuEe)iRo3p>U)1U<N>5_^GmSGd<X=h_@UaGi_2jLr1*/8`nt;TcFLFbp-/l;TjE7?9-"][W@6W?Y&n>i@?HAMMm1:P?PIuj*+(-
%X*lbjT+'+(P`#QLc&?ghgX,::O=5Z^`]Xn?LT:$o2+ANVb5i1F(r\EB,C+15r9>JdpX^QgJ>0"8R7(a)aT;.L[rLlkL%+mj5;GXL
%L("[^"nE/Z3TYpH(`pIA&KB0A"mmYR6=QpFo?+3T%MnG3mVl"XJ4pK5d@CV<)TEDdj^\FHBMdQcA]h^tBkk5@rDY$L(+F\hh-8l#
%WI?,\f6`@-3^pOp(u@C+'>'O'oBNJh*l+j2PS)q#V%pa(gUi'%J2g+ddu3/2LaM&sFhEP)c@Mf\ph:VC>(j6ET[t/'@n:J_CQ>1g
%fOi1m*sRGoo-n.J!^p1rKfuH='5u)a@T;7k;S^Le'a/k0_s/?YHEinZ8LUb&iBOQS*L:t"j/bLB#oWf<0S3*Y4[H8W2ZM_3X!=K@
%c6NH95)4DLb4no2^]o/&C@K(!-%9U;(a66pdZ.-?M5k9k,2gI!l0:jY)usJfh&Bns]1'N(=cYaYP&2n_lM!)b[ODj54*R04\<'B9
%'PY^*@j3r%._+$HMUi-%S9JmaDDjC,BmN_oZg2(JD/JaR/+cctM2Qg_PdEL*bFW+6R$uGHgS;u2efX0g@!2ADOk?DBm"*6#!YQ6K
%7=GtHjSY3J""4="2fi_",SdL$;&(Kf4gWs*>=hu4FJ/r5>ZBUt0pQOuef/`770T)EH'XU*fZ.C&+NFSXqll`mH`/7b;lWmcfPQ(#
%2"_(,IdtErbB_uj85u'Z>gAg*H&<2C<kooG*>W6((B':aBG%>Uc$JSjin<"go0RI&.a/2+'KiOFW#VsaJ3T(0,Z1:L'<U:+.L0m_
%i>-Yma0Q*lc(jB5+Ccc1$9j61C_2_@BCW+eknai+>mSF[ZlOsT4n_L@Bb^hnXT.4(<t,@D?7;5B%8uk1VGe+pOXO_SZmI1]qn<G_
%d9J$sU9P@UM((o3/FXWP1Y&@cfC]>Nm\FR//U-;sn':fWTa4IaQ$9EL#+)"CU?nKfA>$3R;W9^i%a>A+j$bJWo>Eq'+tg3TKthso
%U'YNSN!LpVP`j275LDBi)YgH(;`Aa6;Pb$6s)*N2MLf"`^,=L&$X"cs/>6K9FO9W5mF,NV]ijJBn5[p$XB_9ol_>8Mbh31k7rElp
%41]VS$Y\D[ZBN)I^6S(?Zq%Bi%U7L9Y7_-H0W7e@90N$AH]2Rh7,q=-b^,JUG4Tb#09cQZm56pD`+3B?7rDXK8>Ir;-f;#nU.Kj^
%)cp/Hc)fHc3G2dJh54R8[um\*?2YM>*CaWsN*5UE66WoApB;2%YXiFdVmP0G;W"!Z`4-H`M;SRsnXS!I12N6ORe(%T7+sNY[`HWD
%%5R5@VD'Q.3d4T"Zf@Cm+M]bP?7i8>`tef6Q*uLmdc9),!5.OJ-5/J%*<r+fk=4T/F'N@+_Q8clq7M#oY(^:BF'6se3u3Cs"0M9p
%#Q*$OR&ku&aUVa@Ajn6T@gj#K+Yan(a!-d7MQ/o[Uu^U@74NHl8=AOja=n7^]B:OGl-aTXfXFL8G`b[k1X8p2)T)\e<jM>T6@qY%
%]Q]!0E"^A&l/UR<GPfVgMm#=c[4bgA\(nXBG.II^i*HU6EM8FFF<RB!=X"b"d"_ci@_'`rD=C;3,k:IY^=>=<M%.j%p]jeIn-DeN
%%(E0C]-5k-GSRB\iDd%"GEu!h\2Z'AV^ebn5q[b(0/JMjWA6M*JuBg#YpU,T!+21C:U(#\ogn6ROV&QurQqNHXeg<bc-(.@I\/kZ
%(-misdBS4NX8jG[,fpC6Z2gc'&M-p/+fAsCIiYZlfE]I$m#Kg_1I'``6%9MpHepVdCXXH<3,7&XnpGW,#Q/BE]P,D\rl!l=XN^@&
%?,*WCB=!BOQA'aoYbK_2engX(Cq%O-j3Q#%QpnMs*S5QL!*Y&4T#?iT^saJi[>8<E!a^ehfK+Ji#dhk8\96Tp8Ut^o#5k0>i>Ga&
%KHIC[SQ,r/%MUK)n/%Yof7SNd%BRd.Kmg516E\n^MaAMPGf:ZOQjb7[h(DaX_U+`'Z58Mh2'fF4>c\#IMa5?->Vauo060mm`ob,`
%I:Bh62XY)[:C!'ueF`fGS9!rUE,fcu%bJ`WfKVEB^^EAPm8,Gun(Bpt*I5[;VpO<8*de_lSAL8DT]@kS\Hm8ZJt_M/knIB."CS,m
%M$"8e6tMCjX91;[8BrF91S*EH?l'(H_Ap)<%DI#iO^.s$f8//b1j9,]IB\W:A27EWkG=;hYq'/;ToVd(e%AUN9k7UqY]#IFgFI7o
%l1Dm5">2j$8qb:&%A`7EG%q]0!AC6`AUA2q^!0!(#_tDNLBL%DT4BLV8qZ,",UCoP>B-JOTtb9PN?6n2CV"m\ocKM(KGJ.$CU*0/
%DrWC>^\5W!Gqu*_^:J&ZnUt!KY*5DOe5UU45_.>lfKCHEQhA<NNo-&)=Q%c-5X5(R\_p%1c&Xl)Z6Q<!#1Ma9AhiB&;VM4P#Q9b\
%9Ef^$&aWnP(65$k[?BZ$U;bo8GgMaX]`:UD]$Nn,B$uSr<sF1I=bf?P,#ln12<UJ4[QAZ2HY>)!-5?aC$l\?^,4&*;'A;RlQ-H?g
%lQteP0/dnBDEqum7]&=ZP9D\P$AnNe+T^EIcsEUjb3/n>hq@NPS1N61F4"9C1QZ"^l?L:_,=de(=IQP65%WVsNQ#Ys-A/u>E/Xm5
%C[s^$@*,p?p*EmtNsZY?fG=cfAO[AXb2kA@K^`l;(tE)%P_$dQ%PP;4:h[DrQ`Kt37\IV4mdW,YeaYPL5t+$d3Xg!J1E2eHi738$
%,%Ms\"?qt.`&!Ht&f#.#8qd'uZh/if\\/SPEbOQ4[V\"CedV,)1%d<A>7g\#-cp?RqA4CaEr#c9'=dhagDaoi*3d=Hm-IAhbRI_0
%M4HY-66K^-4?!%KZc]SNS93LP"0PYc6Dr+dGGVTG\o",AT<$+m:7W-g;F,dWVt+ih^2!MB'u&<*lOC2Q=nDVsDq*<tT(i1]5:k=*
%6J&<(dR&<*3c7uQ<fn3;8UW`NfS()IX6YIG?YKK8R(.S5Og6rqXs]KgdttLmpXTT1I$-,-gKB5YO1Mr<`k*7FM[!JNfp+bpC4B3+
%Y>19dPi>#P/lg4a74n/a'8?1Z'GjsER<kFrn3U>4ZoVlU5Q1.[IVM+u'c1Dh-K`]Wq=/8Q7g##2&YX@ciW0fnSWpCQ>hmb[0N[_M
%fuO/AVfU^tr+;sNp8sW-KE=UK#V4*lF#2@;Q_;5@X:pNo+mie*Yds&s)&ep8s3om)o%W(%rGQ"ks-qpEp8`-3mF-Q:m&rXko0%K/
%r&:8Ip4*#>gY_r&f:W'=n,DaA0/%g"rU7MurE$N(Da++i>l()_5Di9]H[u[B3RDZ&kOHDT0#]^kBikMZBRV=U6Q(,-%`3USMC85o
%R+p=bVKku&G/:t$E"IiMd.4FYSCN/ab;AVaEjtN9HE_K4@hesV?QZelkSu[Ap27!opH=OmIdHsD6up1(2*ht7U6$oI*emW./ceUo
%duNu;_q*IW<>^1oQ'7"BA$td^66L2V+<SW+ode?n7LPGDL4^T=2TCsE5oua?mnCmK&MbXekMf-AQJ__g;]3FMmuARgjaXE4oFJ_8
%5PMA\mH\[TIm+!"s)29CqWn1Wm8q'ukHDZ!fjF^S?bcI*lVCmdp9tn*YQ*_ZVbb),p?R5,rU7K!qU<4Yhr"As89!%'_p<i3&-)E3
%IeHkC+6'T-fD~>
%AI9_PrivateDataEnd
